[{
	"name":"Types",
	"subcategories":[{
		"name":"Annotation",
		"description":["Base interface implicitly implemented by all annotation interfaces.\nSee Kotlin language documentation for more information\non annotations."],
		"code":["interface Annotation"],
		"url":"-annotation.html",
		"subcategories":[]},
		{
			"name":"Any",
			"description":["The root of the Kotlin class hierarchy. Every Kotlin class has Any as a superclass."],
			"code":["open class Any"],
			"url":"-any/index.html",
			"subcategories":[]},
		{
			"name":"Array",
			"description":["Represents an array (specifically, a Java array when targeting the JVM platform).\nArray instances can be created using the arrayOf, arrayOfNulls and emptyArray\nstandard library functions.\nSee Kotlin language documentation\nfor more information on arrays."],
			"code":["class Array<T>"],
			"url":"-array/index.html",
			"subcategories":[]},
		{
			"name":"ArrayIndexOutOfBoundsException",
			"description":[],
			"code":["open class ArrayIndexOutOfBoundsException :     IndexOutOfBoundsException"],
			"url":"-array-index-out-of-bounds-exception/index.html",
			"subcategories":[]},
		{
			"name":"AutoCloseable",
			"description":["A resource that can be closed or released."],
			"code":["interface AutoCloseable"],
			"url":"-auto-closeable/index.html",
			"subcategories":[]},
		{
			"name":"Boolean",
			"description":["Represents a value which is either true or false. On the JVM, non-nullable values of this type are\nrepresented as values of the primitive type boolean."],
			"code":["class Boolean : Comparable<Boolean>"],
			"url":"-boolean/index.html",
			"subcategories":[]},
		{
			"name":"BooleanArray",
			"description":["An array of booleans. When targeting the JVM, instances of this class are represented as boolean[]."],
			"code":["class BooleanArray"],
			"url":"-boolean-array/index.html",
			"subcategories":[]},
		{
			"name":"Byte",
			"description":["Represents a 8-bit signed integer.\nOn the JVM, non-nullable values of this type are represented as values of the primitive type byte."],
			"code":["class Byte : Number, Comparable<Byte>"],
			"url":"-byte/index.html",
			"subcategories":[]},
		{
			"name":"ByteArray",
			"description":["An array of bytes. When targeting the JVM, instances of this class are represented as byte[]."],
			"code":["class ByteArray"],
			"url":"-byte-array/index.html",
			"subcategories":[]},
		{
			"name":"Char",
			"description":["Represents a 16-bit Unicode character."],
			"code":["class Char : Comparable<Char>"],
			"url":"-char/index.html",
			"subcategories":[]},
		{
			"name":"CharArray",
			"description":["An array of chars. When targeting the JVM, instances of this class are represented as char[]."],
			"code":["class CharArray"],
			"url":"-char-array/index.html",
			"subcategories":[]},
		{
			"name":"CharSequence",
			"description":["Represents a readable sequence of Char values."],
			"code":["interface CharSequence"],
			"url":"-char-sequence/index.html",
			"subcategories":[]},
		{
			"name":"Comparable",
			"description":["Classes which inherit from this interface have a defined total ordering between their instances."],
			"code":["interface Comparable<in T>"],
			"url":"-comparable/index.html",
			"subcategories":[]},
		{
			"name":"Comparator",
			"description":["Provides a comparison function for imposing a total ordering between instances of the type T."],
			"code":["fun interface Comparator<T>",
				"typealias Comparator<T> = Comparator<T>"],
			"url":"-comparator/index.html",
			"subcategories":[]},
		{
			"name":"DeepRecursiveFunction",
			"description":["Defines deep recursive function that keeps its stack on the heap,\nwhich allows very deep recursive computations that do not use the actual call stack.\nTo initiate a call to this deep recursive function use its invoke function.\nAs a rule of thumb, it should be used if recursion goes deeper than a thousand calls."],
			"code":["class DeepRecursiveFunction<T, R>"],
			"url":"-deep-recursive-function/index.html",
			"subcategories":[]},
		{
			"name":"DeepRecursiveScope",
			"description":["A scope class for DeepRecursiveFunction function declaration that defines callRecursive methods to\nrecursively call this function or another DeepRecursiveFunction putting the call activation frame on the heap."],
			"code":["sealed class DeepRecursiveScope<T, R>"],
			"url":"-deep-recursive-scope/index.html",
			"subcategories":[]},
		{
			"name":"DeprecationLevel",
			"description":["Possible levels of a deprecation. The level specifies how the deprecated element usages are reported in code."],
			"code":["enum class DeprecationLevel"],
			"url":"-deprecation-level/index.html",
			"subcategories":[]},
		{
			"name":"Double",
			"description":["Represents a double-precision 64-bit IEEE 754 floating point number.\nOn the JVM, non-nullable values of this type are represented as values of the primitive type double."],
			"code":["class Double : Number, Comparable<Double>"],
			"url":"-double/index.html",
			"subcategories":[]},
		{
			"name":"DoubleArray",
			"description":["An array of doubles. When targeting the JVM, instances of this class are represented as double[]."],
			"code":["class DoubleArray"],
			"url":"-double-array/index.html",
			"subcategories":[]},
		{
			"name":"Enum",
			"description":["The common base class of all enum classes.\nSee the Kotlin language documentation for more\ninformation on enum classes."],
			"code":["abstract class Enum<E : Enum<E>> : Comparable<E>"],
			"url":"-enum/index.html",
			"subcategories":[]},
		{
			"name":"Float",
			"description":["Represents a single-precision 32-bit IEEE 754 floating point number.\nOn the JVM, non-nullable values of this type are represented as values of the primitive type float."],
			"code":["class Float : Number, Comparable<Float>"],
			"url":"-float/index.html",
			"subcategories":[]},
		{
			"name":"FloatArray",
			"description":["An array of floats. When targeting the JVM, instances of this class are represented as float[]."],
			"code":["class FloatArray"],
			"url":"-float-array/index.html",
			"subcategories":[]},
		{
			"name":"Function",
			"description":["Represents a value of a functional type, such as a lambda, an anonymous function or a function reference."],
			"code":["interface Function<out R>"],
			"url":"-function.html",
			"subcategories":[]},
		{
			"name":"Int",
			"description":["Represents a 32-bit signed integer.\nOn the JVM, non-nullable values of this type are represented as values of the primitive type int."],
			"code":["class Int : Number, Comparable<Int>"],
			"url":"-int/index.html",
			"subcategories":[]},
		{
			"name":"IntArray",
			"description":["An array of ints. When targeting the JVM, instances of this class are represented as int[]."],
			"code":["class IntArray"],
			"url":"-int-array/index.html",
			"subcategories":[]},
		{
			"name":"KotlinVersion",
			"description":["Represents a version of the Kotlin standard library."],
			"code":["class KotlinVersion : Comparable<KotlinVersion>"],
			"url":"-kotlin-version/index.html",
			"subcategories":[]},
		{
			"name":"Lazy",
			"description":["Represents a value with lazy initialization."],
			"code":["interface Lazy<out T>"],
			"url":"-lazy/index.html",
			"subcategories":[]},
		{
			"name":"LazyThreadSafetyMode",
			"description":["Specifies how a Lazy instance synchronizes initialization among multiple threads."],
			"code":["enum class LazyThreadSafetyMode"],
			"url":"-lazy-thread-safety-mode/index.html",
			"subcategories":[]},
		{
			"name":"Long",
			"description":["Represents a 64-bit signed integer.\nOn the JVM, non-nullable values of this type are represented as values of the primitive type long."],
			"code":["class Long : Number, Comparable<Long>"],
			"url":"-long/index.html",
			"subcategories":[]},
		{
			"name":"LongArray",
			"description":["An array of longs. When targeting the JVM, instances of this class are represented as long[]."],
			"code":["class LongArray"],
			"url":"-long-array/index.html",
			"subcategories":[]},
		{
			"name":"Nothing",
			"description":["Nothing has no instances. You can use Nothing to represent \"a value that never exists\": for example,\nif a function has the return type of Nothing, it means that it never returns (always throws an exception)."],
			"code":["class Nothing"],
			"url":"-nothing.html",
			"subcategories":[]},
		{
			"name":"Number",
			"description":["Superclass for all platform classes representing numeric values."],
			"code":["abstract class Number"],
			"url":"-number/index.html",
			"subcategories":[]},
		{
			"name":"OutOfMemoryError",
			"description":[],
			"code":["open class OutOfMemoryError : Error"],
			"url":"-out-of-memory-error/index.html",
			"subcategories":[]},
		{
			"name":"Pair",
			"description":["Represents a generic pair of two values."],
			"code":["data class Pair<out A, out B> : Serializable"],
			"url":"-pair/index.html",
			"subcategories":[]},
		{
			"name":"Result",
			"description":["A discriminated union that encapsulates a successful outcome with a value of type T\nor a failure with an arbitrary Throwable exception."],
			"code":["class Result<out T> : Serializable"],
			"url":"-result/index.html",
			"subcategories":[]},
		{
			"name":"Short",
			"description":["Represents a 16-bit signed integer.\nOn the JVM, non-nullable values of this type are represented as values of the primitive type short."],
			"code":["class Short : Number, Comparable<Short>"],
			"url":"-short/index.html",
			"subcategories":[]},
		{
			"name":"ShortArray",
			"description":["An array of shorts. When targeting the JVM, instances of this class are represented as short[]."],
			"code":["class ShortArray"],
			"url":"-short-array/index.html",
			"subcategories":[]},
		{
			"name":"String",
			"description":["The String class represents character strings. All string literals in Kotlin programs, such as \"abc\", are\nimplemented as instances of this class."],
			"code":["class String : Comparable<String>, CharSequence"],
			"url":"-string/index.html",
			"subcategories":[]},
		{
			"name":"Throwable",
			"description":["The base class for all errors and exceptions. Only instances of this class can be thrown or caught."],
			"code":["open class Throwable"],
			"url":"-throwable/index.html",
			"subcategories":[]},
		{
			"name":"Triple",
			"description":["Represents a triad of values"],
			"code":["data class Triple<out A, out B, out C> : Serializable"],
			"url":"-triple/index.html",
			"subcategories":[]},
		{
			"name":"UByte",
			"description":[],
			"code":["class UByte : Comparable<UByte>"],
			"url":"-u-byte/index.html",
			"subcategories":[]},
		{
			"name":"UByteArray",
			"description":[],
			"code":["class UByteArray : Collection<UByte>"],
			"url":"-u-byte-array/index.html",
			"subcategories":[]},
		{
			"name":"UInt",
			"description":[],
			"code":["class UInt : Comparable<UInt>"],
			"url":"-u-int/index.html",
			"subcategories":[]},
		{
			"name":"UIntArray",
			"description":[],
			"code":["class UIntArray : Collection<UInt>"],
			"url":"-u-int-array/index.html",
			"subcategories":[]},
		{
			"name":"ULong",
			"description":[],
			"code":["class ULong : Comparable<ULong>"],
			"url":"-u-long/index.html",
			"subcategories":[]},
		{
			"name":"ULongArray",
			"description":[],
			"code":["class ULongArray : Collection<ULong>"],
			"url":"-u-long-array/index.html",
			"subcategories":[]},
		{
			"name":"Unit",
			"description":["The type with only one value: the Unit object. This type corresponds to the void type in Java."],
			"code":["object Unit"],
			"url":"-unit/index.html",
			"subcategories":[]},
		{
			"name":"UShort",
			"description":[],
			"code":["class UShort : Comparable<UShort>"],
			"url":"-u-short/index.html",
			"subcategories":[]},
		{
			"name":"UShortArray",
			"description":[],
			"code":["class UShortArray : Collection<UShort>"],
			"url":"-u-short-array/index.html",
			"subcategories":[]}]}, {
	"name":"Annotations",
	"subcategories":[{
		"name":"BuilderInference",
		"description":["Allows to infer generic type arguments of a function from the calls in the annotated function parameter of that function."],
		"code":["annotation class BuilderInference"],
		"url":"-builder-inference/index.html",
		"subcategories":[]},
		{
			"name":"ContextFunctionTypeParams",
			"description":["Signifies that the annotated functional type has the prefix of size count for context receivers.\nThus, @ContextFunctionTypeParams(2) @ExtensionFunctionType Function4<String, Int, Double, Byte, Unit> is a normalized representation of\ncontext(String, Int) Double.(Byte) -> Unit."],
			"code":["annotation class ContextFunctionTypeParams"],
			"url":"-context-function-type-params/index.html",
			"subcategories":[]},
		{
			"name":"Deprecated",
			"description":["Marks the annotated declaration as deprecated."],
			"code":["annotation class Deprecated"],
			"url":"-deprecated/index.html",
			"subcategories":[]},
		{
			"name":"DeprecatedSinceKotlin",
			"description":["Marks the annotated declaration as deprecated. In contrast to Deprecated, severity of the reported diagnostic is not a constant value,\nbut differs depending on the API version of the usage (the value of the -api-version argument when compiling the module where\nthe usage is located). If the API version is greater or equal than hiddenSince, the declaration will not be accessible from the code\n(as if it was deprecated with level DeprecationLevel.HIDDEN), otherwise if the API version is greater or equal than errorSince,\nthe usage will be marked as an error (as with DeprecationLevel.ERROR), otherwise if the API version is greater or equal\nthan warningSince, the usage will be marked as a warning (as with DeprecationLevel.WARNING), otherwise the annotation is ignored."],
			"code":["annotation class DeprecatedSinceKotlin"],
			"url":"-deprecated-since-kotlin/index.html",
			"subcategories":[]},
		{
			"name":"DslMarker",
			"description":["When applied to annotation class X specifies that X defines a DSL language"],
			"code":["annotation class DslMarker"],
			"url":"-dsl-marker/index.html",
			"subcategories":[]},
		{
			"name":"ExperimentalMultiplatform",
			"description":["The experimental multiplatform support API marker."],
			"code":["annotation class ExperimentalMultiplatform"],
			"url":"-experimental-multiplatform/index.html",
			"subcategories":[]},
		{
			"name":"ExperimentalStdlibApi",
			"description":["This annotation marks the standard library API that is considered experimental and is not subject to the\ngeneral compatibility guarantees given for the standard library:\nthe behavior of such API may be changed or the API may be removed completely in any further release."],
			"code":["annotation class ExperimentalStdlibApi"],
			"url":"-experimental-stdlib-api/index.html",
			"subcategories":[]},
		{
			"name":"ExperimentalSubclassOptIn",
			"description":["This annotation marks the experimental preview of the language feature SubclassOptInRequired."],
			"code":["annotation class ExperimentalSubclassOptIn"],
			"url":"-experimental-subclass-opt-in/index.html",
			"subcategories":[]},
		{
			"name":"ExperimentalUnsignedTypes",
			"description":["Marks the API that is dependent on the experimental unsigned types, including those types themselves."],
			"code":["annotation class ExperimentalUnsignedTypes"],
			"url":"-experimental-unsigned-types/index.html",
			"subcategories":[]},
		{
			"name":"ExtensionFunctionType",
			"description":["Signifies that the annotated functional type represents an extension function."],
			"code":["annotation class ExtensionFunctionType"],
			"url":"-extension-function-type/index.html",
			"subcategories":[]},
		{
			"name":"Metadata",
			"description":["This annotation is present on any class file produced by the Kotlin compiler and is read by the compiler and reflection.\nParameters have very short JVM names on purpose: these names appear in all generated class files, and we'd like to reduce their size."],
			"code":["annotation class Metadata"],
			"url":"-metadata/index.html",
			"subcategories":[]},
		{
			"name":"OptIn",
			"description":["Allows to use the API denoted by the given markers in the annotated file, declaration, or expression.\nIf a declaration is annotated with OptIn, its usages are not required to opt in to that API."],
			"code":["annotation class OptIn"],
			"url":"-opt-in/index.html",
			"subcategories":[]},
		{
			"name":"OptionalExpectation",
			"description":["Marks an expected annotation class that it isn't required to have actual counterparts in all platforms."],
			"code":["annotation class OptionalExpectation"],
			"url":"-optional-expectation/index.html",
			"subcategories":[]},
		{
			"name":"OverloadResolutionByLambdaReturnType",
			"description":["Enables overload selection based on the type of the value returned from lambda argument."],
			"code":["annotation class OverloadResolutionByLambdaReturnType"],
			"url":"-overload-resolution-by-lambda-return-type/index.html",
			"subcategories":[]},
		{
			"name":"ParameterName",
			"description":["Annotates type arguments of functional type and holds corresponding parameter name specified by the user in type declaration (if any)."],
			"code":["annotation class ParameterName"],
			"url":"-parameter-name/index.html",
			"subcategories":[]},
		{
			"name":"PublishedApi",
			"description":["When applied to a class or a member with internal visibility allows to use it from public inline functions and\nmakes it effectively public."],
			"code":["annotation class PublishedApi"],
			"url":"-published-api/index.html",
			"subcategories":[]},
		{
			"name":"ReplaceWith",
			"description":["Specifies a code fragment that can be used to replace a deprecated function, property or class. Tools such\nas IDEs can automatically apply the replacements specified through this annotation."],
			"code":["annotation class ReplaceWith"],
			"url":"-replace-with/index.html",
			"subcategories":[]},
		{
			"name":"RequiresOptIn",
			"description":["Signals that the annotated annotation class is a marker of an API that requires an explicit opt-in."],
			"code":["annotation class RequiresOptIn"],
			"url":"-requires-opt-in/index.html",
			"subcategories":[]},
		{
			"name":"SinceKotlin",
			"description":["Specifies the first version of Kotlin where a declaration has appeared.\nUsing the declaration and specifying an older API version (via the -api-version command line option) will result in an error."],
			"code":["annotation class SinceKotlin"],
			"url":"-since-kotlin/index.html",
			"subcategories":[]},
		{
			"name":"SubclassOptInRequired",
			"description":["Annotation that marks open for subclassing classes and interfaces, and makes implementation\nand extension of such declarations as requiring an explicit opt-in."],
			"code":["annotation class SubclassOptInRequired"],
			"url":"-subclass-opt-in-required/index.html",
			"subcategories":[]},
		{
			"name":"Suppress",
			"description":["Suppresses the given compilation warnings in the annotated element."],
			"code":["annotation class Suppress"],
			"url":"-suppress/index.html",
			"subcategories":[]},
		{
			"name":"Throws",
			"description":["This annotation indicates what exceptions should be declared by a function when compiled to a platform method\nin Kotlin/JVM and Kotlin/Native."],
			"code":["annotation class Throws",
				"typealias Throws = Throws"],
			"url":"-throws/index.html",
			"subcategories":[]},
		{
			"name":"UnsafeVariance",
			"description":["Suppresses errors about variance conflict"],
			"code":["annotation class UnsafeVariance"],
			"url":"-unsafe-variance/index.html",
			"subcategories":[]}]}, {
	"name":"Exceptions",
	"subcategories":[{
		"name":"ArithmeticException",
		"description":[],
		"code":["open class ArithmeticException : RuntimeException",
			"typealias ArithmeticException = ArithmeticException"],
		"url":"-arithmetic-exception/index.html",
		"subcategories":[]},
		{
			"name":"AssertionError",
			"description":[],
			"code":["open class AssertionError : Error",
				"typealias AssertionError = AssertionError"],
			"url":"-assertion-error/index.html",
			"subcategories":[]},
		{
			"name":"ClassCastException",
			"description":[],
			"code":["open class ClassCastException : RuntimeException",
				"typealias ClassCastException = ClassCastException"],
			"url":"-class-cast-exception/index.html",
			"subcategories":[]},
		{
			"name":"ConcurrentModificationException",
			"description":[],
			"code":["open class ConcurrentModificationException : RuntimeException",
				"typealias ConcurrentModificationException = ConcurrentModificationException"],
			"url":"-concurrent-modification-exception/index.html",
			"subcategories":[]},
		{
			"name":"Error",
			"description":[],
			"code":["open class Error : Throwable",
				"typealias Error = Error"],
			"url":"-error/index.html",
			"subcategories":[]},
		{
			"name":"Exception",
			"description":[],
			"code":["open class Exception : Throwable",
				"typealias Exception = Exception"],
			"url":"-exception/index.html",
			"subcategories":[]},
		{
			"name":"IllegalArgumentException",
			"description":[],
			"code":["open class IllegalArgumentException : RuntimeException",
				"typealias IllegalArgumentException = IllegalArgumentException"],
			"url":"-illegal-argument-exception/index.html",
			"subcategories":[]},
		{
			"name":"IllegalStateException",
			"description":[],
			"code":["open class IllegalStateException : RuntimeException",
				"typealias IllegalStateException = IllegalStateException"],
			"url":"-illegal-state-exception/index.html",
			"subcategories":[]},
		{
			"name":"IndexOutOfBoundsException",
			"description":[],
			"code":["open class IndexOutOfBoundsException : RuntimeException",
				"typealias IndexOutOfBoundsException = IndexOutOfBoundsException"],
			"url":"-index-out-of-bounds-exception/index.html",
			"subcategories":[]},
		{
			"name":"KotlinNullPointerException",
			"description":[],
			"code":["open class KotlinNullPointerException : NullPointerException"],
			"url":"-kotlin-null-pointer-exception/index.html",
			"subcategories":[]},
		{
			"name":"NoSuchElementException",
			"description":[],
			"code":["open class NoSuchElementException : RuntimeException",
				"typealias NoSuchElementException = NoSuchElementException"],
			"url":"-no-such-element-exception/index.html",
			"subcategories":[]},
		{
			"name":"NotImplementedError",
			"description":["An exception is thrown to indicate that a method body remains to be implemented."],
			"code":["class NotImplementedError : Error"],
			"url":"-not-implemented-error/index.html",
			"subcategories":[]},
		{
			"name":"NoWhenBranchMatchedException",
			"description":[],
			"code":["open class NoWhenBranchMatchedException : RuntimeException",
				"open class NoWhenBranchMatchedException : RuntimeException"],
			"url":"-no-when-branch-matched-exception/index.html",
			"subcategories":[]},
		{
			"name":"NullPointerException",
			"description":[],
			"code":["open class NullPointerException : RuntimeException",
				"typealias NullPointerException = NullPointerException"],
			"url":"-null-pointer-exception/index.html",
			"subcategories":[]},
		{
			"name":"NumberFormatException",
			"description":[],
			"code":["open class NumberFormatException : IllegalArgumentException",
				"typealias NumberFormatException = NumberFormatException"],
			"url":"-number-format-exception/index.html",
			"subcategories":[]},
		{
			"name":"RuntimeException",
			"description":[],
			"code":["open class RuntimeException : Exception",
				"typealias RuntimeException = RuntimeException"],
			"url":"-runtime-exception/index.html",
			"subcategories":[]},
		{
			"name":"TypeCastException",
			"description":[],
			"code":["open class TypeCastException : ClassCastException"],
			"url":"-type-cast-exception/index.html",
			"subcategories":[]},
		{
			"name":"UninitializedPropertyAccessException",
			"description":[],
			"code":["class UninitializedPropertyAccessException : RuntimeException",
				"class UninitializedPropertyAccessException : RuntimeException",
				"open class UninitializedPropertyAccessException :     RuntimeException"],
			"url":"-uninitialized-property-access-exception/index.html",
			"subcategories":[]},
		{
			"name":"UnsupportedOperationException",
			"description":[],
			"code":["open class UnsupportedOperationException : RuntimeException",
				"typealias UnsupportedOperationException = UnsupportedOperationException"],
			"url":"-unsupported-operation-exception/index.html",
			"subcategories":[]}]}, {
	"name":"Extensions for External Classes",
	"subcategories":[{
		"name":"java.math.BigDecimal",
		"description":[],
		"code":[],
		"url":"java.math.-big-decimal/index.html",
		"subcategories":[]},
		{
			"name":"java.math.BigInteger",
			"description":[],
			"code":[],
			"url":"java.math.-big-integer/index.html",
			"subcategories":[]}]}, {
	"name":"Properties",
	"subcategories":[{
		"name":"code",
		"description":["Returns the code of this Char."],
		"code":["val Char.code: Int"],
		"url":"code.html",
		"subcategories":[]},
		{
			"name":"isInitialized",
			"description":["Returns true if this lateinit property has been assigned a value, and false otherwise."],
			"code":["val KProperty0<*>.isInitialized: Boolean"],
			"url":"is-initialized.html",
			"subcategories":[]},
		{
			"name":"stackTrace",
			"description":["Returns an array of stack trace elements representing the stack trace\npertaining to this throwable."],
			"code":["val Throwable.stackTrace: Array<StackTraceElement>"],
			"url":"stack-trace.html",
			"subcategories":[]},
		{
			"name":"suppressedExceptions",
			"description":["Returns a list of all exceptions that were suppressed in order to deliver this exception."],
			"code":["val Throwable.suppressedExceptions: List<Throwable>"],
			"url":"suppressed-exceptions.html",
			"subcategories":[]}]}, {
	"name":"Functions",
	"subcategories":[{
		"name":"addSuppressed",
		"description":["When supported by the platform, adds the specified exception to the list of exceptions that were\nsuppressed in order to deliver this exception."],
		"code":["fun Throwable.addSuppressed(exception: Throwable)"],
		"url":"add-suppressed.html",
		"subcategories":[]},
		{
			"name":"also",
			"description":["Calls the specified function block with this value as its argument and returns this value."],
			"code":["fun <T> T.also(block: (T) -> Unit): T"],
			"url":"also.html",
			"subcategories":[]},
		{
			"name":"apply",
			"description":["Calls the specified function block with this value as its receiver and returns this value."],
			"code":["fun <T> T.apply(block: T.() -> Unit): T"],
			"url":"apply.html",
			"subcategories":[]},
		{
			"name":"arrayOf",
			"description":["Returns an array containing the specified elements."],
			"code":["fun <T> arrayOf(vararg elements: T): Array<T>"],
			"url":"array-of.html",
			"subcategories":[]},
		{
			"name":"arrayOfNulls",
			"description":["Returns an array of objects of the given type with the given size, initialized with null values."],
			"code":["fun <T> arrayOfNulls(size: Int): Array<T?>"],
			"url":"array-of-nulls.html",
			"subcategories":[]},
		{
			"name":"assert",
			"description":["Throws an AssertionError if the value is false\nand runtime assertions have been enabled on the JVM using the -ea JVM option.",
				"Throws an AssertionError calculated by lazyMessage if the value is false\nand runtime assertions have been enabled on the JVM using the -ea JVM option."],
			"code":["fun assert(value: Boolean)",
				"fun assert(value: Boolean, lazyMessage: () -> Any)"],
			"url":"assert.html",
			"subcategories":[]},
		{
			"name":"booleanArrayOf",
			"description":["Returns an array containing the specified boolean values."],
			"code":["fun booleanArrayOf(vararg elements: Boolean): BooleanArray"],
			"url":"boolean-array-of.html",
			"subcategories":[]},
		{
			"name":"byteArrayOf",
			"description":["Returns an array containing the specified Byte numbers."],
			"code":["fun byteArrayOf(vararg elements: Byte): ByteArray"],
			"url":"byte-array-of.html",
			"subcategories":[]},
		{
			"name":"Char",
			"description":["Creates a Char with the specified code, or throws an exception if the code is out of Char.MIN_VALUE.code..Char.MAX_VALUE.code.",
				"Creates a Char with the specified code."],
			"code":["fun Char(code: Int): Char",
				"fun Char(code: UShort): Char"],
			"url":"-char.html",
			"subcategories":[]},
		{
			"name":"charArrayOf",
			"description":["Returns an array containing the specified characters."],
			"code":["fun charArrayOf(vararg elements: Char): CharArray"],
			"url":"char-array-of.html",
			"subcategories":[]},
		{
			"name":"check",
			"description":["Throws an IllegalStateException if the value is false.",
				"Throws an IllegalStateException with the result of calling lazyMessage if the value is false."],
			"code":["fun check(value: Boolean)",
				"fun check(value: Boolean, lazyMessage: () -> Any)"],
			"url":"check.html",
			"subcategories":[]},
		{
			"name":"checkNotNull",
			"description":["Throws an IllegalStateException if the value is null. Otherwise\nreturns the not null value.",
				"Throws an IllegalStateException with the result of calling lazyMessage  if the value is null. Otherwise\nreturns the not null value."],
			"code":["fun <T : Any> checkNotNull(value: T?): T",
				"fun <T : Any> checkNotNull(    value: T?,     lazyMessage: () -> Any): T"],
			"url":"check-not-null.html",
			"subcategories":[]},
		{
			"name":"compareTo",
			"description":["Compares this object with the specified object for order. Returns zero if this object is equal\nto the specified other object, a negative number if it's less than other, or a positive number\nif it's greater than other."],
			"code":["infix fun <T> Comparable<T>.compareTo(other: T): Int"],
			"url":"compare-to.html",
			"subcategories":[]},
		{
			"name":"countLeadingZeroBits",
			"description":["Counts the number of consecutive most significant bits that are zero in the binary representation of this Byte number.",
				"Counts the number of consecutive most significant bits that are zero in the binary representation of this Short number.",
				"Counts the number of consecutive most significant bits that are zero in the binary representation of this UInt number.",
				"Counts the number of consecutive most significant bits that are zero in the binary representation of this ULong number.",
				"Counts the number of consecutive most significant bits that are zero in the binary representation of this UByte number.",
				"Counts the number of consecutive most significant bits that are zero in the binary representation of this UShort number.",
				"Counts the number of consecutive most significant bits that are zero in the binary representation of this Int number.",
				"Counts the number of consecutive most significant bits that are zero in the binary representation of this Long number."],
			"code":["fun Byte.countLeadingZeroBits(): Int",
				"fun Short.countLeadingZeroBits(): Int",
				"fun UInt.countLeadingZeroBits(): Int",
				"fun ULong.countLeadingZeroBits(): Int",
				"fun UByte.countLeadingZeroBits(): Int",
				"fun UShort.countLeadingZeroBits(): Int",
				"fun Int.countLeadingZeroBits(): Int",
				"fun Long.countLeadingZeroBits(): Int"],
			"url":"count-leading-zero-bits.html",
			"subcategories":[]},
		{
			"name":"countOneBits",
			"description":["Counts the number of set bits in the binary representation of this Byte number.",
				"Counts the number of set bits in the binary representation of this Short number.",
				"Counts the number of set bits in the binary representation of this UInt number.",
				"Counts the number of set bits in the binary representation of this ULong number.",
				"Counts the number of set bits in the binary representation of this UByte number.",
				"Counts the number of set bits in the binary representation of this UShort number.",
				"Counts the number of set bits in the binary representation of this Int number.",
				"Counts the number of set bits in the binary representation of this Long number."],
			"code":["fun Byte.countOneBits(): Int",
				"fun Short.countOneBits(): Int",
				"fun UInt.countOneBits(): Int",
				"fun ULong.countOneBits(): Int",
				"fun UByte.countOneBits(): Int",
				"fun UShort.countOneBits(): Int",
				"fun Int.countOneBits(): Int",
				"fun Long.countOneBits(): Int"],
			"url":"count-one-bits.html",
			"subcategories":[]},
		{
			"name":"countTrailingZeroBits",
			"description":["Counts the number of consecutive least significant bits that are zero in the binary representation of this Byte number.",
				"Counts the number of consecutive least significant bits that are zero in the binary representation of this Short number.",
				"Counts the number of consecutive least significant bits that are zero in the binary representation of this UInt number.",
				"Counts the number of consecutive least significant bits that are zero in the binary representation of this ULong number.",
				"Counts the number of consecutive least significant bits that are zero in the binary representation of this UByte number.",
				"Counts the number of consecutive least significant bits that are zero in the binary representation of this UShort number.",
				"Counts the number of consecutive least significant bits that are zero in the binary representation of this Int number.",
				"Counts the number of consecutive least significant bits that are zero in the binary representation of this Long number."],
			"code":["fun Byte.countTrailingZeroBits(): Int",
				"fun Short.countTrailingZeroBits(): Int",
				"fun UInt.countTrailingZeroBits(): Int",
				"fun ULong.countTrailingZeroBits(): Int",
				"fun UByte.countTrailingZeroBits(): Int",
				"fun UShort.countTrailingZeroBits(): Int",
				"fun Int.countTrailingZeroBits(): Int",
				"fun Long.countTrailingZeroBits(): Int"],
			"url":"count-trailing-zero-bits.html",
			"subcategories":[]},
		{
			"name":"doubleArrayOf",
			"description":["Returns an array containing the specified Double numbers."],
			"code":["fun doubleArrayOf(vararg elements: Double): DoubleArray"],
			"url":"double-array-of.html",
			"subcategories":[]},
		{
			"name":"emptyArray",
			"description":["Returns an empty array of the specified type T."],
			"code":["fun <T> emptyArray(): Array<T>"],
			"url":"empty-array.html",
			"subcategories":[]},
		{
			"name":"enumValueOf",
			"description":["Returns an enum entry with specified name."],
			"code":["fun <T : Enum<T>> enumValueOf(name: String): T"],
			"url":"enum-value-of.html",
			"subcategories":[]},
		{
			"name":"enumValues",
			"description":["Returns an array containing enum T entries."],
			"code":["fun <T : Enum<T>> enumValues(): Array<T>"],
			"url":"enum-values.html",
			"subcategories":[]},
		{
			"name":"error",
			"description":["Throws an IllegalStateException with the given message."],
			"code":["fun error(message: Any): Nothing"],
			"url":"error.html",
			"subcategories":[]},
		{
			"name":"floatArrayOf",
			"description":["Returns an array containing the specified Float numbers."],
			"code":["fun floatArrayOf(vararg elements: Float): FloatArray"],
			"url":"float-array-of.html",
			"subcategories":[]},
		{
			"name":"floorDiv",
			"description":["Divides this value by the other value, flooring the result to an integer that is closer to negative infinity."],
			"code":["fun Byte.floorDiv(other: Byte): Int",
				"fun Byte.floorDiv(other: Short): Int",
				"fun Byte.floorDiv(other: Int): Int",
				"fun Byte.floorDiv(other: Long): Long",
				"fun Short.floorDiv(other: Byte): Int",
				"fun Short.floorDiv(other: Short): Int",
				"fun Short.floorDiv(other: Int): Int",
				"fun Short.floorDiv(other: Long): Long",
				"fun Int.floorDiv(other: Byte): Int",
				"fun Int.floorDiv(other: Short): Int",
				"fun Int.floorDiv(other: Int): Int",
				"fun Int.floorDiv(other: Long): Long",
				"fun Long.floorDiv(other: Byte): Long",
				"fun Long.floorDiv(other: Short): Long",
				"fun Long.floorDiv(other: Int): Long",
				"fun Long.floorDiv(other: Long): Long"],
			"url":"floor-div.html",
			"subcategories":[]},
		{
			"name":"fold",
			"description":["Returns the result of onSuccess for the encapsulated value if this instance represents success\nor the result of onFailure function for the encapsulated Throwable exception if it is failure."],
			"code":["fun <R, T> Result<T>.fold(    onSuccess: (value: T) -> R,     onFailure: (exception: Throwable) -> R): R"],
			"url":"fold.html",
			"subcategories":[]},
		{
			"name":"getOrDefault",
			"description":["Returns the encapsulated value if this instance represents success or the\ndefaultValue if it is failure."],
			"code":["fun <R, T : R> Result<T>.getOrDefault(defaultValue: R): R"],
			"url":"get-or-default.html",
			"subcategories":[]},
		{
			"name":"getOrElse",
			"description":["Returns the encapsulated value if this instance represents success or the\nresult of onFailure function for the encapsulated Throwable exception if it is failure."],
			"code":["fun <R, T : R> Result<T>.getOrElse(    onFailure: (exception: Throwable) -> R): R"],
			"url":"get-or-else.html",
			"subcategories":[]},
		{
			"name":"getOrThrow",
			"description":["Returns the encapsulated value if this instance represents success or throws the encapsulated Throwable exception\nif it is failure."],
			"code":["fun <T> Result<T>.getOrThrow(): T"],
			"url":"get-or-throw.html",
			"subcategories":[]},
		{
			"name":"getValue",
			"description":["An extension operator that allows delegating a read-only property of type V\nto a property reference to a property of type V or its subtype.",
				"An extension operator that allows delegating a read-only member or extension property of type V\nto a property reference to a member or extension property of type V or its subtype.",
				"An extension to delegate a read-only property of type T to an instance of Lazy."],
			"code":["operator fun <V> KProperty0<V>.getValue(    thisRef: Any?,     property: KProperty<*>): V",
				"operator fun <T, V> KProperty1<T, V>.getValue(    thisRef: T,     property: KProperty<*>): V",
				"operator fun <T> Lazy<T>.getValue(    thisRef: Any?,     property: KProperty<*>): T"],
			"url":"get-value.html",
			"subcategories":[]},
		{
			"name":"hashCode",
			"description":["Returns a hash code value for the object or zero if the object is null."],
			"code":["fun Any?.hashCode(): Int"],
			"url":"hash-code.html",
			"subcategories":[]},
		{
			"name":"intArrayOf",
			"description":["Returns an array containing the specified Int numbers."],
			"code":["fun intArrayOf(vararg elements: Int): IntArray"],
			"url":"int-array-of.html",
			"subcategories":[]},
		{
			"name":"invoke",
			"description":["Initiates a call to this deep recursive function, forming a root of the call tree."],
			"code":["operator fun <T, R> DeepRecursiveFunction<T, R>.invoke(    value: T): R"],
			"url":"invoke.html",
			"subcategories":[]},
		{
			"name":"isFinite",
			"description":["Returns true if the argument is a finite floating-point value; returns false otherwise (for NaN and infinity arguments)."],
			"code":["fun Double.isFinite(): Boolean",
				"fun Float.isFinite(): Boolean"],
			"url":"is-finite.html",
			"subcategories":[]},
		{
			"name":"isInfinite",
			"description":["Returns true if this value is infinitely large in magnitude."],
			"code":["fun Double.isInfinite(): Boolean",
				"fun Float.isInfinite(): Boolean"],
			"url":"is-infinite.html",
			"subcategories":[]},
		{
			"name":"isNaN",
			"description":["Returns true if the specified number is a\nNot-a-Number (NaN) value, false otherwise."],
			"code":["fun Double.isNaN(): Boolean",
				"fun Float.isNaN(): Boolean"],
			"url":"is-na-n.html",
			"subcategories":[]},
		{
			"name":"lazy",
			"description":["Creates a new instance of the Lazy that uses the specified initialization function initializer\nand the default thread-safety mode LazyThreadSafetyMode.SYNCHRONIZED.",
				"Creates a new instance of the Lazy that uses the specified initialization function initializer."],
			"code":["fun <T> lazy(initializer: () -> T): Lazy<T>",
				"fun <T> lazy(    mode: LazyThreadSafetyMode,     initializer: () -> T): Lazy<T>",
				"fun <T> lazy(lock: Any?, initializer: () -> T): Lazy<T>"],
			"url":"lazy.html",
			"subcategories":[]},
		{
			"name":"lazyOf",
			"description":["Creates a new instance of the Lazy that is already initialized with the specified value."],
			"code":["fun <T> lazyOf(value: T): Lazy<T>"],
			"url":"lazy-of.html",
			"subcategories":[]},
		{
			"name":"let",
			"description":["Calls the specified function block with this value as its argument and returns its result."],
			"code":["fun <T, R> T.let(block: (T) -> R): R"],
			"url":"let.html",
			"subcategories":[]},
		{
			"name":"longArrayOf",
			"description":["Returns an array containing the specified Long numbers."],
			"code":["fun longArrayOf(vararg elements: Long): LongArray"],
			"url":"long-array-of.html",
			"subcategories":[]},
		{
			"name":"map",
			"description":["Returns the encapsulated result of the given transform function applied to the encapsulated value\nif this instance represents success or the\noriginal encapsulated Throwable exception if it is failure."],
			"code":["fun <R, T> Result<T>.map(    transform: (value: T) -> R): Result<R>"],
			"url":"map.html",
			"subcategories":[]},
		{
			"name":"mapCatching",
			"description":["Returns the encapsulated result of the given transform function applied to the encapsulated value\nif this instance represents success or the\noriginal encapsulated Throwable exception if it is failure."],
			"code":["fun <R, T> Result<T>.mapCatching(    transform: (value: T) -> R): Result<R>"],
			"url":"map-catching.html",
			"subcategories":[]},
		{
			"name":"mod",
			"description":["Calculates the remainder of flooring division of this value (dividend) by the other value (divisor)."],
			"code":["fun Byte.mod(other: Byte): Byte",
				"fun Byte.mod(other: Short): Short",
				"fun Byte.mod(other: Int): Int",
				"fun Byte.mod(other: Long): Long",
				"fun Short.mod(other: Byte): Byte",
				"fun Short.mod(other: Short): Short",
				"fun Short.mod(other: Int): Int",
				"fun Short.mod(other: Long): Long",
				"fun Int.mod(other: Byte): Byte",
				"fun Int.mod(other: Short): Short",
				"fun Int.mod(other: Int): Int",
				"fun Int.mod(other: Long): Long",
				"fun Long.mod(other: Byte): Byte",
				"fun Long.mod(other: Short): Short",
				"fun Long.mod(other: Int): Int",
				"fun Long.mod(other: Long): Long",
				"fun Float.mod(other: Float): Float",
				"fun Float.mod(other: Double): Double",
				"fun Double.mod(other: Float): Double",
				"fun Double.mod(other: Double): Double"],
			"url":"mod.html",
			"subcategories":[]},
		{
			"name":"onFailure",
			"description":["Performs the given action on the encapsulated Throwable exception if this instance represents failure.\nReturns the original Result unchanged."],
			"code":["fun <T> Result<T>.onFailure(    action: (exception: Throwable) -> Unit): Result<T>"],
			"url":"on-failure.html",
			"subcategories":[]},
		{
			"name":"onSuccess",
			"description":["Performs the given action on the encapsulated value if this instance represents success.\nReturns the original Result unchanged."],
			"code":["fun <T> Result<T>.onSuccess(    action: (value: T) -> Unit): Result<T>"],
			"url":"on-success.html",
			"subcategories":[]},
		{
			"name":"plus",
			"description":["Concatenates this string with the string representation of the given other object. If either the receiver\nor the other object are null, they are represented as the string \"null\"."],
			"code":["operator fun String?.plus(other: Any?): String"],
			"url":"plus.html",
			"subcategories":[]},
		{
			"name":"printStackTrace",
			"description":["Prints the detailed description of this throwable to the specified writer.",
				"Prints the detailed description of this throwable to the specified stream.",
				"Prints the detailed description of this throwable to the standard output or standard error output."],
			"code":["fun Throwable.printStackTrace(writer: PrintWriter)",
				"fun Throwable.printStackTrace(stream: PrintStream)",
				"fun Throwable.printStackTrace()"],
			"url":"print-stack-trace.html",
			"subcategories":[]},
		{
			"name":"recover",
			"description":["Returns the encapsulated result of the given transform function applied to the encapsulated Throwable exception\nif this instance represents failure or the\noriginal encapsulated value if it is success."],
			"code":["fun <R, T : R> Result<T>.recover(    transform: (exception: Throwable) -> R): Result<R>"],
			"url":"recover.html",
			"subcategories":[]},
		{
			"name":"recoverCatching",
			"description":["Returns the encapsulated result of the given transform function applied to the encapsulated Throwable exception\nif this instance represents failure or the\noriginal encapsulated value if it is success."],
			"code":["fun <R, T : R> Result<T>.recoverCatching(    transform: (exception: Throwable) -> R): Result<R>"],
			"url":"recover-catching.html",
			"subcategories":[]},
		{
			"name":"repeat",
			"description":["Executes the given function action specified number of times."],
			"code":["fun repeat(times: Int, action: (Int) -> Unit)"],
			"url":"repeat.html",
			"subcategories":[]},
		{
			"name":"require",
			"description":["Throws an IllegalArgumentException if the value is false.",
				"Throws an IllegalArgumentException with the result of calling lazyMessage if the value is false."],
			"code":["fun require(value: Boolean)",
				"fun require(value: Boolean, lazyMessage: () -> Any)"],
			"url":"require.html",
			"subcategories":[]},
		{
			"name":"requireNotNull",
			"description":["Throws an IllegalArgumentException if the value is null. Otherwise returns the not null value.",
				"Throws an IllegalArgumentException with the result of calling lazyMessage if the value is null. Otherwise\nreturns the not null value."],
			"code":["fun <T : Any> requireNotNull(value: T?): T",
				"fun <T : Any> requireNotNull(    value: T?,     lazyMessage: () -> Any): T"],
			"url":"require-not-null.html",
			"subcategories":[]},
		{
			"name":"rotateLeft",
			"description":["Rotates the binary representation of this Byte number left by the specified bitCount number of bits.\nThe most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.",
				"Rotates the binary representation of this Short number left by the specified bitCount number of bits.\nThe most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.",
				"Rotates the binary representation of this UInt number left by the specified bitCount number of bits.\nThe most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.",
				"Rotates the binary representation of this ULong number left by the specified bitCount number of bits.\nThe most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.",
				"Rotates the binary representation of this UByte number left by the specified bitCount number of bits.\nThe most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.",
				"Rotates the binary representation of this UShort number left by the specified bitCount number of bits.\nThe most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.",
				"Rotates the binary representation of this Int number left by the specified bitCount number of bits.\nThe most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.",
				"Rotates the binary representation of this Long number left by the specified bitCount number of bits.\nThe most significant bits pushed out from the left side reenter the number as the least significant bits on the right side."],
			"code":["fun Byte.rotateLeft(bitCount: Int): Byte",
				"fun Short.rotateLeft(bitCount: Int): Short",
				"fun UInt.rotateLeft(bitCount: Int): UInt",
				"fun ULong.rotateLeft(bitCount: Int): ULong",
				"fun UByte.rotateLeft(bitCount: Int): UByte",
				"fun UShort.rotateLeft(bitCount: Int): UShort",
				"fun Int.rotateLeft(bitCount: Int): Int",
				"fun Long.rotateLeft(bitCount: Int): Long"],
			"url":"rotate-left.html",
			"subcategories":[]},
		{
			"name":"rotateRight",
			"description":["Rotates the binary representation of this Byte number right by the specified bitCount number of bits.\nThe least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.",
				"Rotates the binary representation of this Short number right by the specified bitCount number of bits.\nThe least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.",
				"Rotates the binary representation of this UInt number right by the specified bitCount number of bits.\nThe least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.",
				"Rotates the binary representation of this ULong number right by the specified bitCount number of bits.\nThe least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.",
				"Rotates the binary representation of this UByte number right by the specified bitCount number of bits.\nThe least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.",
				"Rotates the binary representation of this UShort number right by the specified bitCount number of bits.\nThe least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.",
				"Rotates the binary representation of this Int number right by the specified bitCount number of bits.\nThe least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.",
				"Rotates the binary representation of this Long number right by the specified bitCount number of bits.\nThe least significant bits pushed out from the right side reenter the number as the most significant bits on the left side."],
			"code":["fun Byte.rotateRight(bitCount: Int): Byte",
				"fun Short.rotateRight(bitCount: Int): Short",
				"fun UInt.rotateRight(bitCount: Int): UInt",
				"fun ULong.rotateRight(bitCount: Int): ULong",
				"fun UByte.rotateRight(bitCount: Int): UByte",
				"fun UShort.rotateRight(bitCount: Int): UShort",
				"fun Int.rotateRight(bitCount: Int): Int",
				"fun Long.rotateRight(bitCount: Int): Long"],
			"url":"rotate-right.html",
			"subcategories":[]},
		{
			"name":"run",
			"description":["Calls the specified function block and returns its result.",
				"Calls the specified function block with this value as its receiver and returns its result."],
			"code":["fun <R> run(block: () -> R): R",
				"fun <T, R> T.run(block: T.() -> R): R"],
			"url":"run.html",
			"subcategories":[]},
		{
			"name":"runCatching",
			"description":["Calls the specified function block and returns its encapsulated result if invocation was successful,\ncatching any Throwable exception that was thrown from the block function execution and encapsulating it as a failure.",
				"Calls the specified function block with this value as its receiver and returns its encapsulated result if invocation was successful,\ncatching any Throwable exception that was thrown from the block function execution and encapsulating it as a failure."],
			"code":["fun <R> runCatching(block: () -> R): Result<R>",
				"fun <T, R> T.runCatching(block: T.() -> R): Result<R>"],
			"url":"run-catching.html",
			"subcategories":[]},
		{
			"name":"setValue",
			"description":["An extension operator that allows delegating a mutable property of type V\nto a property reference to a mutable property of the same type V.",
				"An extension operator that allows delegating a mutable member or extension property of type V\nto a property reference to a member or extension mutable property of the same type V."],
			"code":["operator fun <V> KMutableProperty0<V>.setValue(    thisRef: Any?,     property: KProperty<*>,     value: V)",
				"operator fun <T, V> KMutableProperty1<T, V>.setValue(    thisRef: T,     property: KProperty<*>,     value: V)"],
			"url":"set-value.html",
			"subcategories":[]},
		{
			"name":"shortArrayOf",
			"description":["Returns an array containing the specified Short numbers."],
			"code":["fun shortArrayOf(vararg elements: Short): ShortArray"],
			"url":"short-array-of.html",
			"subcategories":[]},
		{
			"name":"stackTraceToString",
			"description":["Returns the detailed description of this throwable with its stack trace."],
			"code":["fun Throwable.stackTraceToString(): String"],
			"url":"stack-trace-to-string.html",
			"subcategories":[]},
		{
			"name":"suspend",
			"description":[],
			"code":["fun <R> suspend(block: suspend () -> R): suspend () -> R"],
			"url":"suspend.html",
			"subcategories":[]},
		{
			"name":"synchronized",
			"description":["Executes the given function block while holding the monitor of the given object lock."],
			"code":["fun <R> synchronized(lock: Any, block: () -> R): R",
				"fun <R> synchronized(lock: Any, block: () -> R): R"],
			"url":"synchronized.html",
			"subcategories":[]},
		{
			"name":"takeHighestOneBit",
			"description":["Returns a number having a single bit set in the position of the most significant set bit of this Byte number,\nor zero, if this number is zero.",
				"Returns a number having a single bit set in the position of the most significant set bit of this Short number,\nor zero, if this number is zero.",
				"Returns a number having a single bit set in the position of the most significant set bit of this UInt number,\nor zero, if this number is zero.",
				"Returns a number having a single bit set in the position of the most significant set bit of this ULong number,\nor zero, if this number is zero.",
				"Returns a number having a single bit set in the position of the most significant set bit of this UByte number,\nor zero, if this number is zero.",
				"Returns a number having a single bit set in the position of the most significant set bit of this UShort number,\nor zero, if this number is zero.",
				"Returns a number having a single bit set in the position of the most significant set bit of this Int number,\nor zero, if this number is zero.",
				"Returns a number having a single bit set in the position of the most significant set bit of this Long number,\nor zero, if this number is zero."],
			"code":["fun Byte.takeHighestOneBit(): Byte",
				"fun Short.takeHighestOneBit(): Short",
				"fun UInt.takeHighestOneBit(): UInt",
				"fun ULong.takeHighestOneBit(): ULong",
				"fun UByte.takeHighestOneBit(): UByte",
				"fun UShort.takeHighestOneBit(): UShort",
				"fun Int.takeHighestOneBit(): Int",
				"fun Long.takeHighestOneBit(): Long"],
			"url":"take-highest-one-bit.html",
			"subcategories":[]},
		{
			"name":"takeIf",
			"description":["Returns this value if it satisfies the given predicate or null, if it doesn't."],
			"code":["fun <T> T.takeIf(predicate: (T) -> Boolean): T?"],
			"url":"take-if.html",
			"subcategories":[]},
		{
			"name":"takeLowestOneBit",
			"description":["Returns a number having a single bit set in the position of the least significant set bit of this Byte number,\nor zero, if this number is zero.",
				"Returns a number having a single bit set in the position of the least significant set bit of this Short number,\nor zero, if this number is zero.",
				"Returns a number having a single bit set in the position of the least significant set bit of this UInt number,\nor zero, if this number is zero.",
				"Returns a number having a single bit set in the position of the least significant set bit of this ULong number,\nor zero, if this number is zero.",
				"Returns a number having a single bit set in the position of the least significant set bit of this UByte number,\nor zero, if this number is zero.",
				"Returns a number having a single bit set in the position of the least significant set bit of this UShort number,\nor zero, if this number is zero.",
				"Returns a number having a single bit set in the position of the least significant set bit of this Int number,\nor zero, if this number is zero.",
				"Returns a number having a single bit set in the position of the least significant set bit of this Long number,\nor zero, if this number is zero."],
			"code":["fun Byte.takeLowestOneBit(): Byte",
				"fun Short.takeLowestOneBit(): Short",
				"fun UInt.takeLowestOneBit(): UInt",
				"fun ULong.takeLowestOneBit(): ULong",
				"fun UByte.takeLowestOneBit(): UByte",
				"fun UShort.takeLowestOneBit(): UShort",
				"fun Int.takeLowestOneBit(): Int",
				"fun Long.takeLowestOneBit(): Long"],
			"url":"take-lowest-one-bit.html",
			"subcategories":[]},
		{
			"name":"takeUnless",
			"description":["Returns this value if it does not satisfy the given predicate or null, if it does."],
			"code":["fun <T> T.takeUnless(predicate: (T) -> Boolean): T?"],
			"url":"take-unless.html",
			"subcategories":[]},
		{
			"name":"to",
			"description":["Creates a tuple of type Pair from this and that."],
			"code":["infix fun <A, B> A.to(that: B): Pair<A, B>"],
			"url":"to.html",
			"subcategories":[]},
		{
			"name":"toBigDecimal",
			"description":["Returns the value of this Int number as a BigDecimal.",
				"Returns the value of this Long number as a BigDecimal.",
				"Returns the value of this Float number as a BigDecimal.",
				"Returns the value of this Double number as a BigDecimal."],
			"code":["fun Int.toBigDecimal(): BigDecimal",
				"fun Int.toBigDecimal(mathContext: MathContext): BigDecimal",
				"fun Long.toBigDecimal(): BigDecimal",
				"fun Long.toBigDecimal(mathContext: MathContext): BigDecimal",
				"fun Float.toBigDecimal(): BigDecimal",
				"fun Float.toBigDecimal(mathContext: MathContext): BigDecimal",
				"fun Double.toBigDecimal(): BigDecimal",
				"fun Double.toBigDecimal(mathContext: MathContext): BigDecimal"],
			"url":"to-big-decimal.html",
			"subcategories":[]},
		{
			"name":"toBigInteger",
			"description":["Returns the value of this Int number as a BigInteger.",
				"Returns the value of this Long number as a BigInteger."],
			"code":["fun Int.toBigInteger(): BigInteger",
				"fun Long.toBigInteger(): BigInteger"],
			"url":"to-big-integer.html",
			"subcategories":[]},
		{
			"name":"toBits",
			"description":["Returns a bit representation of the specified floating-point value as Long\naccording to the IEEE 754 floating-point \"double format\" bit layout.",
				"Returns a bit representation of the specified floating-point value as Int\naccording to the IEEE 754 floating-point \"single format\" bit layout."],
			"code":["fun Double.toBits(): Long",
				"fun Float.toBits(): Int"],
			"url":"to-bits.html",
			"subcategories":[]},
		{
			"name":"TODO",
			"description":["Always throws NotImplementedError stating that operation is not implemented."],
			"code":["fun TODO(): Nothing",
				"fun TODO(reason: String): Nothing"],
			"url":"-t-o-d-o.html",
			"subcategories":[]},
		{
			"name":"toList",
			"description":["Converts this pair into a list.",
				"Converts this triple into a list."],
			"code":["fun <T> Pair<T, T>.toList(): List<T>",
				"fun <T> Triple<T, T, T>.toList(): List<T>"],
			"url":"to-list.html",
			"subcategories":[]},
		{
			"name":"toRawBits",
			"description":["Returns a bit representation of the specified floating-point value as Long\naccording to the IEEE 754 floating-point \"double format\" bit layout,\npreserving NaN values exact layout.",
				"Returns a bit representation of the specified floating-point value as Int\naccording to the IEEE 754 floating-point \"single format\" bit layout,\npreserving NaN values exact layout."],
			"code":["fun Double.toRawBits(): Long",
				"fun Float.toRawBits(): Int"],
			"url":"to-raw-bits.html",
			"subcategories":[]},
		{
			"name":"toString",
			"description":["Returns a string representation of the object. Can be called with a null receiver, in which case\nit returns the string \"null\"."],
			"code":["fun Any?.toString(): String"],
			"url":"to-string.html",
			"subcategories":[]},
		{
			"name":"toUByte",
			"description":["Converts this Byte value to UByte.",
				"Converts this Short value to UByte.",
				"Converts this Int value to UByte.",
				"Converts this Long value to UByte."],
			"code":["fun Byte.toUByte(): UByte",
				"fun Short.toUByte(): UByte",
				"fun Int.toUByte(): UByte",
				"fun Long.toUByte(): UByte"],
			"url":"to-u-byte.html",
			"subcategories":[]},
		{
			"name":"toUInt",
			"description":["Converts this Byte value to UInt.",
				"Converts this Short value to UInt.",
				"Converts this Int value to UInt.",
				"Converts this Long value to UInt.",
				"Converts this Float value to UInt.",
				"Converts this Double value to UInt."],
			"code":["fun Byte.toUInt(): UInt",
				"fun Short.toUInt(): UInt",
				"fun Int.toUInt(): UInt",
				"fun Long.toUInt(): UInt",
				"fun Float.toUInt(): UInt",
				"fun Double.toUInt(): UInt"],
			"url":"to-u-int.html",
			"subcategories":[]},
		{
			"name":"toULong",
			"description":["Converts this Byte value to ULong.",
				"Converts this Short value to ULong.",
				"Converts this Int value to ULong.",
				"Converts this Long value to ULong.",
				"Converts this Float value to ULong.",
				"Converts this Double value to ULong."],
			"code":["fun Byte.toULong(): ULong",
				"fun Short.toULong(): ULong",
				"fun Int.toULong(): ULong",
				"fun Long.toULong(): ULong",
				"fun Float.toULong(): ULong",
				"fun Double.toULong(): ULong"],
			"url":"to-u-long.html",
			"subcategories":[]},
		{
			"name":"toUShort",
			"description":["Converts this Byte value to UShort.",
				"Converts this Short value to UShort.",
				"Converts this Int value to UShort.",
				"Converts this Long value to UShort."],
			"code":["fun Byte.toUShort(): UShort",
				"fun Short.toUShort(): UShort",
				"fun Int.toUShort(): UShort",
				"fun Long.toUShort(): UShort"],
			"url":"to-u-short.html",
			"subcategories":[]},
		{
			"name":"UByteArray",
			"description":["Creates a new array of the specified size, where each element is calculated by calling the specified\ninit function."],
			"code":["fun UByteArray(size: Int, init: (Int) -> UByte): UByteArray"],
			"url":"-u-byte-array.html",
			"subcategories":[]},
		{
			"name":"ubyteArrayOf",
			"description":[],
			"code":["fun ubyteArrayOf(vararg elements: UByte): UByteArray"],
			"url":"ubyte-array-of.html",
			"subcategories":[]},
		{
			"name":"UIntArray",
			"description":["Creates a new array of the specified size, where each element is calculated by calling the specified\ninit function."],
			"code":["fun UIntArray(size: Int, init: (Int) -> UInt): UIntArray"],
			"url":"-u-int-array.html",
			"subcategories":[]},
		{
			"name":"uintArrayOf",
			"description":[],
			"code":["fun uintArrayOf(vararg elements: UInt): UIntArray"],
			"url":"uint-array-of.html",
			"subcategories":[]},
		{
			"name":"ULongArray",
			"description":["Creates a new array of the specified size, where each element is calculated by calling the specified\ninit function."],
			"code":["fun ULongArray(size: Int, init: (Int) -> ULong): ULongArray"],
			"url":"-u-long-array.html",
			"subcategories":[]},
		{
			"name":"ulongArrayOf",
			"description":[],
			"code":["fun ulongArrayOf(vararg elements: ULong): ULongArray"],
			"url":"ulong-array-of.html",
			"subcategories":[]},
		{
			"name":"use",
			"description":["Executes the given block function on this resource and then closes it down correctly whether an exception\nis thrown or not."],
			"code":["fun <T : AutoCloseable?, R> T.use(block: (T) -> R): R",
				"fun <T : AutoCloseable?, R> T.use(block: (T) -> R): R"],
			"url":"use.html",
			"subcategories":[]},
		{
			"name":"UShortArray",
			"description":["Creates a new array of the specified size, where each element is calculated by calling the specified\ninit function."],
			"code":["fun UShortArray(    size: Int,     init: (Int) -> UShort): UShortArray"],
			"url":"-u-short-array.html",
			"subcategories":[]},
		{
			"name":"ushortArrayOf",
			"description":[],
			"code":["fun ushortArrayOf(vararg elements: UShort): UShortArray"],
			"url":"ushort-array-of.html",
			"subcategories":[]},
		{
			"name":"with",
			"description":["Calls the specified function block with the given receiver as its receiver and returns its result."],
			"code":["fun <T, R> with(receiver: T, block: T.() -> R): R"],
			"url":"with.html",
			"subcategories":[]}]}, {
	"name":"Companion Object Functions",
	"subcategories":[{
		"name":"fromBits",
		"description":["Returns the Double value corresponding to a given bit representation.",
			"Returns the Float value corresponding to a given bit representation."],
		"code":["fun Double.Companion.fromBits(bits: Long): Double",
			"fun Float.Companion.fromBits(bits: Int): Float"],
		"url":"from-bits.html",
		"subcategories":[]}]}]