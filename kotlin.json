[
  {
    "name": "Types",
    "subcategories": [
      {
        "name": "Annotation",
        "description": [
          "Base interface implicitly implemented by all annotation interfaces.\nSee Kotlin language documentation for more information\non annotations."
        ],
        "code": ["interface Annotation"],
        "url": "-annotation.html",
        "subcategories": [
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "annotationClass",
                "description": [
                  "Returns a KClass instance corresponding to the annotation type of this annotation."
                ],
                "code": [
                  "val <T : Annotation> T.annotationClass: KClass<out T>"
                ]
              }
            ]
          },
          {
            "name": "Inheritors",
            "declarations": [
              {
                "name": "AssociatedObjectKey",
                "description": [
                  "Makes the annotated annotation class an associated object key."
                ],
                "code": ["annotation class AssociatedObjectKey"]
              },
              {
                "name": "BetaInteropApi",
                "description": [
                  "Marks Objective-C and Swift interoperability API as Beta."
                ],
                "code": ["annotation class BetaInteropApi"]
              },
              {
                "name": "BuilderInference",
                "description": [
                  "Allows to infer generic type arguments of a function from the calls in the annotated function parameter of that function."
                ],
                "code": ["annotation class BuilderInference"]
              },
              {
                "name": "CCall",
                "description": [],
                "code": ["annotation class CCall"]
              },
              {
                "name": "CEnumEntryAlias",
                "description": [
                  "Denotes property that is an alias to some enum entry."
                ],
                "code": ["annotation class CEnumEntryAlias"]
              },
              {
                "name": "CEnumVarTypeSize",
                "description": [
                  "Stores instance size of the type T: CEnumVar."
                ],
                "code": ["annotation class CEnumVarTypeSize"]
              },
              {
                "name": "CName",
                "description": [
                  "Makes top level function available from C/C++ code with the given name."
                ],
                "code": ["annotation class CName"]
              },
              {
                "name": "ContextFunctionTypeParams",
                "description": [
                  "Signifies that the annotated functional type has the prefix of size count for context receivers.\nThus, @ContextFunctionTypeParams(2) @ExtensionFunctionType Function4<String, Int, Double, Byte, Unit> is a normalized representation of\ncontext(String, Int) Double.(Byte) -> Unit."
                ],
                "code": ["annotation class ContextFunctionTypeParams"]
              },
              {
                "name": "CStruct",
                "description": [],
                "code": ["annotation class CStruct"]
              },
              {
                "name": "Deprecated",
                "description": [
                  "Marks the annotated declaration as deprecated."
                ],
                "code": ["annotation class Deprecated"]
              },
              {
                "name": "DeprecatedSinceKotlin",
                "description": [
                  "Marks the annotated declaration as deprecated. In contrast to Deprecated, severity of the reported diagnostic is not a constant value,\nbut differs depending on the API version of the usage (the value of the -api-version argument when compiling the module where\nthe usage is located). If the API version is greater or equal than hiddenSince, the declaration will not be accessible from the code\n(as if it was deprecated with level DeprecationLevel.HIDDEN), otherwise if the API version is greater or equal than errorSince,\nthe usage will be marked as an error (as with DeprecationLevel.ERROR), otherwise if the API version is greater or equal\nthan warningSince, the usage will be marked as a warning (as with DeprecationLevel.WARNING), otherwise the annotation is ignored."
                ],
                "code": ["annotation class DeprecatedSinceKotlin"]
              },
              {
                "name": "DslMarker",
                "description": [
                  "When applied to annotation class X specifies that X defines a DSL language"
                ],
                "code": ["annotation class DslMarker"]
              },
              {
                "name": "EagerInitialization",
                "description": [
                  "Forces a top-level property to be initialized eagerly, opposed to lazily on the first access to file and/or property."
                ],
                "code": ["annotation class EagerInitialization"]
              },
              {
                "name": "EagerInitialization",
                "description": [
                  "Forces a top-level property to be initialized eagerly, opposed to lazily on the first access to file and/or property.\nThis annotation can be used as temporal migration assistance during the transition from the previous Kotlin/Native initialization scheme \"eager by default\"\nto the new one, \"lazy by default\"."
                ],
                "code": ["annotation class EagerInitialization"]
              },
              {
                "name": "ExperimentalAssociatedObjects",
                "description": [
                  "The experimental marker for associated objects API."
                ],
                "code": ["annotation class ExperimentalAssociatedObjects"]
              },
              {
                "name": "ExperimentalContracts",
                "description": [
                  "This marker distinguishes the experimental contract declaration API and is used to opt-in for that feature\nwhen declaring contracts of user functions."
                ],
                "code": ["annotation class ExperimentalContracts"]
              },
              {
                "name": "ExperimentalEncodingApi",
                "description": [
                  "This annotation marks the experimental API for encoding and decoding between binary data and printable ASCII character sequences."
                ],
                "code": ["annotation class ExperimentalEncodingApi"]
              },
              {
                "name": "ExperimentalForeignApi",
                "description": [
                  "Marks foreign-memory-related API as experimental."
                ],
                "code": ["annotation class ExperimentalForeignApi"]
              },
              {
                "name": "ExperimentalJsExport",
                "description": ["Marks experimental JS export annotations."],
                "code": ["annotation class ExperimentalJsExport"]
              },
              {
                "name": "ExperimentalMultiplatform",
                "description": [
                  "The experimental multiplatform support API marker."
                ],
                "code": ["annotation class ExperimentalMultiplatform"]
              },
              {
                "name": "ExperimentalNativeApi",
                "description": [
                  "This annotation marks the Kotlin/Native-only standard library API that is considered experimental and is not subject to the\ngeneral compatibility guarantees given for the standard library:\nthe behavior of such API may be changed or the API may be removed completely in any further release."
                ],
                "code": ["annotation class ExperimentalNativeApi"]
              },
              {
                "name": "ExperimentalObjCName",
                "description": [
                  "This annotation marks the experimental ObjCName annotation."
                ],
                "code": ["annotation class ExperimentalObjCName"]
              },
              {
                "name": "ExperimentalObjCRefinement",
                "description": [
                  "This annotation marks the experimental Objective-C export refinement annotations."
                ],
                "code": ["annotation class ExperimentalObjCRefinement"]
              },
              {
                "name": "ExperimentalPathApi",
                "description": [
                  "This annotation marks the extensions and top-level functions for working with java.nio.file.Path considered experimental."
                ],
                "code": ["annotation class ExperimentalPathApi"]
              },
              {
                "name": "ExperimentalReflectionOnLambdas",
                "description": [
                  "This annotation marks the experimental kotlin-reflect API that allows to approximate a Kotlin lambda or a function expression instance\nto a KFunction instance. The behavior of this API may be changed or the API may be removed completely in any further release."
                ],
                "code": ["annotation class ExperimentalReflectionOnLambdas"]
              },
              {
                "name": "ExperimentalStdlibApi",
                "description": [
                  "This annotation marks the standard library API that is considered experimental and is not subject to the\ngeneral compatibility guarantees given for the standard library:\nthe behavior of such API may be changed or the API may be removed completely in any further release."
                ],
                "code": ["annotation class ExperimentalStdlibApi"]
              },
              {
                "name": "ExperimentalSubclassOptIn",
                "description": [
                  "This annotation marks the experimental preview of the language feature SubclassOptInRequired."
                ],
                "code": ["annotation class ExperimentalSubclassOptIn"]
              },
              {
                "name": "ExperimentalTime",
                "description": [
                  "This annotation marks the experimental preview of the standard library API for measuring time and working with durations."
                ],
                "code": ["annotation class ExperimentalTime"]
              },
              {
                "name": "ExperimentalTypeInference",
                "description": [
                  "The experimental marker for type inference augmenting annotations."
                ],
                "code": ["annotation class ExperimentalTypeInference"]
              },
              {
                "name": "ExperimentalUnsignedTypes",
                "description": [
                  "Marks the API that is dependent on the experimental unsigned types, including those types themselves."
                ],
                "code": ["annotation class ExperimentalUnsignedTypes"]
              },
              {
                "name": "ExportObjCClass",
                "description": [
                  "Makes Kotlin subclass of Objective-C class visible for runtime lookup\nafter Kotlin main function gets invoked."
                ],
                "code": ["annotation class ExportObjCClass"]
              },
              {
                "name": "ExtensionFunctionType",
                "description": [
                  "Signifies that the annotated functional type represents an extension function."
                ],
                "code": ["annotation class ExtensionFunctionType"]
              },
              {
                "name": "ExternalObjCClass",
                "description": [],
                "code": ["annotation class ExternalObjCClass"]
              },
              {
                "name": "FreezingIsDeprecated",
                "description": ["Freezing API is deprecated since 1.7.20."],
                "code": ["annotation class FreezingIsDeprecated"]
              },
              {
                "name": "HiddenFromObjC",
                "description": [
                  "Instructs the Kotlin compiler to remove this class, function or property from the public Objective-C API."
                ],
                "code": ["annotation class HiddenFromObjC"]
              },
              {
                "name": "HidesFromObjC",
                "description": [
                  "Meta-annotation that instructs the Kotlin compiler to remove the annotated class, function or property from the public Objective-C API."
                ],
                "code": ["annotation class HidesFromObjC"]
              },
              {
                "name": "Ignore",
                "description": [],
                "code": ["annotation class Ignore"]
              },
              {
                "name": "InteropStubs",
                "description": [],
                "code": ["annotation class InteropStubs"]
              },
              {
                "name": "JsExport",
                "description": [
                  "Exports top-level declaration on JS platform."
                ],
                "code": ["annotation class JsExport"]
              },
              {
                "name": "JsExternalArgument",
                "description": [
                  "When placed on a function parameter, requires the type of the passed argument to be external."
                ],
                "code": ["annotation class JsExternalArgument"]
              },
              {
                "name": "JsExternalInheritorsOnly",
                "description": [
                  "When placed on an external interface or class, requires all its child\ninterfaces, classes, and objects to be external as well."
                ],
                "code": ["annotation class JsExternalInheritorsOnly"]
              },
              {
                "name": "JsModule",
                "description": [
                  "Denotes an external declaration that must be imported from native JavaScript library."
                ],
                "code": ["annotation class JsModule"]
              },
              {
                "name": "JsName",
                "description": [
                  "Gives a declaration (a function, a property or a class) specific name in JavaScript."
                ],
                "code": ["annotation class JsName"]
              },
              {
                "name": "JsNonModule",
                "description": [
                  "Denotes an external declaration that can be used without module system."
                ],
                "code": ["annotation class JsNonModule"]
              },
              {
                "name": "JsQualifier",
                "description": [
                  "Adds prefix to external declarations in a source file."
                ],
                "code": ["annotation class JsQualifier"]
              },
              {
                "name": "JvmDefault",
                "description": [
                  "Specifies that a JVM default method should be generated for non-abstract Kotlin interface member."
                ],
                "code": ["annotation class JvmDefault"]
              },
              {
                "name": "JvmDefaultWithCompatibility",
                "description": [
                  "Forces the compiler to generate compatibility accessors for the annotated interface in the DefaultImpls class.\nPlease note that if an interface is annotated with this annotation for binary compatibility, public derived Kotlin interfaces should also be annotated with it,\nbecause their DefaultImpls methods will be used to access implementations from the DefaultImpls class of the original interface."
                ],
                "code": ["annotation class JvmDefaultWithCompatibility"]
              },
              {
                "name": "JvmDefaultWithoutCompatibility",
                "description": [
                  "Prevents the compiler from generating compatibility accessors for the annotated class or interface, and suppresses\nany related compatibility warnings. In other words, this annotation makes the compiler generate the annotated class\nor interface in the -Xjvm-default=all mode, where only JVM default methods are generated, without DefaultImpls."
                ],
                "code": ["annotation class JvmDefaultWithoutCompatibility"]
              },
              {
                "name": "JvmField",
                "description": [
                  "Instructs the Kotlin compiler not to generate getters/setters for this property and expose it as a field."
                ],
                "code": ["annotation class JvmField"]
              },
              {
                "name": "JvmInline",
                "description": [
                  "Specifies that given value class is inline class."
                ],
                "code": ["annotation class JvmInline"]
              },
              {
                "name": "JvmMultifileClass",
                "description": [
                  "Instructs the Kotlin compiler to generate a multifile class with top-level functions and properties declared in this file as one of its parts.\nName of the corresponding multifile class is provided by the JvmName annotation."
                ],
                "code": ["annotation class JvmMultifileClass"]
              },
              {
                "name": "JvmName",
                "description": [
                  "Specifies the name for the Java class or method which is generated from this element."
                ],
                "code": ["annotation class JvmName"]
              },
              {
                "name": "JvmOverloads",
                "description": [
                  "Instructs the Kotlin compiler to generate overloads for this function that substitute default parameter values."
                ],
                "code": ["annotation class JvmOverloads"]
              },
              {
                "name": "JvmRecord",
                "description": [
                  "Instructs compiler to mark the class as a record and generate relevant toString/equals/hashCode methods"
                ],
                "code": ["annotation class JvmRecord"]
              },
              {
                "name": "JvmSerializableLambda",
                "description": [
                  "Makes the annotated lambda function implement java.io.Serializable,\ngenerates a pretty toString implementation and adds reflection metadata."
                ],
                "code": ["annotation class JvmSerializableLambda"]
              },
              {
                "name": "JvmStatic",
                "description": [
                  "Specifies that an additional static method needs to be generated from this element if it's a function.\nIf this element is a property, additional static getter/setter methods should be generated."
                ],
                "code": ["annotation class JvmStatic"]
              },
              {
                "name": "JvmSuppressWildcards",
                "description": [
                  "Instructs compiler to generate or omit wildcards for type arguments corresponding to parameters with\ndeclaration-site variance, for example such as Collection<out T> has."
                ],
                "code": ["annotation class JvmSuppressWildcards"]
              },
              {
                "name": "JvmSynthetic",
                "description": [
                  "Sets ACC_SYNTHETIC flag on the annotated target in the Java bytecode."
                ],
                "code": ["annotation class JvmSynthetic"]
              },
              {
                "name": "JvmWildcard",
                "description": [
                  "Instructs compiler to generate wildcard for annotated type arguments corresponding to parameters with declaration-site variance."
                ],
                "code": ["annotation class JvmWildcard"]
              },
              {
                "name": "Metadata",
                "description": [
                  "This annotation is present on any class file produced by the Kotlin compiler and is read by the compiler and reflection.\nParameters have very short JVM names on purpose: these names appear in all generated class files, and we'd like to reduce their size."
                ],
                "code": ["annotation class Metadata"]
              },
              {
                "name": "MustBeDocumented",
                "description": [
                  "This meta-annotation determines that an annotation is a part of public API and therefore should be included in the generated\ndocumentation for the element to which the annotation is applied."
                ],
                "code": ["annotation class MustBeDocumented"]
              },
              {
                "name": "nativeGetter",
                "description": [],
                "code": ["annotation class nativeGetter"]
              },
              {
                "name": "nativeInvoke",
                "description": [],
                "code": ["annotation class nativeInvoke"]
              },
              {
                "name": "NativeRuntimeApi",
                "description": [
                  "This annotation marks the Kotlin/Native standard library API that tweaks\nor otherwise accesses the Kotlin runtime behavior."
                ],
                "code": ["annotation class NativeRuntimeApi"]
              },
              {
                "name": "nativeSetter",
                "description": [],
                "code": ["annotation class nativeSetter"]
              },
              {
                "name": "ObjCAction",
                "description": [
                  "Makes Kotlin method in Objective-C class accessible through Objective-C dispatch\nto be used as action sent by control in UIKit or AppKit."
                ],
                "code": ["annotation class ObjCAction"]
              },
              {
                "name": "ObjCConstructor",
                "description": [],
                "code": ["annotation class ObjCConstructor"]
              },
              {
                "name": "ObjCDirect",
                "description": [],
                "code": ["annotation class ObjCDirect"]
              },
              {
                "name": "ObjCFactory",
                "description": [],
                "code": ["annotation class ObjCFactory"]
              },
              {
                "name": "ObjCMethod",
                "description": [],
                "code": ["annotation class ObjCMethod"]
              },
              {
                "name": "ObjCName",
                "description": [
                  "Instructs the Kotlin compiler to use a custom Objective-C and/or Swift name for this class, property, parameter or function."
                ],
                "code": ["annotation class ObjCName"]
              },
              {
                "name": "ObjCOutlet",
                "description": [
                  "Makes Kotlin property in Objective-C class settable through Objective-C dispatch\nto be used as IB outlet."
                ],
                "code": ["annotation class ObjCOutlet"]
              },
              {
                "name": "ObsoleteNativeApi",
                "description": [
                  "This annotation marks the Kotlin/Native standard library API that is considered obsolete and is being phased out."
                ],
                "code": ["annotation class ObsoleteNativeApi"]
              },
              {
                "name": "ObsoleteWorkersApi",
                "description": ["Marks all Worker-related API as obsolete."],
                "code": ["annotation class ObsoleteWorkersApi"]
              },
              {
                "name": "OptIn",
                "description": [
                  "Allows to use the API denoted by the given markers in the annotated file, declaration, or expression.\nIf a declaration is annotated with OptIn, its usages are not required to opt in to that API."
                ],
                "code": ["annotation class OptIn"]
              },
              {
                "name": "OptionalExpectation",
                "description": [
                  "Marks an expected annotation class that it isn't required to have actual counterparts in all platforms."
                ],
                "code": ["annotation class OptionalExpectation"]
              },
              {
                "name": "OverloadResolutionByLambdaReturnType",
                "description": [
                  "Enables overload selection based on the type of the value returned from lambda argument."
                ],
                "code": [
                  "annotation class OverloadResolutionByLambdaReturnType"
                ]
              },
              {
                "name": "ParameterName",
                "description": [
                  "Annotates type arguments of functional type and holds corresponding parameter name specified by the user in type declaration (if any)."
                ],
                "code": ["annotation class ParameterName"]
              },
              {
                "name": "PublishedApi",
                "description": [
                  "When applied to a class or a member with internal visibility allows to use it from public inline functions and\nmakes it effectively public."
                ],
                "code": ["annotation class PublishedApi"]
              },
              {
                "name": "PurelyImplements",
                "description": [
                  "Instructs the Kotlin compiler to treat annotated Java class as pure implementation of given Kotlin interface.\n\"Pure\" means here that each type parameter of class becomes non-platform type argument of that interface."
                ],
                "code": ["annotation class PurelyImplements"]
              },
              {
                "name": "RefinesInSwift",
                "description": [
                  "Meta-annotation that instructs the Kotlin compiler to mark the annotated function or property as\nswift_private in the generated Objective-C API."
                ],
                "code": ["annotation class RefinesInSwift"]
              },
              {
                "name": "Repeatable",
                "description": [
                  "This meta-annotation determines that an annotation is applicable twice or more on a single code element"
                ],
                "code": ["annotation class Repeatable"]
              },
              {
                "name": "ReplaceWith",
                "description": [
                  "Specifies a code fragment that can be used to replace a deprecated function, property or class. Tools such\nas IDEs can automatically apply the replacements specified through this annotation."
                ],
                "code": ["annotation class ReplaceWith"]
              },
              {
                "name": "RequiresOptIn",
                "description": [
                  "Signals that the annotated annotation class is a marker of an API that requires an explicit opt-in."
                ],
                "code": ["annotation class RequiresOptIn"]
              },
              {
                "name": "RestrictsSuspension",
                "description": [
                  "Classes and interfaces marked with this annotation are restricted when used as receivers for extension\nsuspend functions. These suspend extensions can only invoke other member or extension suspend functions on this particular\nreceiver and are restricted from calling arbitrary suspension functions."
                ],
                "code": ["annotation class RestrictsSuspension"]
              },
              {
                "name": "Retain",
                "description": [
                  "Preserve the function entry point during global optimizations."
                ],
                "code": ["annotation class Retain"]
              },
              {
                "name": "RetainForTarget",
                "description": [
                  "Preserve the function entry point during global optimizations, only for the given target."
                ],
                "code": ["annotation class RetainForTarget"]
              },
              {
                "name": "Retention",
                "description": [
                  "This meta-annotation determines whether an annotation is stored in binary output and visible for reflection. By default, both are true."
                ],
                "code": ["annotation class Retention"]
              },
              {
                "name": "SharedImmutable",
                "description": [
                  "Note: this annotation has effect only in Kotlin/Native with legacy memory manager."
                ],
                "code": ["annotation class SharedImmutable"]
              },
              {
                "name": "ShouldRefineInSwift",
                "description": [
                  "Instructs the Kotlin compiler to mark this function or property as swift_private in the generated Objective-C API."
                ],
                "code": ["annotation class ShouldRefineInSwift"]
              },
              {
                "name": "SinceKotlin",
                "description": [
                  "Specifies the first version of Kotlin where a declaration has appeared.\nUsing the declaration and specifying an older API version (via the -api-version command line option) will result in an error."
                ],
                "code": ["annotation class SinceKotlin"]
              },
              {
                "name": "Strictfp",
                "description": [
                  "Marks the JVM method generated from the annotated function as strictfp, meaning that the precision\nof floating point operations performed inside the method needs to be restricted in order to\nachieve better portability."
                ],
                "code": ["annotation class Strictfp"]
              },
              {
                "name": "SubclassOptInRequired",
                "description": [
                  "Annotation that marks open for subclassing classes and interfaces, and makes implementation\nand extension of such declarations as requiring an explicit opt-in."
                ],
                "code": ["annotation class SubclassOptInRequired"]
              },
              {
                "name": "Suppress",
                "description": [
                  "Suppresses the given compilation warnings in the annotated element."
                ],
                "code": ["annotation class Suppress"]
              },
              {
                "name": "SymbolName",
                "description": [
                  "This is a dangerous deprecated and internal annotation. Please avoid using it."
                ],
                "code": ["annotation class SymbolName"]
              },
              {
                "name": "Synchronized",
                "description": [
                  "Marks the JVM method generated from the annotated function as synchronized, meaning that the method\nwill be protected from concurrent execution by multiple threads by the monitor of the instance (or,\nfor static methods, the class) on which the method is defined."
                ],
                "code": [
                  "annotation class Synchronized",
                  "annotation class Synchronized"
                ]
              },
              {
                "name": "Target",
                "description": [
                  "This meta-annotation indicates the kinds of code elements which are possible targets of an annotation."
                ],
                "code": ["annotation class Target"]
              },
              {
                "name": "ThreadLocal",
                "description": [
                  "Marks a top level property with a backing field or an object as thread local.\nThe object remains mutable and it is possible to change its state,\nbut every thread will have a distinct copy of this object,\nso changes in one thread are not reflected in another."
                ],
                "code": ["annotation class ThreadLocal"]
              },
              {
                "name": "Throws",
                "description": [
                  "This annotation indicates what exceptions should be declared by a function when compiled to a platform method\nin Kotlin/JVM and Kotlin/Native."
                ],
                "code": ["annotation class Throws", "typealias Throws = Throws"]
              },
              {
                "name": "Throws",
                "description": [
                  "This annotation indicates what exceptions should be declared by a function when compiled to a JVM method."
                ],
                "code": ["annotation class Throws"]
              },
              {
                "name": "Transient",
                "description": [
                  "Marks the JVM backing field of the annotated property as transient, meaning that it is not\npart of the default serialized form of the object."
                ],
                "code": ["annotation class Transient"]
              },
              {
                "name": "UnsafeNumber",
                "description": [
                  "Marker for declarations that depend on numeric types of different bit width on at least two platforms."
                ],
                "code": ["annotation class UnsafeNumber"]
              },
              {
                "name": "UnsafeVariance",
                "description": ["Suppresses errors about variance conflict"],
                "code": ["annotation class UnsafeVariance"]
              },
              {
                "name": "Volatile",
                "description": [
                  "Marks the JVM backing field of the annotated var property as volatile, meaning that reads and writes to this field\nare atomic and writes are always made visible to other threads. If another thread reads the value of this field (e.g. through its accessor),\nit sees not only that value, but all side effects that led to writing that value."
                ],
                "code": [
                  "annotation class Volatile",
                  "annotation class Volatile"
                ]
              },
              {
                "name": "Volatile",
                "description": [
                  "Marks the backing field of the annotated var property as volatile, meaning that reads and writes to this field\nare atomic and writes are always made visible to other threads. If another thread reads the value of this field (e.g. through its accessor),\nit sees not only that value, but all side effects that led to writing that value."
                ],
                "code": [
                  "annotation class Volatile",
                  "typealias Volatile = Volatile"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "Any",
        "description": [
          "The root of the Kotlin class hierarchy. Every Kotlin class has Any as a superclass."
        ],
        "code": ["open class Any"],
        "url": "-any/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "The root of the Kotlin class hierarchy. Every Kotlin class has Any as a superclass."
                ],
                "code": ["<init>()"]
              }
            ]
          },
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "equals",
                "description": [
                  "Indicates whether some other object is \"equal to\" this one. Implementations must fulfil the following\nrequirements:"
                ],
                "code": ["open operator fun equals(other: Any?): Boolean"]
              },
              {
                "name": "hashCode",
                "description": [
                  "Returns a hash code value for the object.  The general contract of hashCode is:"
                ],
                "code": ["open fun hashCode(): Int"]
              },
              {
                "name": "toString",
                "description": [
                  "Returns a string representation of the object."
                ],
                "code": ["open fun toString(): String"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "isFrozen",
                "description": [
                  "Checks if given object is null or frozen or permanent (i.e. instantiated at compile-time)."
                ],
                "code": ["val Any?.isFrozen: Boolean"]
              },
              {
                "name": "javaClass",
                "description": [
                  "Returns the runtime Java class of this object."
                ],
                "code": ["val <T : Any> T.javaClass: Class<T>"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "also",
                "description": [
                  "Calls the specified function block with this value as its argument and returns this value."
                ],
                "code": ["fun <T> T.also(block: (T) -> Unit): T"]
              },
              {
                "name": "apply",
                "description": [
                  "Calls the specified function block with this value as its receiver and returns this value."
                ],
                "code": ["fun <T> T.apply(block: T.() -> Unit): T"]
              },
              {
                "name": "asDynamic",
                "description": [
                  "Reinterprets this value as a value of the dynamic type."
                ],
                "code": ["fun Any?.asDynamic(): dynamic"]
              },
              {
                "name": "ensureNeverFrozen",
                "description": [
                  "This function ensures that if we see such an object during freezing attempt - freeze fails and\nFreezingException is thrown."
                ],
                "code": ["fun Any.ensureNeverFrozen()"]
              },
              {
                "name": "freeze",
                "description": [
                  "Freezes object subgraph reachable from this object. Frozen objects can be freely\nshared between threads/workers."
                ],
                "code": ["fun <T> T.freeze(): T"]
              },
              {
                "name": "hashCode",
                "description": [
                  "Returns a hash code value for the object or zero if the object is null."
                ],
                "code": ["fun Any?.hashCode(): Int"]
              },
              {
                "name": "identityHashCode",
                "description": [
                  "Compute stable wrt potential object relocations by the memory manager identity hash code."
                ],
                "code": ["fun Any?.identityHashCode(): Int"]
              },
              {
                "name": "iterator",
                "description": [
                  "Allows to iterate this dynamic object in the following cases:"
                ],
                "code": ["operator fun dynamic.iterator(): Iterator<dynamic>"]
              },
              {
                "name": "let",
                "description": [
                  "Calls the specified function block with this value as its argument and returns its result."
                ],
                "code": ["fun <T, R> T.let(block: (T) -> R): R"]
              },
              {
                "name": "objcPtr",
                "description": [],
                "code": ["fun Any?.objcPtr(): NativePtr"]
              },
              {
                "name": "pin",
                "description": [],
                "code": ["fun <T : Any> T.pin(): Pinned<T>"]
              },
              {
                "name": "run",
                "description": [
                  "Calls the specified function block with this value as its receiver and returns its result."
                ],
                "code": ["fun <T, R> T.run(block: T.() -> R): R"]
              },
              {
                "name": "runCatching",
                "description": [
                  "Calls the specified function block with this value as its receiver and returns its encapsulated result if invocation was successful,\ncatching any Throwable exception that was thrown from the block function execution and encapsulating it as a failure."
                ],
                "code": [
                  "fun <T, R> T.runCatching(block: T.() -> R): Result<R>"
                ]
              },
              {
                "name": "takeIf",
                "description": [
                  "Returns this value if it satisfies the given predicate or null, if it doesn't."
                ],
                "code": ["fun <T> T.takeIf(predicate: (T) -> Boolean): T?"]
              },
              {
                "name": "takeUnless",
                "description": [
                  "Returns this value if it does not satisfy the given predicate or null, if it does."
                ],
                "code": ["fun <T> T.takeUnless(predicate: (T) -> Boolean): T?"]
              },
              {
                "name": "to",
                "description": [
                  "Creates a tuple of type Pair from this and that."
                ],
                "code": ["infix fun <A, B> A.to(that: B): Pair<A, B>"]
              },
              {
                "name": "unsafeCast",
                "description": [
                  "Reinterprets this value as a value of the specified type T without any actual type checking.",
                  "Reinterprets this dynamic value as a value of the specified type T without any actual type checking."
                ],
                "code": [
                  "fun <T> Any?.unsafeCast(): T",
                  "fun <T> dynamic.unsafeCast(): T"
                ]
              },
              {
                "name": "usePinned",
                "description": [],
                "code": [
                  "fun <T : Any, R> T.usePinned(block: (Pinned<T>) -> R): R"
                ]
              }
            ]
          },
          {
            "name": "Inheritors",
            "declarations": [
              {
                "name": "AbstractCollection",
                "description": [
                  "Provides a skeletal implementation of the read-only Collection interface."
                ],
                "code": [
                  "abstract class AbstractCollection<out E> : Collection<E>"
                ]
              },
              {
                "name": "AbstractCoroutineContextElement",
                "description": [
                  "Base class for CoroutineContext.Element implementations."
                ],
                "code": [
                  "abstract class AbstractCoroutineContextElement : Element"
                ]
              },
              {
                "name": "AbstractCoroutineContextKey",
                "description": [
                  "Base class for CoroutineContext.Key associated with polymorphic CoroutineContext.Element implementation.\nPolymorphic element implementation implies delegating its get and minusKey\nto getPolymorphicElement and minusPolymorphicKey respectively."
                ],
                "code": [
                  "abstract class AbstractCoroutineContextKey<B : Element, E : B> :     Key<E>"
                ]
              },
              {
                "name": "AbstractDoubleTimeSource",
                "description": [
                  "An abstract class used to implement time sources that return their readings as Double values in the specified unit."
                ],
                "code": [
                  "abstract class AbstractDoubleTimeSource : WithComparableMarks"
                ]
              },
              {
                "name": "AbstractIterator",
                "description": [
                  "A base class to simplify implementing iterators so that implementations only have to implement computeNext\nto implement the iterator, calling done when the iteration is complete."
                ],
                "code": ["abstract class AbstractIterator<T> : Iterator<T>"]
              },
              {
                "name": "AbstractLongTimeSource",
                "description": [
                  "An abstract class used to implement time sources that return their readings as Long values in the specified unit."
                ],
                "code": [
                  "abstract class AbstractLongTimeSource : WithComparableMarks"
                ]
              },
              {
                "name": "AbstractMap",
                "description": [
                  "Provides a skeletal implementation of the read-only Map interface."
                ],
                "code": ["abstract class AbstractMap<K, out V> : Map<K, V>"]
              },
              {
                "name": "AbstractMutableCollection",
                "description": [
                  "Provides a skeletal implementation of the MutableCollection interface."
                ],
                "code": [
                  "abstract class AbstractMutableCollection<E> :     MutableCollection<E>",
                  "abstract class AbstractMutableCollection<E> :     MutableCollection<E>,     AbstractCollection<E>",
                  "abstract class AbstractMutableCollection<E> :     AbstractCollection<E>,     MutableCollection<E>",
                  "abstract class AbstractMutableCollection<E> :     MutableCollection<E>,     AbstractCollection<E>"
                ]
              },
              {
                "name": "AbstractMutableList",
                "description": [
                  "Provides a skeletal implementation of the MutableList interface."
                ],
                "code": [
                  "abstract class AbstractMutableList<E> : MutableList<E>",
                  "abstract class AbstractMutableList<E> :     MutableList<E>,     AbstractList<E>",
                  "abstract class AbstractMutableList<E> :     AbstractMutableCollection<E>,     MutableList<E>"
                ]
              },
              {
                "name": "AbstractMutableMap",
                "description": [
                  "Provides a skeletal implementation of the MutableMap interface."
                ],
                "code": [
                  "abstract class AbstractMutableMap<K, V> : MutableMap<K, V>",
                  "abstract class AbstractMutableMap<K, V> :     MutableMap<K, V>,     AbstractMap<K, V>",
                  "abstract class AbstractMutableMap<K, V> :     AbstractMap<K, V>,     MutableMap<K, V>"
                ]
              },
              {
                "name": "AbstractMutableSet",
                "description": [
                  "Provides a skeletal implementation of the MutableSet interface."
                ],
                "code": [
                  "abstract class AbstractMutableSet<E> : MutableSet<E>",
                  "abstract class AbstractMutableSet<E> :     MutableSet<E>,     AbstractSet<E>",
                  "abstract class AbstractMutableSet<E> :     AbstractMutableCollection<E>,     MutableSet<E>"
                ]
              },
              {
                "name": "AbstractWorker",
                "description": [
                  "Exposes the JavaScript AbstractWorker to Kotlin"
                ],
                "code": ["interface AbstractWorker"]
              },
              {
                "name": "Accessor",
                "description": [
                  "Represents a property accessor, which is a get or set method declared alongside the property.\nSee the Kotlin language documentation\nfor more information."
                ],
                "code": ["interface Accessor<out V>"]
              },
              {
                "name": "AddEventListenerOptions",
                "description": [],
                "code": [
                  "interface AddEventListenerOptions : EventListenerOptions"
                ]
              },
              {
                "name": "Annotation",
                "description": [
                  "Base interface implicitly implemented by all annotation interfaces.\nSee Kotlin language documentation for more information\non annotations."
                ],
                "code": ["interface Annotation"]
              },
              {
                "name": "Appendable",
                "description": [
                  "An object to which char sequences and values can be appended."
                ],
                "code": [
                  "interface Appendable",
                  "typealias Appendable = Appendable"
                ]
              },
              {
                "name": "AppendMode",
                "description": [],
                "code": ["interface AppendMode"]
              },
              {
                "name": "ArenaManager",
                "description": [],
                "code": ["object ArenaManager"]
              },
              {
                "name": "Array",
                "description": [
                  "Represents an array (specifically, a Java array when targeting the JVM platform).\nArray instances can be created using the arrayOf, arrayOfNulls and emptyArray\nstandard library functions.\nSee Kotlin language documentation\nfor more information on arrays."
                ],
                "code": ["class Array<T>"]
              },
              {
                "name": "ArrayBuffer",
                "description": ["Exposes the JavaScript ArrayBuffer to Kotlin"],
                "code": ["open class ArrayBuffer : BufferDataSource"]
              },
              {
                "name": "ArrayBufferView",
                "description": [
                  "Exposes the JavaScript ArrayBufferView to Kotlin"
                ],
                "code": ["interface ArrayBufferView : BufferDataSource"]
              },
              {
                "name": "ArrayList",
                "description": [
                  "Provides a MutableList implementation, which uses a resizable array as its backing storage."
                ],
                "code": [
                  "class ArrayList<E> : MutableList<E>, RandomAccess",
                  "typealias ArrayList<E> = ArrayList<E>",
                  "open class ArrayList<E> :     AbstractMutableList<E>,     MutableList<E>,     RandomAccess",
                  "class ArrayList<E> :     MutableList<E>,     RandomAccess,     AbstractMutableList<E>"
                ]
              },
              {
                "name": "AssignedNodesOptions",
                "description": [],
                "code": ["interface AssignedNodesOptions"]
              },
              {
                "name": "AssociatedObjectKey",
                "description": [
                  "Makes the annotated annotation class an associated object key."
                ],
                "code": ["annotation class AssociatedObjectKey"]
              },
              {
                "name": "AtomicInt",
                "description": [
                  "An Int value that is always updated atomically.\nFor additional details about atomicity guarantees for reads and writes see kotlin.concurrent.Volatile."
                ],
                "code": ["class AtomicInt"]
              },
              {
                "name": "AtomicInt",
                "description": [
                  "An Int value that is always updated atomically.\nFor additional details about atomicity guarantees for reads and writes see kotlin.concurrent.Volatile."
                ],
                "code": ["class AtomicInt"]
              },
              {
                "name": "AtomicLong",
                "description": [
                  "A Long value that is always updated atomically.\nFor additional details about atomicity guarantees for reads and writes see kotlin.concurrent.Volatile."
                ],
                "code": ["class AtomicLong"]
              },
              {
                "name": "AtomicLong",
                "description": [
                  "A Long value that is always updated atomically.\nFor additional details about atomicity guarantees for reads and writes see kotlin.concurrent.Volatile."
                ],
                "code": ["class AtomicLong"]
              },
              {
                "name": "AtomicNativePtr",
                "description": [
                  "A kotlinx.cinterop.NativePtr value that is always updated atomically.\nFor additional details about atomicity guarantees for reads and writes see kotlin.concurrent.Volatile."
                ],
                "code": ["class AtomicNativePtr"]
              },
              {
                "name": "AtomicNativePtr",
                "description": [
                  "A kotlinx.cinterop.NativePtr value that is always updated atomically.\nFor additional details about atomicity guarantees for reads and writes see kotlin.concurrent.Volatile."
                ],
                "code": ["class AtomicNativePtr"]
              },
              {
                "name": "AtomicReference",
                "description": [
                  "An object reference that is always updated atomically."
                ],
                "code": ["class AtomicReference<T>"]
              },
              {
                "name": "AtomicReference",
                "description": [
                  "An object reference that is always updated atomically."
                ],
                "code": ["class AtomicReference<T>"]
              },
              {
                "name": "AudioTrack",
                "description": ["Exposes the JavaScript AudioTrack to Kotlin"],
                "code": [
                  "abstract class AudioTrack :     UnionAudioTrackOrTextTrackOrVideoTrack"
                ]
              },
              {
                "name": "AutoCloseable",
                "description": ["A resource that can be closed or released."],
                "code": ["interface AutoCloseable"]
              },
              {
                "name": "BarProp",
                "description": [],
                "code": ["abstract class BarProp"]
              },
              {
                "name": "Base64",
                "description": [
                  "Provides Base64 encoding and decoding functionality."
                ],
                "code": ["open class Base64"]
              },
              {
                "name": "BetaInteropApi",
                "description": [
                  "Marks Objective-C and Swift interoperability API as Beta."
                ],
                "code": ["annotation class BetaInteropApi"]
              },
              {
                "name": "BinaryType",
                "description": [],
                "code": ["interface BinaryType"]
              },
              {
                "name": "BitSet",
                "description": [
                  "A vector of bits growing if necessary and allowing one to set/clear/read bits from it by a bit index."
                ],
                "code": ["class BitSet"]
              },
              {
                "name": "Blob",
                "description": ["Exposes the JavaScript Blob to Kotlin"],
                "code": ["open class Blob : MediaProvider, ImageBitmapSource"]
              },
              {
                "name": "BlobPropertyBag",
                "description": [],
                "code": ["interface BlobPropertyBag"]
              },
              {
                "name": "Body",
                "description": ["Exposes the JavaScript Body to Kotlin"],
                "code": ["interface Body"]
              },
              {
                "name": "Boolean",
                "description": [
                  "Represents a value which is either true or false. On the JVM, non-nullable values of this type are\nrepresented as values of the primitive type boolean."
                ],
                "code": ["class Boolean : Comparable<Boolean>"]
              },
              {
                "name": "BooleanArray",
                "description": [
                  "An array of booleans. When targeting the JVM, instances of this class are represented as boolean[]."
                ],
                "code": ["class BooleanArray"]
              },
              {
                "name": "BooleanIterator",
                "description": [
                  "An iterator over a sequence of values of type Boolean."
                ],
                "code": ["abstract class BooleanIterator : Iterator<Boolean>"]
              },
              {
                "name": "BoxQuadOptions",
                "description": [],
                "code": ["interface BoxQuadOptions"]
              },
              {
                "name": "BufferDataSource",
                "description": [],
                "code": ["interface BufferDataSource"]
              },
              {
                "name": "BuilderInference",
                "description": [
                  "Allows to infer generic type arguments of a function from the calls in the annotated function parameter of that function."
                ],
                "code": ["annotation class BuilderInference"]
              },
              {
                "name": "ByteArray",
                "description": [
                  "An array of bytes. When targeting the JVM, instances of this class are represented as byte[]."
                ],
                "code": ["class ByteArray"]
              },
              {
                "name": "ByteIterator",
                "description": [
                  "An iterator over a sequence of values of type Byte."
                ],
                "code": ["abstract class ByteIterator : Iterator<Byte>"]
              },
              {
                "name": "Cache",
                "description": ["Exposes the JavaScript Cache to Kotlin"],
                "code": ["abstract class Cache"]
              },
              {
                "name": "CacheBatchOperation",
                "description": [],
                "code": ["interface CacheBatchOperation"]
              },
              {
                "name": "CacheQueryOptions",
                "description": [],
                "code": ["interface CacheQueryOptions"]
              },
              {
                "name": "CacheStorage",
                "description": [
                  "Exposes the JavaScript CacheStorage to Kotlin"
                ],
                "code": ["abstract class CacheStorage"]
              },
              {
                "name": "CallsInPlace",
                "description": [
                  "An effect of calling a functional parameter in place."
                ],
                "code": ["interface CallsInPlace : Effect"]
              },
              {
                "name": "CanPlayTypeResult",
                "description": [],
                "code": ["interface CanPlayTypeResult"]
              },
              {
                "name": "CanvasCompositing",
                "description": [],
                "code": ["interface CanvasCompositing"]
              },
              {
                "name": "CanvasDirection",
                "description": [],
                "code": ["interface CanvasDirection"]
              },
              {
                "name": "CanvasDrawImage",
                "description": [],
                "code": ["interface CanvasDrawImage"]
              },
              {
                "name": "CanvasDrawPath",
                "description": [],
                "code": ["interface CanvasDrawPath"]
              },
              {
                "name": "CanvasFillRule",
                "description": [],
                "code": ["interface CanvasFillRule"]
              },
              {
                "name": "CanvasFillStrokeStyles",
                "description": [],
                "code": ["interface CanvasFillStrokeStyles"]
              },
              {
                "name": "CanvasFilters",
                "description": [],
                "code": ["interface CanvasFilters"]
              },
              {
                "name": "CanvasGradient",
                "description": [
                  "Exposes the JavaScript CanvasGradient to Kotlin"
                ],
                "code": ["abstract class CanvasGradient"]
              },
              {
                "name": "CanvasHitRegion",
                "description": [],
                "code": ["interface CanvasHitRegion"]
              },
              {
                "name": "CanvasImageData",
                "description": [],
                "code": ["interface CanvasImageData"]
              },
              {
                "name": "CanvasImageSmoothing",
                "description": [],
                "code": ["interface CanvasImageSmoothing"]
              },
              {
                "name": "CanvasImageSource",
                "description": [],
                "code": ["interface CanvasImageSource : ImageBitmapSource"]
              },
              {
                "name": "CanvasLineCap",
                "description": [],
                "code": ["interface CanvasLineCap"]
              },
              {
                "name": "CanvasLineJoin",
                "description": [],
                "code": ["interface CanvasLineJoin"]
              },
              {
                "name": "CanvasPath",
                "description": [],
                "code": ["interface CanvasPath"]
              },
              {
                "name": "CanvasPathDrawingStyles",
                "description": [],
                "code": ["interface CanvasPathDrawingStyles"]
              },
              {
                "name": "CanvasPattern",
                "description": [
                  "Exposes the JavaScript CanvasPattern to Kotlin"
                ],
                "code": ["abstract class CanvasPattern"]
              },
              {
                "name": "CanvasRect",
                "description": [],
                "code": ["interface CanvasRect"]
              },
              {
                "name": "CanvasRenderingContext2D",
                "description": [
                  "Exposes the JavaScript CanvasRenderingContext2D to Kotlin"
                ],
                "code": [
                  "abstract class CanvasRenderingContext2D :     CanvasState,     CanvasTransform,     CanvasCompositing,     CanvasImageSmoothing,     CanvasFillStrokeStyles,     CanvasShadowStyles,     CanvasFilters,     CanvasRect,     CanvasDrawPath,     CanvasUserInterface,     CanvasText,     CanvasDrawImage,     CanvasHitRegion,     CanvasImageData,     CanvasPathDrawingStyles,     CanvasTextDrawingStyles,     CanvasPath,     RenderingContext"
                ]
              },
              {
                "name": "CanvasRenderingContext2DSettings",
                "description": [],
                "code": ["interface CanvasRenderingContext2DSettings"]
              },
              {
                "name": "CanvasShadowStyles",
                "description": [],
                "code": ["interface CanvasShadowStyles"]
              },
              {
                "name": "CanvasState",
                "description": [],
                "code": ["interface CanvasState"]
              },
              {
                "name": "CanvasText",
                "description": [],
                "code": ["interface CanvasText"]
              },
              {
                "name": "CanvasTextAlign",
                "description": [],
                "code": ["interface CanvasTextAlign"]
              },
              {
                "name": "CanvasTextBaseline",
                "description": [],
                "code": ["interface CanvasTextBaseline"]
              },
              {
                "name": "CanvasTextDrawingStyles",
                "description": [],
                "code": ["interface CanvasTextDrawingStyles"]
              },
              {
                "name": "CanvasTransform",
                "description": [],
                "code": ["interface CanvasTransform"]
              },
              {
                "name": "CanvasUserInterface",
                "description": [],
                "code": ["interface CanvasUserInterface"]
              },
              {
                "name": "Capabilities",
                "description": [],
                "code": ["interface Capabilities"]
              },
              {
                "name": "CaretPosition",
                "description": [
                  "Exposes the JavaScript CaretPosition to Kotlin"
                ],
                "code": ["abstract class CaretPosition"]
              },
              {
                "name": "CCall",
                "description": [],
                "code": ["annotation class CCall"]
              },
              {
                "name": "CEnum",
                "description": [],
                "code": ["interface CEnum"]
              },
              {
                "name": "CEnumEntryAlias",
                "description": [
                  "Denotes property that is an alias to some enum entry."
                ],
                "code": ["annotation class CEnumEntryAlias"]
              },
              {
                "name": "CEnumVarTypeSize",
                "description": [
                  "Stores instance size of the type T: CEnumVar."
                ],
                "code": ["annotation class CEnumVarTypeSize"]
              },
              {
                "name": "Char",
                "description": ["Represents a 16-bit Unicode character."],
                "code": ["class Char : Comparable<Char>"]
              },
              {
                "name": "CharArray",
                "description": [
                  "An array of chars. When targeting the JVM, instances of this class are represented as char[]."
                ],
                "code": ["class CharArray"]
              },
              {
                "name": "CharIterator",
                "description": [
                  "An iterator over a sequence of values of type Char."
                ],
                "code": ["abstract class CharIterator : Iterator<Char>"]
              },
              {
                "name": "CharProgression",
                "description": ["A progression of values of type Char."],
                "code": ["open class CharProgression : Iterable<Char>"]
              },
              {
                "name": "CharSequence",
                "description": [
                  "Represents a readable sequence of Char values."
                ],
                "code": ["interface CharSequence"]
              },
              {
                "name": "Charsets",
                "description": [
                  "Constant definitions for the standard charsets. These\ncharsets are guaranteed to be available on every implementation of the Java\nplatform."
                ],
                "code": ["object Charsets"]
              },
              {
                "name": "ChildNode",
                "description": ["Exposes the JavaScript ChildNode to Kotlin"],
                "code": ["interface ChildNode"]
              },
              {
                "name": "Cleaner",
                "description": [
                  "The marker interface for objects that have a cleanup action associated with them."
                ],
                "code": ["sealed interface Cleaner"]
              },
              {
                "name": "Client",
                "description": ["Exposes the JavaScript Client to Kotlin"],
                "code": [
                  "abstract class Client :     UnionClientOrMessagePortOrServiceWorker"
                ]
              },
              {
                "name": "ClientQueryOptions",
                "description": [],
                "code": ["interface ClientQueryOptions"]
              },
              {
                "name": "Clients",
                "description": ["Exposes the JavaScript Clients to Kotlin"],
                "code": ["abstract class Clients"]
              },
              {
                "name": "ClientType",
                "description": [],
                "code": ["interface ClientType"]
              },
              {
                "name": "ClipboardEventInit",
                "description": [],
                "code": ["interface ClipboardEventInit : EventInit"]
              },
              {
                "name": "ClipboardPermissionDescriptor",
                "description": [],
                "code": ["interface ClipboardPermissionDescriptor"]
              },
              {
                "name": "ClosedFloatingPointRange",
                "description": [
                  "Represents a range of floating point numbers.\nExtends ClosedRange interface providing custom operation lessThanOrEquals for comparing values of range domain type."
                ],
                "code": [
                  "interface ClosedFloatingPointRange<T : Comparable<T>> :     ClosedRange<T>"
                ]
              },
              {
                "name": "ClosedRange",
                "description": [
                  "Represents a range of values (for example, numbers or characters) where both the lower and upper bounds are included in the range.\nSee the Kotlin language documentation for more information."
                ],
                "code": ["interface ClosedRange<T : Comparable<T>>"]
              },
              {
                "name": "CloseEventInit",
                "description": [],
                "code": ["interface CloseEventInit : EventInit"]
              },
              {
                "name": "CName",
                "description": [
                  "Makes top level function available from C/C++ code with the given name."
                ],
                "code": ["annotation class CName"]
              },
              {
                "name": "Collection",
                "description": [
                  "A generic collection of elements. Methods in this interface support only read-only access to the collection;\nread/write access is supported through the MutableCollection interface."
                ],
                "code": ["interface Collection<out E> : Iterable<E>"]
              },
              {
                "name": "ColorSpaceConversion",
                "description": [],
                "code": ["interface ColorSpaceConversion"]
              },
              {
                "name": "Comparable",
                "description": [
                  "Classes which inherit from this interface have a defined total ordering between their instances."
                ],
                "code": ["interface Comparable<in T>"]
              },
              {
                "name": "ComparableTimeMark",
                "description": [
                  "A TimeMark that can be compared for difference with other time marks obtained from the same TimeSource.WithComparableMarks time source."
                ],
                "code": [
                  "interface ComparableTimeMark :     TimeMark,     Comparable<ComparableTimeMark>"
                ]
              },
              {
                "name": "Comparator",
                "description": [
                  "Provides a comparison function for imposing a total ordering between instances of the type T."
                ],
                "code": [
                  "fun interface Comparator<T>",
                  "typealias Comparator<T> = Comparator<T>"
                ]
              },
              {
                "name": "CompositionEventInit",
                "description": [],
                "code": ["interface CompositionEventInit : UIEventInit"]
              },
              {
                "name": "ConditionalEffect",
                "description": [
                  "An effect of some condition being true after observing another effect of a function."
                ],
                "code": ["interface ConditionalEffect : Effect"]
              },
              {
                "name": "Console",
                "description": ["Exposes the console API to Kotlin."],
                "code": ["interface Console"]
              },
              {
                "name": "ConstantValue",
                "description": [
                  "Collection of annotations that allow to store\nconstant values."
                ],
                "code": ["object ConstantValue"]
              },
              {
                "name": "ConstrainablePattern",
                "description": [],
                "code": ["interface ConstrainablePattern"]
              },
              {
                "name": "ConstrainBooleanParameters",
                "description": [
                  "Exposes the JavaScript ConstrainBooleanParameters to Kotlin"
                ],
                "code": ["interface ConstrainBooleanParameters"]
              },
              {
                "name": "ConstrainDOMStringParameters",
                "description": [
                  "Exposes the JavaScript ConstrainDOMStringParameters to Kotlin"
                ],
                "code": ["interface ConstrainDOMStringParameters"]
              },
              {
                "name": "ConstrainDoubleRange",
                "description": [],
                "code": ["interface ConstrainDoubleRange : DoubleRange"]
              },
              {
                "name": "Constraints",
                "description": [],
                "code": ["interface Constraints : ConstraintSet"]
              },
              {
                "name": "ConstraintSet",
                "description": [],
                "code": ["interface ConstraintSet"]
              },
              {
                "name": "ConstrainULongRange",
                "description": [],
                "code": ["interface ConstrainULongRange : ULongRange"]
              },
              {
                "name": "ContextFunctionTypeParams",
                "description": [
                  "Signifies that the annotated functional type has the prefix of size count for context receivers.\nThus, @ContextFunctionTypeParams(2) @ExtensionFunctionType Function4<String, Int, Double, Byte, Unit> is a normalized representation of\ncontext(String, Int) Double.(Byte) -> Unit."
                ],
                "code": ["annotation class ContextFunctionTypeParams"]
              },
              {
                "name": "Continuation",
                "description": [
                  "Interface representing a continuation after a suspension point that returns a value of type T."
                ],
                "code": ["interface Continuation<in T>"]
              },
              {
                "name": "Continuation0",
                "description": [],
                "code": ["class Continuation0 : () -> Unit"]
              },
              {
                "name": "Continuation1",
                "description": [],
                "code": ["class Continuation1<T1> : (T1) -> Unit"]
              },
              {
                "name": "Continuation2",
                "description": [],
                "code": ["class Continuation2<T1, T2> : (T1, T2) -> Unit"]
              },
              {
                "name": "ContinuationInterceptor",
                "description": [
                  "Marks coroutine context element that intercepts coroutine continuations.\nThe coroutines framework uses ContinuationInterceptor.Key to retrieve the interceptor and\nintercepts all coroutine continuations with interceptContinuation invocations."
                ],
                "code": ["interface ContinuationInterceptor : Element"]
              },
              {
                "name": "ContractBuilder",
                "description": [
                  "Provides a scope, where the functions of the contract DSL, such as returns, callsInPlace, etc.,\ncan be used to describe the contract of a function."
                ],
                "code": ["interface ContractBuilder"]
              },
              {
                "name": "ConvertCoordinateOptions",
                "description": [],
                "code": ["interface ConvertCoordinateOptions"]
              },
              {
                "name": "CopyActionContext",
                "description": [
                  "Context for the copyAction function passed to Path.copyToRecursively."
                ],
                "code": ["interface CopyActionContext"]
              },
              {
                "name": "CoroutineContext",
                "description": [
                  "Persistent context for the coroutine. It is an indexed set of Element instances.\nAn indexed set is a mix between a set and a map.\nEvery element in this set has a unique Key."
                ],
                "code": ["interface CoroutineContext"]
              },
              {
                "name": "CPlusPlusClass",
                "description": [],
                "code": ["interface CPlusPlusClass"]
              },
              {
                "name": "CSS",
                "description": ["Exposes the JavaScript CSS to Kotlin"],
                "code": ["abstract class CSS"]
              },
              {
                "name": "CSSBoxType",
                "description": [],
                "code": ["interface CSSBoxType"]
              },
              {
                "name": "CSSRule",
                "description": ["Exposes the JavaScript CSSRule to Kotlin"],
                "code": ["abstract class CSSRule"]
              },
              {
                "name": "CSSRuleList",
                "description": ["Exposes the JavaScript CSSRuleList to Kotlin"],
                "code": ["abstract class CSSRuleList : ItemArrayLike<CSSRule>"]
              },
              {
                "name": "CSSStyleDeclaration",
                "description": [
                  "Exposes the JavaScript CSSStyleDeclaration to Kotlin"
                ],
                "code": [
                  "abstract class CSSStyleDeclaration : ItemArrayLike<String>"
                ]
              },
              {
                "name": "CStruct",
                "description": [],
                "code": ["annotation class CStruct"]
              },
              {
                "name": "CustomElementRegistry",
                "description": [
                  "Exposes the JavaScript CustomElementRegistry to Kotlin"
                ],
                "code": ["abstract class CustomElementRegistry"]
              },
              {
                "name": "CustomEventInit",
                "description": [],
                "code": ["interface CustomEventInit : EventInit"]
              },
              {
                "name": "CValuesRef",
                "description": [
                  "Represents a reference to (possibly empty) sequence of C values.\nIt can be either a stable pointer CPointer or a sequence of immutable values CValues."
                ],
                "code": ["abstract class CValuesRef<T : CPointed>"]
              },
              {
                "name": "DataTransfer",
                "description": [
                  "Exposes the JavaScript DataTransfer to Kotlin"
                ],
                "code": ["abstract class DataTransfer"]
              },
              {
                "name": "DataTransferItem",
                "description": [
                  "Exposes the JavaScript DataTransferItem to Kotlin"
                ],
                "code": ["abstract class DataTransferItem"]
              },
              {
                "name": "DataTransferItemList",
                "description": [
                  "Exposes the JavaScript DataTransferItemList to Kotlin"
                ],
                "code": ["abstract class DataTransferItemList"]
              },
              {
                "name": "DataView",
                "description": ["Exposes the JavaScript DataView to Kotlin"],
                "code": ["open class DataView : ArrayBufferView"]
              },
              {
                "name": "Date",
                "description": ["Exposes the Date API to Kotlin."],
                "code": ["class Date"]
              },
              {
                "name": "Debugging",
                "description": [
                  "Note: this API is unstable and may change in any release."
                ],
                "code": ["object Debugging"]
              },
              {
                "name": "DeepRecursiveFunction",
                "description": [
                  "Defines deep recursive function that keeps its stack on the heap,\nwhich allows very deep recursive computations that do not use the actual call stack.\nTo initiate a call to this deep recursive function use its invoke function.\nAs a rule of thumb, it should be used if recursion goes deeper than a thousand calls."
                ],
                "code": ["class DeepRecursiveFunction<T, R>"]
              },
              {
                "name": "DeepRecursiveScope",
                "description": [
                  "A scope class for DeepRecursiveFunction function declaration that defines callRecursive methods to\nrecursively call this function or another DeepRecursiveFunction putting the call activation frame on the heap."
                ],
                "code": ["sealed class DeepRecursiveScope<T, R>"]
              },
              {
                "name": "DeferScope",
                "description": [],
                "code": ["open class DeferScope"]
              },
              {
                "name": "Delegates",
                "description": ["Standard property delegates."],
                "code": ["object Delegates"]
              },
              {
                "name": "Deprecated",
                "description": [
                  "Marks the annotated declaration as deprecated."
                ],
                "code": ["annotation class Deprecated"]
              },
              {
                "name": "DeprecatedSinceKotlin",
                "description": [
                  "Marks the annotated declaration as deprecated. In contrast to Deprecated, severity of the reported diagnostic is not a constant value,\nbut differs depending on the API version of the usage (the value of the -api-version argument when compiling the module where\nthe usage is located). If the API version is greater or equal than hiddenSince, the declaration will not be accessible from the code\n(as if it was deprecated with level DeprecationLevel.HIDDEN), otherwise if the API version is greater or equal than errorSince,\nthe usage will be marked as an error (as with DeprecationLevel.ERROR), otherwise if the API version is greater or equal\nthan warningSince, the usage will be marked as a warning (as with DeprecationLevel.WARNING), otherwise the annotation is ignored."
                ],
                "code": ["annotation class DeprecatedSinceKotlin"]
              },
              {
                "name": "DetachedObjectGraph",
                "description": [
                  "Detached object graph encapsulates transferrable detached subgraph which cannot be accessed\nexternally, until it is attached with the attach extension function."
                ],
                "code": ["class DetachedObjectGraph<T>"]
              },
              {
                "name": "DocumentAndElementEventHandlers",
                "description": [],
                "code": ["interface DocumentAndElementEventHandlers"]
              },
              {
                "name": "DocumentOrShadowRoot",
                "description": [
                  "Exposes the JavaScript DocumentOrShadowRoot to Kotlin"
                ],
                "code": ["interface DocumentOrShadowRoot"]
              },
              {
                "name": "DocumentReadyState",
                "description": [],
                "code": ["interface DocumentReadyState"]
              },
              {
                "name": "DOMImplementation",
                "description": [
                  "Exposes the JavaScript DOMImplementation to Kotlin"
                ],
                "code": ["abstract class DOMImplementation"]
              },
              {
                "name": "DOMMatrixReadOnly",
                "description": [
                  "Exposes the JavaScript DOMMatrixReadOnly to Kotlin"
                ],
                "code": ["open class DOMMatrixReadOnly"]
              },
              {
                "name": "DOMParser",
                "description": ["Exposes the JavaScript DOMParser to Kotlin"],
                "code": ["open class DOMParser"]
              },
              {
                "name": "DOMPointInit",
                "description": [
                  "Exposes the JavaScript DOMPointInit to Kotlin"
                ],
                "code": ["interface DOMPointInit"]
              },
              {
                "name": "DOMPointReadOnly",
                "description": [
                  "Exposes the JavaScript DOMPointReadOnly to Kotlin"
                ],
                "code": ["open class DOMPointReadOnly"]
              },
              {
                "name": "DOMQuad",
                "description": ["Exposes the JavaScript DOMQuad to Kotlin"],
                "code": ["open class DOMQuad"]
              },
              {
                "name": "DOMRectInit",
                "description": [],
                "code": ["interface DOMRectInit"]
              },
              {
                "name": "DOMRectList",
                "description": [],
                "code": ["interface DOMRectList : ItemArrayLike<DOMRect>"]
              },
              {
                "name": "DOMRectReadOnly",
                "description": [
                  "Exposes the JavaScript DOMRectReadOnly to Kotlin"
                ],
                "code": ["open class DOMRectReadOnly"]
              },
              {
                "name": "DOMStringMap",
                "description": [
                  "Exposes the JavaScript DOMStringMap to Kotlin"
                ],
                "code": ["abstract class DOMStringMap"]
              },
              {
                "name": "DOMTokenList",
                "description": [
                  "Exposes the JavaScript DOMTokenList to Kotlin"
                ],
                "code": ["abstract class DOMTokenList : ItemArrayLike<String>"]
              },
              {
                "name": "DoubleArray",
                "description": [
                  "An array of doubles. When targeting the JVM, instances of this class are represented as double[]."
                ],
                "code": ["class DoubleArray"]
              },
              {
                "name": "DoubleIterator",
                "description": [
                  "An iterator over a sequence of values of type Double."
                ],
                "code": ["abstract class DoubleIterator : Iterator<Double>"]
              },
              {
                "name": "DoubleRange",
                "description": ["Exposes the JavaScript DoubleRange to Kotlin"],
                "code": ["interface DoubleRange"]
              },
              {
                "name": "DragEventInit",
                "description": [],
                "code": ["interface DragEventInit : MouseEventInit"]
              },
              {
                "name": "DslMarker",
                "description": [
                  "When applied to annotation class X specifies that X defines a DSL language"
                ],
                "code": ["annotation class DslMarker"]
              },
              {
                "name": "Duration",
                "description": [
                  "Represents the amount of time one instant of time is away from another instant."
                ],
                "code": ["class Duration : Comparable<Duration>"]
              },
              {
                "name": "EagerInitialization",
                "description": [
                  "Forces a top-level property to be initialized eagerly, opposed to lazily on the first access to file and/or property."
                ],
                "code": ["annotation class EagerInitialization"]
              },
              {
                "name": "EagerInitialization",
                "description": [
                  "Forces a top-level property to be initialized eagerly, opposed to lazily on the first access to file and/or property.\nThis annotation can be used as temporal migration assistance during the transition from the previous Kotlin/Native initialization scheme \"eager by default\"\nto the new one, \"lazy by default\"."
                ],
                "code": ["annotation class EagerInitialization"]
              },
              {
                "name": "Effect",
                "description": [
                  "Represents an effect of a function invocation,\neither directly observable, such as the function returning normally,\nor a side-effect, such as the function's lambda parameter being called in place."
                ],
                "code": ["interface Effect"]
              },
              {
                "name": "ElementContentEditable",
                "description": [],
                "code": ["interface ElementContentEditable"]
              },
              {
                "name": "ElementCreationOptions",
                "description": [],
                "code": ["interface ElementCreationOptions"]
              },
              {
                "name": "ElementCSSInlineStyle",
                "description": [],
                "code": ["interface ElementCSSInlineStyle"]
              },
              {
                "name": "ElementDefinitionOptions",
                "description": [],
                "code": ["interface ElementDefinitionOptions"]
              },
              {
                "name": "EmptyCoroutineContext",
                "description": ["An empty coroutine context."],
                "code": [
                  "object EmptyCoroutineContext : CoroutineContext, Serializable"
                ]
              },
              {
                "name": "EndOfStreamError",
                "description": [],
                "code": ["interface EndOfStreamError"]
              },
              {
                "name": "Entry",
                "description": ["Represents a key/value pair held by a Map."],
                "code": ["interface Entry<out K, out V>"]
              },
              {
                "name": "Enum",
                "description": [
                  "The common base class of all enum classes.\nSee the Kotlin language documentation for more\ninformation on enum classes."
                ],
                "code": ["abstract class Enum<E : Enum<E>> : Comparable<E>"]
              },
              {
                "name": "EnumEntries",
                "description": [
                  "A specialized immutable implementation of List interface that\ncontains all enum entries of the specified enum type E.\nEnumEntries contains all enum entries in the order they are declared in the source code,\nconsistently with the corresponding Enum.ordinal values."
                ],
                "code": ["sealed interface EnumEntries<E : Enum<E>> : List<E>"]
              },
              {
                "name": "ErrorEventInit",
                "description": [],
                "code": ["interface ErrorEventInit : EventInit"]
              },
              {
                "name": "Event",
                "description": ["Exposes the JavaScript Event to Kotlin"],
                "code": ["open class Event"]
              },
              {
                "name": "EventInit",
                "description": [],
                "code": ["interface EventInit"]
              },
              {
                "name": "EventListener",
                "description": [
                  "Exposes the JavaScript EventListener to Kotlin"
                ],
                "code": ["interface EventListener"]
              },
              {
                "name": "EventListenerOptions",
                "description": [],
                "code": ["interface EventListenerOptions"]
              },
              {
                "name": "EventModifierInit",
                "description": [],
                "code": ["interface EventModifierInit : UIEventInit"]
              },
              {
                "name": "EventSourceInit",
                "description": [],
                "code": ["interface EventSourceInit"]
              },
              {
                "name": "EventTarget",
                "description": ["Exposes the JavaScript EventTarget to Kotlin"],
                "code": ["abstract class EventTarget"]
              },
              {
                "name": "ExperimentalAssociatedObjects",
                "description": [
                  "The experimental marker for associated objects API."
                ],
                "code": ["annotation class ExperimentalAssociatedObjects"]
              },
              {
                "name": "ExperimentalContracts",
                "description": [
                  "This marker distinguishes the experimental contract declaration API and is used to opt-in for that feature\nwhen declaring contracts of user functions."
                ],
                "code": ["annotation class ExperimentalContracts"]
              },
              {
                "name": "ExperimentalEncodingApi",
                "description": [
                  "This annotation marks the experimental API for encoding and decoding between binary data and printable ASCII character sequences."
                ],
                "code": ["annotation class ExperimentalEncodingApi"]
              },
              {
                "name": "ExperimentalForeignApi",
                "description": [
                  "Marks foreign-memory-related API as experimental."
                ],
                "code": ["annotation class ExperimentalForeignApi"]
              },
              {
                "name": "ExperimentalJsExport",
                "description": ["Marks experimental JS export annotations."],
                "code": ["annotation class ExperimentalJsExport"]
              },
              {
                "name": "ExperimentalMultiplatform",
                "description": [
                  "The experimental multiplatform support API marker."
                ],
                "code": ["annotation class ExperimentalMultiplatform"]
              },
              {
                "name": "ExperimentalNativeApi",
                "description": [
                  "This annotation marks the Kotlin/Native-only standard library API that is considered experimental and is not subject to the\ngeneral compatibility guarantees given for the standard library:\nthe behavior of such API may be changed or the API may be removed completely in any further release."
                ],
                "code": ["annotation class ExperimentalNativeApi"]
              },
              {
                "name": "ExperimentalObjCName",
                "description": [
                  "This annotation marks the experimental ObjCName annotation."
                ],
                "code": ["annotation class ExperimentalObjCName"]
              },
              {
                "name": "ExperimentalObjCRefinement",
                "description": [
                  "This annotation marks the experimental Objective-C export refinement annotations."
                ],
                "code": ["annotation class ExperimentalObjCRefinement"]
              },
              {
                "name": "ExperimentalPathApi",
                "description": [
                  "This annotation marks the extensions and top-level functions for working with java.nio.file.Path considered experimental."
                ],
                "code": ["annotation class ExperimentalPathApi"]
              },
              {
                "name": "ExperimentalReflectionOnLambdas",
                "description": [
                  "This annotation marks the experimental kotlin-reflect API that allows to approximate a Kotlin lambda or a function expression instance\nto a KFunction instance. The behavior of this API may be changed or the API may be removed completely in any further release."
                ],
                "code": ["annotation class ExperimentalReflectionOnLambdas"]
              },
              {
                "name": "ExperimentalStdlibApi",
                "description": [
                  "This annotation marks the standard library API that is considered experimental and is not subject to the\ngeneral compatibility guarantees given for the standard library:\nthe behavior of such API may be changed or the API may be removed completely in any further release."
                ],
                "code": ["annotation class ExperimentalStdlibApi"]
              },
              {
                "name": "ExperimentalSubclassOptIn",
                "description": [
                  "This annotation marks the experimental preview of the language feature SubclassOptInRequired."
                ],
                "code": ["annotation class ExperimentalSubclassOptIn"]
              },
              {
                "name": "ExperimentalTime",
                "description": [
                  "This annotation marks the experimental preview of the standard library API for measuring time and working with durations."
                ],
                "code": ["annotation class ExperimentalTime"]
              },
              {
                "name": "ExperimentalTypeInference",
                "description": [
                  "The experimental marker for type inference augmenting annotations."
                ],
                "code": ["annotation class ExperimentalTypeInference"]
              },
              {
                "name": "ExperimentalUnsignedTypes",
                "description": [
                  "Marks the API that is dependent on the experimental unsigned types, including those types themselves."
                ],
                "code": ["annotation class ExperimentalUnsignedTypes"]
              },
              {
                "name": "ExportObjCClass",
                "description": [
                  "Makes Kotlin subclass of Objective-C class visible for runtime lookup\nafter Kotlin main function gets invoked."
                ],
                "code": ["annotation class ExportObjCClass"]
              },
              {
                "name": "ExtendableEventInit",
                "description": [],
                "code": ["interface ExtendableEventInit : EventInit"]
              },
              {
                "name": "ExtendableMessageEventInit",
                "description": [],
                "code": [
                  "interface ExtendableMessageEventInit : ExtendableEventInit"
                ]
              },
              {
                "name": "ExtensionFunctionType",
                "description": [
                  "Signifies that the annotated functional type represents an extension function."
                ],
                "code": ["annotation class ExtensionFunctionType"]
              },
              {
                "name": "External",
                "description": [],
                "code": ["interface External"]
              },
              {
                "name": "ExternalObjCClass",
                "description": [],
                "code": ["annotation class ExternalObjCClass"]
              },
              {
                "name": "FetchEventInit",
                "description": [],
                "code": ["interface FetchEventInit : ExtendableEventInit"]
              },
              {
                "name": "FileList",
                "description": ["Exposes the JavaScript FileList to Kotlin"],
                "code": ["abstract class FileList : ItemArrayLike<File>"]
              },
              {
                "name": "FilePropertyBag",
                "description": [],
                "code": ["interface FilePropertyBag : BlobPropertyBag"]
              },
              {
                "name": "FileReaderSync",
                "description": [
                  "Exposes the JavaScript FileReaderSync to Kotlin"
                ],
                "code": ["open class FileReaderSync"]
              },
              {
                "name": "FileTreeWalk",
                "description": [
                  "This class is intended to implement different file traversal methods.\nIt allows to iterate through all files inside a given directory."
                ],
                "code": ["class FileTreeWalk : Sequence<File>"]
              },
              {
                "name": "FileVisitorBuilder",
                "description": [
                  "The builder to provide implementation of the file visitor that fileVisitor builds."
                ],
                "code": ["sealed interface FileVisitorBuilder"]
              },
              {
                "name": "Float32Array",
                "description": [
                  "Exposes the JavaScript Float32Array to Kotlin"
                ],
                "code": ["open class Float32Array : ArrayBufferView"]
              },
              {
                "name": "Float64Array",
                "description": [
                  "Exposes the JavaScript Float64Array to Kotlin"
                ],
                "code": ["open class Float64Array : ArrayBufferView"]
              },
              {
                "name": "FloatArray",
                "description": [
                  "An array of floats. When targeting the JVM, instances of this class are represented as float[]."
                ],
                "code": ["class FloatArray"]
              },
              {
                "name": "FloatIterator",
                "description": [
                  "An iterator over a sequence of values of type Float."
                ],
                "code": ["abstract class FloatIterator : Iterator<Float>"]
              },
              {
                "name": "FocusEventInit",
                "description": [],
                "code": ["interface FocusEventInit : UIEventInit"]
              },
              {
                "name": "ForeignFetchEventInit",
                "description": [],
                "code": [
                  "interface ForeignFetchEventInit : ExtendableEventInit"
                ]
              },
              {
                "name": "ForeignFetchOptions",
                "description": [],
                "code": ["interface ForeignFetchOptions"]
              },
              {
                "name": "ForeignFetchResponse",
                "description": [],
                "code": ["interface ForeignFetchResponse"]
              },
              {
                "name": "FormData",
                "description": ["Exposes the JavaScript FormData to Kotlin"],
                "code": ["open class FormData"]
              },
              {
                "name": "FrameType",
                "description": [],
                "code": ["interface FrameType"]
              },
              {
                "name": "FreezableAtomicReference",
                "description": [
                  "Note: this class is useful only with legacy memory manager. Please use AtomicReference instead."
                ],
                "code": ["class FreezableAtomicReference<T>"]
              },
              {
                "name": "FreezingIsDeprecated",
                "description": ["Freezing API is deprecated since 1.7.20."],
                "code": ["annotation class FreezingIsDeprecated"]
              },
              {
                "name": "Function",
                "description": [
                  "Represents a value of a functional type, such as a lambda, an anonymous function or a function reference."
                ],
                "code": ["interface Function<out R>"]
              },
              {
                "name": "Future",
                "description": [],
                "code": ["class Future<T>"]
              },
              {
                "name": "GC",
                "description": [
                  "Note: this API is unstable and may change in any release."
                ],
                "code": ["object GC"]
              },
              {
                "name": "GCInfo",
                "description": [
                  "This class represents statistics about the single run of the garbage collector.\nIt is supposed to be used for testing and debugging purposes only."
                ],
                "code": ["class GCInfo"]
              },
              {
                "name": "GeometryUtils",
                "description": [
                  "Exposes the JavaScript GeometryUtils to Kotlin"
                ],
                "code": ["interface GeometryUtils"]
              },
              {
                "name": "GetNotificationOptions",
                "description": [],
                "code": ["interface GetNotificationOptions"]
              },
              {
                "name": "GetRootNodeOptions",
                "description": [],
                "code": ["interface GetRootNodeOptions"]
              },
              {
                "name": "GetSVGDocument",
                "description": [],
                "code": ["interface GetSVGDocument"]
              },
              {
                "name": "Getter",
                "description": [
                  "Getter of the property is a get method declared alongside the property."
                ],
                "code": [
                  "interface Getter<out V> : KProperty.Accessor<V>, KFunction<V>"
                ]
              },
              {
                "name": "Getter",
                "description": [
                  "Getter of the property is a get method declared alongside the property."
                ],
                "code": [
                  "interface Getter<out V> : KProperty.Getter<V>, () -> V"
                ]
              },
              {
                "name": "Getter",
                "description": [
                  "Getter of the property is a get method declared alongside the property."
                ],
                "code": [
                  "interface Getter<T, out V> : KProperty.Getter<V>, (T) -> V"
                ]
              },
              {
                "name": "Getter",
                "description": [
                  "Getter of the property is a get method declared alongside the property."
                ],
                "code": [
                  "interface Getter<D, E, out V> :     KProperty.Getter<V>,     (D, E) -> V"
                ]
              },
              {
                "name": "GlobalEventHandlers",
                "description": [
                  "Exposes the JavaScript GlobalEventHandlers to Kotlin"
                ],
                "code": ["interface GlobalEventHandlers"]
              },
              {
                "name": "GlobalPerformance",
                "description": [],
                "code": ["interface GlobalPerformance"]
              },
              {
                "name": "Grouping",
                "description": [
                  "Represents a source of elements with a keyOf function, which can be applied to each element to get its key."
                ],
                "code": ["interface Grouping<T, out K>"]
              },
              {
                "name": "HashChangeEventInit",
                "description": [],
                "code": ["interface HashChangeEventInit : EventInit"]
              },
              {
                "name": "HashMap",
                "description": [
                  "Hash table based implementation of the MutableMap interface."
                ],
                "code": [
                  "class HashMap<K, V> : MutableMap<K, V>",
                  "typealias HashMap<K, V> = HashMap<K, V>",
                  "open class HashMap<K, V> :     AbstractMutableMap<K, V>,     MutableMap<K, V>"
                ]
              },
              {
                "name": "HashSet",
                "description": [
                  "The implementation of the MutableSet interface, backed by a HashMap instance."
                ],
                "code": [
                  "class HashSet<E> : MutableSet<E>",
                  "typealias HashSet<E> = HashSet<E>",
                  "open class HashSet<E> : AbstractMutableSet<E>, MutableSet<E>",
                  "class HashSet<E> :     MutableSet<E>,     KonanSet<E>,     AbstractMutableSet<E>"
                ]
              },
              {
                "name": "Headers",
                "description": ["Exposes the JavaScript Headers to Kotlin"],
                "code": ["open class Headers"]
              },
              {
                "name": "HexFormat",
                "description": ["Represents hexadecimal format options."],
                "code": ["class HexFormat"]
              },
              {
                "name": "HiddenFromObjC",
                "description": [
                  "Instructs the Kotlin compiler to remove this class, function or property from the public Objective-C API."
                ],
                "code": ["annotation class HiddenFromObjC"]
              },
              {
                "name": "HidesFromObjC",
                "description": [
                  "Meta-annotation that instructs the Kotlin compiler to remove the annotated class, function or property from the public Objective-C API."
                ],
                "code": ["annotation class HidesFromObjC"]
              },
              {
                "name": "History",
                "description": ["Exposes the JavaScript History to Kotlin"],
                "code": ["abstract class History"]
              },
              {
                "name": "HitRegionOptions",
                "description": [],
                "code": ["interface HitRegionOptions"]
              },
              {
                "name": "HTMLAllCollection",
                "description": [],
                "code": ["abstract class HTMLAllCollection"]
              },
              {
                "name": "HTMLCollection",
                "description": [
                  "Exposes the JavaScript HTMLCollection to Kotlin"
                ],
                "code": [
                  "abstract class HTMLCollection :     ItemArrayLike<Element>,     UnionElementOrHTMLCollection"
                ]
              },
              {
                "name": "HTMLHyperlinkElementUtils",
                "description": [
                  "Exposes the JavaScript HTMLHyperlinkElementUtils to Kotlin"
                ],
                "code": ["interface HTMLHyperlinkElementUtils"]
              },
              {
                "name": "HTMLOrSVGImageElement",
                "description": [],
                "code": ["interface HTMLOrSVGImageElement : CanvasImageSource"]
              },
              {
                "name": "HTMLOrSVGScriptElement",
                "description": [],
                "code": ["interface HTMLOrSVGScriptElement"]
              },
              {
                "name": "Ignore",
                "description": [],
                "code": ["annotation class Ignore"]
              },
              {
                "name": "ImageBitmap",
                "description": ["Exposes the JavaScript ImageBitmap to Kotlin"],
                "code": [
                  "abstract class ImageBitmap :     CanvasImageSource,     TexImageSource"
                ]
              },
              {
                "name": "ImageBitmapOptions",
                "description": [],
                "code": ["interface ImageBitmapOptions"]
              },
              {
                "name": "ImageBitmapRenderingContext",
                "description": [
                  "Exposes the JavaScript ImageBitmapRenderingContext to Kotlin"
                ],
                "code": ["abstract class ImageBitmapRenderingContext"]
              },
              {
                "name": "ImageBitmapRenderingContextSettings",
                "description": [],
                "code": ["interface ImageBitmapRenderingContextSettings"]
              },
              {
                "name": "ImageBitmapSource",
                "description": [],
                "code": ["interface ImageBitmapSource"]
              },
              {
                "name": "ImageData",
                "description": ["Exposes the JavaScript ImageData to Kotlin"],
                "code": [
                  "open class ImageData : ImageBitmapSource, TexImageSource"
                ]
              },
              {
                "name": "ImageOrientation",
                "description": [],
                "code": ["interface ImageOrientation"]
              },
              {
                "name": "ImageSmoothingQuality",
                "description": [],
                "code": ["interface ImageSmoothingQuality"]
              },
              {
                "name": "ImmutableBlob",
                "description": ["An immutable compile-time array of bytes."],
                "code": ["class ImmutableBlob"]
              },
              {
                "name": "IndexedValue",
                "description": [
                  "Data class representing a value from a collection or sequence, along with its index in that collection or sequence."
                ],
                "code": ["data class IndexedValue<out T>"]
              },
              {
                "name": "InputEventInit",
                "description": [],
                "code": ["interface InputEventInit : UIEventInit"]
              },
              {
                "name": "Int16Array",
                "description": ["Exposes the JavaScript Int16Array to Kotlin"],
                "code": ["open class Int16Array : ArrayBufferView"]
              },
              {
                "name": "Int32Array",
                "description": ["Exposes the JavaScript Int32Array to Kotlin"],
                "code": ["open class Int32Array : ArrayBufferView"]
              },
              {
                "name": "Int8Array",
                "description": ["Exposes the JavaScript Int8Array to Kotlin"],
                "code": ["open class Int8Array : ArrayBufferView"]
              },
              {
                "name": "IntArray",
                "description": [
                  "An array of ints. When targeting the JVM, instances of this class are represented as int[]."
                ],
                "code": ["class IntArray"]
              },
              {
                "name": "InteropStubs",
                "description": [],
                "code": ["annotation class InteropStubs"]
              },
              {
                "name": "IntIterator",
                "description": [
                  "An iterator over a sequence of values of type Int."
                ],
                "code": ["abstract class IntIterator : Iterator<Int>"]
              },
              {
                "name": "IntProgression",
                "description": ["A progression of values of type Int."],
                "code": ["open class IntProgression : Iterable<Int>"]
              },
              {
                "name": "ItemArrayLike",
                "description": [],
                "code": ["interface ItemArrayLike<out T>"]
              },
              {
                "name": "Iterable",
                "description": [
                  "Classes that inherit from this interface can be represented as a sequence of elements that can\nbe iterated over."
                ],
                "code": ["interface Iterable<out T>"]
              },
              {
                "name": "Iterator",
                "description": [
                  "An iterator over a collection or another entity that can be represented as a sequence of elements.\nAllows to sequentially access the elements."
                ],
                "code": ["interface Iterator<out T>"]
              },
              {
                "name": "JsClass",
                "description": [
                  "Represents the constructor of a class. Instances of JsClass can be passed to JavaScript APIs that expect a constructor reference."
                ],
                "code": ["interface JsClass<T : Any>"]
              },
              {
                "name": "JsExport",
                "description": [
                  "Exports top-level declaration on JS platform."
                ],
                "code": ["annotation class JsExport"]
              },
              {
                "name": "JsExternalArgument",
                "description": [
                  "When placed on a function parameter, requires the type of the passed argument to be external."
                ],
                "code": ["annotation class JsExternalArgument"]
              },
              {
                "name": "JsExternalInheritorsOnly",
                "description": [
                  "When placed on an external interface or class, requires all its child\ninterfaces, classes, and objects to be external as well."
                ],
                "code": ["annotation class JsExternalInheritorsOnly"]
              },
              {
                "name": "JsModule",
                "description": [
                  "Denotes an external declaration that must be imported from native JavaScript library."
                ],
                "code": ["annotation class JsModule"]
              },
              {
                "name": "JsName",
                "description": [
                  "Gives a declaration (a function, a property or a class) specific name in JavaScript."
                ],
                "code": ["annotation class JsName"]
              },
              {
                "name": "JsNonModule",
                "description": [
                  "Denotes an external declaration that can be used without module system."
                ],
                "code": ["annotation class JsNonModule"]
              },
              {
                "name": "Json",
                "description": [
                  "An interface for indexing access to a collection of key-value pairs, where type of key is String and type of value is Any?."
                ],
                "code": ["interface Json"]
              },
              {
                "name": "JSON",
                "description": [
                  "Exposes the JavaScript JSON object to Kotlin."
                ],
                "code": ["object JSON"]
              },
              {
                "name": "JsQualifier",
                "description": [
                  "Adds prefix to external declarations in a source file."
                ],
                "code": ["annotation class JsQualifier"]
              },
              {
                "name": "JsValue",
                "description": [],
                "code": ["open class JsValue"]
              },
              {
                "name": "JvmDefault",
                "description": [
                  "Specifies that a JVM default method should be generated for non-abstract Kotlin interface member."
                ],
                "code": ["annotation class JvmDefault"]
              },
              {
                "name": "JvmDefaultWithCompatibility",
                "description": [
                  "Forces the compiler to generate compatibility accessors for the annotated interface in the DefaultImpls class.\nPlease note that if an interface is annotated with this annotation for binary compatibility, public derived Kotlin interfaces should also be annotated with it,\nbecause their DefaultImpls methods will be used to access implementations from the DefaultImpls class of the original interface."
                ],
                "code": ["annotation class JvmDefaultWithCompatibility"]
              },
              {
                "name": "JvmDefaultWithoutCompatibility",
                "description": [
                  "Prevents the compiler from generating compatibility accessors for the annotated class or interface, and suppresses\nany related compatibility warnings. In other words, this annotation makes the compiler generate the annotated class\nor interface in the -Xjvm-default=all mode, where only JVM default methods are generated, without DefaultImpls."
                ],
                "code": ["annotation class JvmDefaultWithoutCompatibility"]
              },
              {
                "name": "JvmField",
                "description": [
                  "Instructs the Kotlin compiler not to generate getters/setters for this property and expose it as a field."
                ],
                "code": ["annotation class JvmField"]
              },
              {
                "name": "JvmInline",
                "description": [
                  "Specifies that given value class is inline class."
                ],
                "code": ["annotation class JvmInline"]
              },
              {
                "name": "JvmMultifileClass",
                "description": [
                  "Instructs the Kotlin compiler to generate a multifile class with top-level functions and properties declared in this file as one of its parts.\nName of the corresponding multifile class is provided by the JvmName annotation."
                ],
                "code": ["annotation class JvmMultifileClass"]
              },
              {
                "name": "JvmName",
                "description": [
                  "Specifies the name for the Java class or method which is generated from this element."
                ],
                "code": ["annotation class JvmName"]
              },
              {
                "name": "JvmOverloads",
                "description": [
                  "Instructs the Kotlin compiler to generate overloads for this function that substitute default parameter values."
                ],
                "code": ["annotation class JvmOverloads"]
              },
              {
                "name": "JvmRecord",
                "description": [
                  "Instructs compiler to mark the class as a record and generate relevant toString/equals/hashCode methods"
                ],
                "code": ["annotation class JvmRecord"]
              },
              {
                "name": "JvmSerializableLambda",
                "description": [
                  "Makes the annotated lambda function implement java.io.Serializable,\ngenerates a pretty toString implementation and adds reflection metadata."
                ],
                "code": ["annotation class JvmSerializableLambda"]
              },
              {
                "name": "JvmStatic",
                "description": [
                  "Specifies that an additional static method needs to be generated from this element if it's a function.\nIf this element is a property, additional static getter/setter methods should be generated."
                ],
                "code": ["annotation class JvmStatic"]
              },
              {
                "name": "JvmSuppressWildcards",
                "description": [
                  "Instructs compiler to generate or omit wildcards for type arguments corresponding to parameters with\ndeclaration-site variance, for example such as Collection<out T> has."
                ],
                "code": ["annotation class JvmSuppressWildcards"]
              },
              {
                "name": "JvmSynthetic",
                "description": [
                  "Sets ACC_SYNTHETIC flag on the annotated target in the Java bytecode."
                ],
                "code": ["annotation class JvmSynthetic"]
              },
              {
                "name": "JvmWildcard",
                "description": [
                  "Instructs compiler to generate wildcard for annotated type arguments corresponding to parameters with declaration-site variance."
                ],
                "code": ["annotation class JvmWildcard"]
              },
              {
                "name": "KAnnotatedElement",
                "description": [
                  "Represents an annotated element and allows to obtain its annotations.\nSee the Kotlin language documentation\nfor more information."
                ],
                "code": ["interface KAnnotatedElement"]
              },
              {
                "name": "KCallable",
                "description": [
                  "Represents a callable entity, such as a function or a property."
                ],
                "code": [
                  "interface KCallable<out R>",
                  "interface KCallable<out R> : KAnnotatedElement"
                ]
              },
              {
                "name": "KClass",
                "description": [
                  "Represents a class and provides introspection capabilities.\nInstances of this class are obtainable by the ::class syntax.\nSee the Kotlin language documentation\nfor more information."
                ],
                "code": [
                  "interface KClass<T : Any> : KClassifier",
                  "interface KClass<T : Any> :     KDeclarationContainer,     KAnnotatedElement,     KClassifier"
                ]
              },
              {
                "name": "KClassifier",
                "description": [
                  "A classifier is either a class or a type parameter."
                ],
                "code": ["interface KClassifier"]
              },
              {
                "name": "KDeclarationContainer",
                "description": [
                  "Represents an entity which may contain declarations of any other entities,\nsuch as a class or a package."
                ],
                "code": ["interface KDeclarationContainer"]
              },
              {
                "name": "KeyboardEventInit",
                "description": [],
                "code": ["interface KeyboardEventInit : EventModifierInit"]
              },
              {
                "name": "KFunction",
                "description": [
                  "Represents a function with introspection capabilities."
                ],
                "code": [
                  "interface KFunction<out R> : KCallable<R>, Function<R>"
                ]
              },
              {
                "name": "KMutableProperty",
                "description": ["Represents a property declared as a var."],
                "code": ["interface KMutableProperty<V> : KProperty<V>"]
              },
              {
                "name": "KMutableProperty0",
                "description": [
                  "Represents a var-property without any kind of receiver."
                ],
                "code": [
                  "interface KMutableProperty0<V> :     KProperty0<V>,     KMutableProperty<V>"
                ]
              },
              {
                "name": "KMutableProperty1",
                "description": [
                  "Represents a var-property, operations on which take one receiver as a parameter."
                ],
                "code": [
                  "interface KMutableProperty1<T, V> :     KProperty1<T, V>,     KMutableProperty<V>"
                ]
              },
              {
                "name": "KMutableProperty2",
                "description": [
                  "Represents a var-property, operations on which take two receivers as parameters."
                ],
                "code": [
                  "interface KMutableProperty2<D, E, V> :     KProperty2<D, E, V>,     KMutableProperty<V>"
                ]
              },
              {
                "name": "KotlinVersion",
                "description": [
                  "Represents a version of the Kotlin standard library."
                ],
                "code": ["class KotlinVersion : Comparable<KotlinVersion>"]
              },
              {
                "name": "KParameter",
                "description": [
                  "Represents a parameter passed to a function or a property getter/setter,\nincluding this and extension receiver parameters."
                ],
                "code": ["interface KParameter : KAnnotatedElement"]
              },
              {
                "name": "KProperty",
                "description": [
                  "Represents a property, such as a named val or var declaration.\nInstances of this class are obtainable by the :: operator."
                ],
                "code": ["interface KProperty<out V> : KCallable<V>"]
              },
              {
                "name": "KProperty0",
                "description": [
                  "Represents a property without any kind of receiver.\nSuch property is either originally declared in a receiverless context such as a package,\nor has the receiver bound to it."
                ],
                "code": ["interface KProperty0<out V> : KProperty<V>, () -> V"]
              },
              {
                "name": "KProperty1",
                "description": [
                  "Represents a property, operations on which take one receiver as a parameter."
                ],
                "code": [
                  "interface KProperty1<T, out V> : KProperty<V>, (T) -> V"
                ]
              },
              {
                "name": "KProperty2",
                "description": [
                  "Represents a property, operations on which take two receivers as parameters,\nsuch as an extension property declared in a class."
                ],
                "code": [
                  "interface KProperty2<D, E, out V> : KProperty<V>, (D, E) -> V"
                ]
              },
              {
                "name": "KType",
                "description": [
                  "Represents a type. Type is usually either a class with optional type arguments,\nor a type parameter of some declaration, plus nullability."
                ],
                "code": [
                  "interface KType",
                  "interface KType : KAnnotatedElement"
                ]
              },
              {
                "name": "KTypeParameter",
                "description": [
                  "Represents a declaration of a type parameter of a class or a callable.\nSee the Kotlin language documentation\nfor more information."
                ],
                "code": ["interface KTypeParameter : KClassifier"]
              },
              {
                "name": "KTypeProjection",
                "description": [
                  "Represents a type projection. Type projection is usually the argument to another type in a type usage.\nFor example, in the type Array<out Number>, out Number is the covariant projection of the type represented by the class Number."
                ],
                "code": ["data class KTypeProjection"]
              },
              {
                "name": "Lazy",
                "description": ["Represents a value with lazy initialization."],
                "code": ["interface Lazy<out T>"]
              },
              {
                "name": "LinkedHashMap",
                "description": [
                  "Hash table based implementation of the MutableMap interface, which additionally preserves the insertion order\nof entries during the iteration."
                ],
                "code": [
                  "class LinkedHashMap<K, V> : MutableMap<K, V>",
                  "typealias LinkedHashMap<K, V> = LinkedHashMap<K, V>",
                  "open class LinkedHashMap<K, V> :     HashMap<K, V>,     MutableMap<K, V>",
                  "typealias LinkedHashMap<K, V> = HashMap<K, V>"
                ]
              },
              {
                "name": "LinkedHashSet",
                "description": [
                  "The implementation of the MutableSet interface, backed by a LinkedHashMap instance."
                ],
                "code": [
                  "class LinkedHashSet<E> : MutableSet<E>",
                  "typealias LinkedHashSet<E> = LinkedHashSet<E>",
                  "open class LinkedHashSet<E> : HashSet<E>, MutableSet<E>",
                  "typealias LinkedHashSet<V> = HashSet<V>"
                ]
              },
              {
                "name": "LinkStyle",
                "description": ["Exposes the JavaScript LinkStyle to Kotlin"],
                "code": ["interface LinkStyle"]
              },
              {
                "name": "List",
                "description": [
                  "A generic ordered collection of elements. Methods in this interface support only read-only access to the list;\nread/write access is supported through the MutableList interface."
                ],
                "code": ["interface List<out E> : Collection<E>"]
              },
              {
                "name": "ListIterator",
                "description": [
                  "An iterator over a collection that supports indexed access."
                ],
                "code": ["interface ListIterator<out T> : Iterator<T>"]
              },
              {
                "name": "Location",
                "description": ["Exposes the JavaScript Location to Kotlin"],
                "code": ["abstract class Location"]
              },
              {
                "name": "LongArray",
                "description": [
                  "An array of longs. When targeting the JVM, instances of this class are represented as long[]."
                ],
                "code": ["class LongArray"]
              },
              {
                "name": "LongIterator",
                "description": [
                  "An iterator over a sequence of values of type Long."
                ],
                "code": ["abstract class LongIterator : Iterator<Long>"]
              },
              {
                "name": "LongProgression",
                "description": ["A progression of values of type Long."],
                "code": ["open class LongProgression : Iterable<Long>"]
              },
              {
                "name": "ManagedType",
                "description": [],
                "code": ["abstract class ManagedType<T : CStructVar>"]
              },
              {
                "name": "Map",
                "description": [
                  "A collection that holds pairs of objects (keys and values) and supports efficiently retrieving\nthe value corresponding to each key. Map keys are unique; the map holds only one value for each key.\nMethods in this interface support only read-only access to the map; read-write access is supported through\nthe MutableMap interface."
                ],
                "code": ["interface Map<K, out V>"]
              },
              {
                "name": "MatchGroup",
                "description": [
                  "Represents the results from a single capturing group within a MatchResult of Regex."
                ],
                "code": ["class MatchGroup", "data class MatchGroup"]
              },
              {
                "name": "MatchGroupCollection",
                "description": [
                  "Represents a collection of captured groups in a single match of a regular expression."
                ],
                "code": [
                  "interface MatchGroupCollection : Collection<MatchGroup?>"
                ]
              },
              {
                "name": "MatchNamedGroupCollection",
                "description": [
                  "Extends MatchGroupCollection by introducing a way to get matched groups by name, when regex supports it."
                ],
                "code": [
                  "interface MatchNamedGroupCollection : MatchGroupCollection"
                ]
              },
              {
                "name": "MatchResult",
                "description": [
                  "Represents the results from a single regular expression match."
                ],
                "code": ["interface MatchResult"]
              },
              {
                "name": "MediaDeviceInfo",
                "description": [
                  "Exposes the JavaScript MediaDeviceInfo to Kotlin"
                ],
                "code": ["abstract class MediaDeviceInfo"]
              },
              {
                "name": "MediaDeviceKind",
                "description": [],
                "code": ["interface MediaDeviceKind"]
              },
              {
                "name": "MediaEncryptedEventInit",
                "description": [],
                "code": ["interface MediaEncryptedEventInit : EventInit"]
              },
              {
                "name": "MediaError",
                "description": ["Exposes the JavaScript MediaError to Kotlin"],
                "code": ["abstract class MediaError"]
              },
              {
                "name": "MediaKeyMessageEventInit",
                "description": [],
                "code": ["interface MediaKeyMessageEventInit : EventInit"]
              },
              {
                "name": "MediaKeyMessageType",
                "description": [],
                "code": ["interface MediaKeyMessageType"]
              },
              {
                "name": "MediaKeys",
                "description": ["Exposes the JavaScript MediaKeys to Kotlin"],
                "code": ["abstract class MediaKeys"]
              },
              {
                "name": "MediaKeySessionType",
                "description": [],
                "code": ["interface MediaKeySessionType"]
              },
              {
                "name": "MediaKeysRequirement",
                "description": [],
                "code": ["interface MediaKeysRequirement"]
              },
              {
                "name": "MediaKeyStatus",
                "description": [],
                "code": ["interface MediaKeyStatus"]
              },
              {
                "name": "MediaKeyStatusMap",
                "description": [
                  "Exposes the JavaScript MediaKeyStatusMap to Kotlin"
                ],
                "code": ["abstract class MediaKeyStatusMap"]
              },
              {
                "name": "MediaKeySystemAccess",
                "description": [
                  "Exposes the JavaScript MediaKeySystemAccess to Kotlin"
                ],
                "code": ["abstract class MediaKeySystemAccess"]
              },
              {
                "name": "MediaKeySystemConfiguration",
                "description": [
                  "Exposes the JavaScript MediaKeySystemConfiguration to Kotlin"
                ],
                "code": ["interface MediaKeySystemConfiguration"]
              },
              {
                "name": "MediaKeySystemMediaCapability",
                "description": [],
                "code": ["interface MediaKeySystemMediaCapability"]
              },
              {
                "name": "MediaList",
                "description": [],
                "code": ["abstract class MediaList : ItemArrayLike<String>"]
              },
              {
                "name": "MediaProvider",
                "description": [],
                "code": ["interface MediaProvider"]
              },
              {
                "name": "MediaQueryListEventInit",
                "description": [],
                "code": ["interface MediaQueryListEventInit : EventInit"]
              },
              {
                "name": "MediaStreamConstraints",
                "description": [
                  "Exposes the JavaScript MediaStreamConstraints to Kotlin"
                ],
                "code": ["interface MediaStreamConstraints"]
              },
              {
                "name": "MediaStreamTrackEventInit",
                "description": [],
                "code": ["interface MediaStreamTrackEventInit : EventInit"]
              },
              {
                "name": "MediaStreamTrackState",
                "description": [],
                "code": ["interface MediaStreamTrackState"]
              },
              {
                "name": "MediaTrackCapabilities",
                "description": [],
                "code": ["interface MediaTrackCapabilities"]
              },
              {
                "name": "MediaTrackConstraints",
                "description": [
                  "Exposes the JavaScript MediaTrackConstraints to Kotlin"
                ],
                "code": [
                  "interface MediaTrackConstraints : MediaTrackConstraintSet"
                ]
              },
              {
                "name": "MediaTrackConstraintSet",
                "description": [],
                "code": ["interface MediaTrackConstraintSet"]
              },
              {
                "name": "MediaTrackSettings",
                "description": [
                  "Exposes the JavaScript MediaTrackSettings to Kotlin"
                ],
                "code": ["interface MediaTrackSettings"]
              },
              {
                "name": "MediaTrackSupportedConstraints",
                "description": [
                  "Exposes the JavaScript MediaTrackSupportedConstraints to Kotlin"
                ],
                "code": ["interface MediaTrackSupportedConstraints"]
              },
              {
                "name": "MemoryUsage",
                "description": [
                  "This class represents statistics of memory usage in one memory pool."
                ],
                "code": ["class MemoryUsage"]
              },
              {
                "name": "MessageChannel",
                "description": [
                  "Exposes the JavaScript MessageChannel to Kotlin"
                ],
                "code": ["open class MessageChannel"]
              },
              {
                "name": "MessageEventInit",
                "description": [],
                "code": ["interface MessageEventInit : EventInit"]
              },
              {
                "name": "Metadata",
                "description": [
                  "This annotation is present on any class file produced by the Kotlin compiler and is read by the compiler and reflection.\nParameters have very short JVM names on purpose: these names appear in all generated class files, and we'd like to reduce their size."
                ],
                "code": ["annotation class Metadata"]
              },
              {
                "name": "MimeType",
                "description": ["Exposes the JavaScript MimeType to Kotlin"],
                "code": ["abstract class MimeType"]
              },
              {
                "name": "MimeTypeArray",
                "description": [
                  "Exposes the JavaScript MimeTypeArray to Kotlin"
                ],
                "code": [
                  "abstract class MimeTypeArray : ItemArrayLike<MimeType>"
                ]
              },
              {
                "name": "MouseEventInit",
                "description": [],
                "code": ["interface MouseEventInit : EventModifierInit"]
              },
              {
                "name": "MustBeDocumented",
                "description": [
                  "This meta-annotation determines that an annotation is a part of public API and therefore should be included in the generated\ndocumentation for the element to which the annotation is applied."
                ],
                "code": ["annotation class MustBeDocumented"]
              },
              {
                "name": "MutableCollection",
                "description": [
                  "A generic collection of elements that supports adding and removing elements."
                ],
                "code": [
                  "interface MutableCollection<E> :     Collection<E>,     MutableIterable<E>"
                ]
              },
              {
                "name": "MutableData",
                "description": [
                  "Mutable concurrently accessible data buffer. Could be accessed from several workers simultaneously."
                ],
                "code": ["class MutableData"]
              },
              {
                "name": "MutableEntry",
                "description": [
                  "Represents a key/value pair held by a MutableMap."
                ],
                "code": ["interface MutableEntry<K, V> : Entry<K, V>"]
              },
              {
                "name": "MutableIterable",
                "description": [
                  "Classes that inherit from this interface can be represented as a sequence of elements that can\nbe iterated over and that supports removing elements during iteration."
                ],
                "code": ["interface MutableIterable<out T> : Iterable<T>"]
              },
              {
                "name": "MutableIterator",
                "description": [
                  "An iterator over a mutable collection. Provides the ability to remove elements while iterating."
                ],
                "code": ["interface MutableIterator<out T> : Iterator<T>"]
              },
              {
                "name": "MutableList",
                "description": [
                  "A generic ordered collection of elements that supports adding and removing elements."
                ],
                "code": [
                  "interface MutableList<E> : List<E>, MutableCollection<E>"
                ]
              },
              {
                "name": "MutableListIterator",
                "description": [
                  "An iterator over a mutable collection that supports indexed access. Provides the ability\nto add, modify and remove elements while iterating."
                ],
                "code": [
                  "interface MutableListIterator<T> :     ListIterator<T>,     MutableIterator<T>"
                ]
              },
              {
                "name": "MutableMap",
                "description": [
                  "A modifiable collection that holds pairs of objects (keys and values) and supports efficiently retrieving\nthe value corresponding to each key. Map keys are unique; the map holds only one value for each key."
                ],
                "code": ["interface MutableMap<K, V> : Map<K, V>"]
              },
              {
                "name": "MutableSet",
                "description": [
                  "A generic unordered collection of elements that does not support duplicate elements, and supports\nadding and removing elements."
                ],
                "code": [
                  "interface MutableSet<E> : Set<E>, MutableCollection<E>"
                ]
              },
              {
                "name": "MutationObserver",
                "description": [
                  "Exposes the JavaScript MutationObserver to Kotlin"
                ],
                "code": ["open class MutationObserver"]
              },
              {
                "name": "MutationObserverInit",
                "description": [
                  "Exposes the JavaScript MutationObserverInit to Kotlin"
                ],
                "code": ["interface MutationObserverInit"]
              },
              {
                "name": "MutationRecord",
                "description": [
                  "Exposes the JavaScript MutationRecord to Kotlin"
                ],
                "code": ["abstract class MutationRecord"]
              },
              {
                "name": "NamedNodeMap",
                "description": [
                  "Exposes the JavaScript NamedNodeMap to Kotlin"
                ],
                "code": ["abstract class NamedNodeMap : ItemArrayLike<Attr>"]
              },
              {
                "name": "NativeFreeablePlacement",
                "description": [],
                "code": ["interface NativeFreeablePlacement : NativePlacement"]
              },
              {
                "name": "nativeGetter",
                "description": [],
                "code": ["annotation class nativeGetter"]
              },
              {
                "name": "nativeHeap",
                "description": [],
                "code": ["object nativeHeap : NativeFreeablePlacement"]
              },
              {
                "name": "nativeInvoke",
                "description": [],
                "code": ["annotation class nativeInvoke"]
              },
              {
                "name": "NativePlacement",
                "description": [],
                "code": ["interface NativePlacement"]
              },
              {
                "name": "NativePointed",
                "description": [
                  "The entity which has an associated native pointer.\nSubtypes are supposed to represent interpretations of the pointed data or code."
                ],
                "code": ["open class NativePointed"]
              },
              {
                "name": "NativeRuntimeApi",
                "description": [
                  "This annotation marks the Kotlin/Native standard library API that tweaks\nor otherwise accesses the Kotlin runtime behavior."
                ],
                "code": ["annotation class NativeRuntimeApi"]
              },
              {
                "name": "nativeSetter",
                "description": [],
                "code": ["annotation class nativeSetter"]
              },
              {
                "name": "Navigator",
                "description": ["Exposes the JavaScript Navigator to Kotlin"],
                "code": [
                  "abstract class Navigator :     NavigatorID,     NavigatorLanguage,     NavigatorOnLine,     NavigatorContentUtils,     NavigatorCookies,     NavigatorPlugins,     NavigatorConcurrentHardware"
                ]
              },
              {
                "name": "NavigatorConcurrentHardware",
                "description": [
                  "Exposes the JavaScript NavigatorConcurrentHardware to Kotlin"
                ],
                "code": ["interface NavigatorConcurrentHardware"]
              },
              {
                "name": "NavigatorContentUtils",
                "description": [],
                "code": ["interface NavigatorContentUtils"]
              },
              {
                "name": "NavigatorCookies",
                "description": [],
                "code": ["interface NavigatorCookies"]
              },
              {
                "name": "NavigatorID",
                "description": ["Exposes the JavaScript NavigatorID to Kotlin"],
                "code": ["interface NavigatorID"]
              },
              {
                "name": "NavigatorLanguage",
                "description": [
                  "Exposes the JavaScript NavigatorLanguage to Kotlin"
                ],
                "code": ["interface NavigatorLanguage"]
              },
              {
                "name": "NavigatorOnLine",
                "description": [
                  "Exposes the JavaScript NavigatorOnLine to Kotlin"
                ],
                "code": ["interface NavigatorOnLine"]
              },
              {
                "name": "NavigatorPlugins",
                "description": [
                  "Exposes the JavaScript NavigatorPlugins to Kotlin"
                ],
                "code": ["interface NavigatorPlugins"]
              },
              {
                "name": "NodeFilter",
                "description": ["Exposes the JavaScript NodeFilter to Kotlin"],
                "code": ["interface NodeFilter"]
              },
              {
                "name": "NodeIterator",
                "description": [
                  "Exposes the JavaScript NodeIterator to Kotlin"
                ],
                "code": ["abstract class NodeIterator"]
              },
              {
                "name": "NodeList",
                "description": ["Exposes the JavaScript NodeList to Kotlin"],
                "code": ["abstract class NodeList : ItemArrayLike<Node>"]
              },
              {
                "name": "NonDocumentTypeChildNode",
                "description": [
                  "Exposes the JavaScript NonDocumentTypeChildNode to Kotlin"
                ],
                "code": ["interface NonDocumentTypeChildNode"]
              },
              {
                "name": "NonElementParentNode",
                "description": [],
                "code": ["interface NonElementParentNode"]
              },
              {
                "name": "Nothing",
                "description": [
                  "Nothing has no instances. You can use Nothing to represent \"a value that never exists\": for example,\nif a function has the return type of Nothing, it means that it never returns (always throws an exception)."
                ],
                "code": ["class Nothing"]
              },
              {
                "name": "NotificationAction",
                "description": [],
                "code": ["interface NotificationAction"]
              },
              {
                "name": "NotificationDirection",
                "description": [],
                "code": ["interface NotificationDirection"]
              },
              {
                "name": "NotificationEventInit",
                "description": [],
                "code": [
                  "interface NotificationEventInit : ExtendableEventInit"
                ]
              },
              {
                "name": "NotificationOptions",
                "description": [],
                "code": ["interface NotificationOptions"]
              },
              {
                "name": "NotificationPermission",
                "description": [],
                "code": ["interface NotificationPermission"]
              },
              {
                "name": "Number",
                "description": [
                  "Superclass for all platform classes representing numeric values."
                ],
                "code": ["abstract class Number"]
              },
              {
                "name": "ObjCAction",
                "description": [
                  "Makes Kotlin method in Objective-C class accessible through Objective-C dispatch\nto be used as action sent by control in UIKit or AppKit."
                ],
                "code": ["annotation class ObjCAction"]
              },
              {
                "name": "ObjCClass",
                "description": [],
                "code": ["interface ObjCClass : ObjCObject"]
              },
              {
                "name": "ObjCClassOf",
                "description": [],
                "code": ["interface ObjCClassOf<T : ObjCObject> : ObjCClass"]
              },
              {
                "name": "ObjCConstructor",
                "description": [],
                "code": ["annotation class ObjCConstructor"]
              },
              {
                "name": "ObjCDirect",
                "description": [],
                "code": ["annotation class ObjCDirect"]
              },
              {
                "name": "ObjCFactory",
                "description": [],
                "code": ["annotation class ObjCFactory"]
              },
              {
                "name": "ObjCMethod",
                "description": [],
                "code": ["annotation class ObjCMethod"]
              },
              {
                "name": "ObjCName",
                "description": [
                  "Instructs the Kotlin compiler to use a custom Objective-C and/or Swift name for this class, property, parameter or function."
                ],
                "code": ["annotation class ObjCName"]
              },
              {
                "name": "ObjCObject",
                "description": [],
                "code": ["interface ObjCObject"]
              },
              {
                "name": "ObjCObjectBase",
                "description": [],
                "code": ["abstract class ObjCObjectBase : ObjCObject"]
              },
              {
                "name": "ObjCOutlet",
                "description": [
                  "Makes Kotlin property in Objective-C class settable through Objective-C dispatch\nto be used as IB outlet."
                ],
                "code": ["annotation class ObjCOutlet"]
              },
              {
                "name": "ObjCProtocol",
                "description": [],
                "code": ["interface ObjCProtocol : ObjCObject"]
              },
              {
                "name": "ObservableProperty",
                "description": [
                  "Implements the core logic of a property delegate for a read/write property that calls callback functions when changed."
                ],
                "code": [
                  "abstract class ObservableProperty<V> :     ReadWriteProperty<Any?, V>"
                ]
              },
              {
                "name": "ObsoleteNativeApi",
                "description": [
                  "This annotation marks the Kotlin/Native standard library API that is considered obsolete and is being phased out."
                ],
                "code": ["annotation class ObsoleteNativeApi"]
              },
              {
                "name": "ObsoleteWorkersApi",
                "description": ["Marks all Worker-related API as obsolete."],
                "code": ["annotation class ObsoleteWorkersApi"]
              },
              {
                "name": "OpenEndRange",
                "description": [
                  "Represents a range of values (for example, numbers or characters) where the upper bound is not included in the range.\nSee the Kotlin language documentation for more information."
                ],
                "code": ["interface OpenEndRange<T : Comparable<T>>"]
              },
              {
                "name": "OptIn",
                "description": [
                  "Allows to use the API denoted by the given markers in the annotated file, declaration, or expression.\nIf a declaration is annotated with OptIn, its usages are not required to opt in to that API."
                ],
                "code": ["annotation class OptIn"]
              },
              {
                "name": "OptionalExpectation",
                "description": [
                  "Marks an expected annotation class that it isn't required to have actual counterparts in all platforms."
                ],
                "code": ["annotation class OptionalExpectation"]
              },
              {
                "name": "OverconstrainedErrorEventInit",
                "description": [],
                "code": ["interface OverconstrainedErrorEventInit : EventInit"]
              },
              {
                "name": "OverloadResolutionByLambdaReturnType",
                "description": [
                  "Enables overload selection based on the type of the value returned from lambda argument."
                ],
                "code": [
                  "annotation class OverloadResolutionByLambdaReturnType"
                ]
              },
              {
                "name": "PageTransitionEventInit",
                "description": [],
                "code": ["interface PageTransitionEventInit : EventInit"]
              },
              {
                "name": "Pair",
                "description": ["Represents a generic pair of two values."],
                "code": ["data class Pair<out A, out B> : Serializable"]
              },
              {
                "name": "ParameterName",
                "description": [
                  "Annotates type arguments of functional type and holds corresponding parameter name specified by the user in type declaration (if any)."
                ],
                "code": ["annotation class ParameterName"]
              },
              {
                "name": "ParentNode",
                "description": ["Exposes the JavaScript ParentNode to Kotlin"],
                "code": ["interface ParentNode"]
              },
              {
                "name": "Path2D",
                "description": ["Exposes the JavaScript Path2D to Kotlin"],
                "code": ["open class Path2D : CanvasPath"]
              },
              {
                "name": "PerformanceNavigation",
                "description": [
                  "Exposes the JavaScript PerformanceNavigation to Kotlin"
                ],
                "code": ["abstract class PerformanceNavigation"]
              },
              {
                "name": "PerformanceTiming",
                "description": [
                  "Exposes the JavaScript PerformanceTiming to Kotlin"
                ],
                "code": ["abstract class PerformanceTiming"]
              },
              {
                "name": "Pinned",
                "description": [],
                "code": ["data class Pinned<out T : Any>"]
              },
              {
                "name": "Platform",
                "description": [
                  "Object describing the current platform program executes upon."
                ],
                "code": ["object Platform"]
              },
              {
                "name": "Plugin",
                "description": ["Exposes the JavaScript Plugin to Kotlin"],
                "code": ["abstract class Plugin : ItemArrayLike<MimeType>"]
              },
              {
                "name": "PluginArray",
                "description": ["Exposes the JavaScript PluginArray to Kotlin"],
                "code": ["abstract class PluginArray : ItemArrayLike<Plugin>"]
              },
              {
                "name": "PointerEventInit",
                "description": [],
                "code": ["interface PointerEventInit : MouseEventInit"]
              },
              {
                "name": "PopStateEventInit",
                "description": [],
                "code": ["interface PopStateEventInit : EventInit"]
              },
              {
                "name": "PremultiplyAlpha",
                "description": [],
                "code": ["interface PremultiplyAlpha"]
              },
              {
                "name": "ProgressEventInit",
                "description": [],
                "code": ["interface ProgressEventInit : EventInit"]
              },
              {
                "name": "Promise",
                "description": [
                  "Exposes the JavaScript Promise object to Kotlin."
                ],
                "code": ["open class Promise<out T>"]
              },
              {
                "name": "PromiseRejectionEventInit",
                "description": [],
                "code": ["interface PromiseRejectionEventInit : EventInit"]
              },
              {
                "name": "PropertyDelegateProvider",
                "description": [
                  "Base interface that can be used for implementing property delegate providers."
                ],
                "code": ["fun interface PropertyDelegateProvider<in T, out D>"]
              },
              {
                "name": "PublishedApi",
                "description": [
                  "When applied to a class or a member with internal visibility allows to use it from public inline functions and\nmakes it effectively public."
                ],
                "code": ["annotation class PublishedApi"]
              },
              {
                "name": "PurelyImplements",
                "description": [
                  "Instructs the Kotlin compiler to treat annotated Java class as pure implementation of given Kotlin interface.\n\"Pure\" means here that each type parameter of class becomes non-platform type argument of that interface."
                ],
                "code": ["annotation class PurelyImplements"]
              },
              {
                "name": "Random",
                "description": [
                  "An abstract class that is implemented by random number generator algorithms."
                ],
                "code": ["abstract class Random"]
              },
              {
                "name": "RandomAccess",
                "description": [
                  "Marker interface indicating that the List implementation supports fast indexed access."
                ],
                "code": [
                  "interface RandomAccess",
                  "typealias RandomAccess = RandomAccess"
                ]
              },
              {
                "name": "Range",
                "description": ["Exposes the JavaScript Range to Kotlin"],
                "code": ["open class Range"]
              },
              {
                "name": "ReadOnlyProperty",
                "description": [
                  "Base interface that can be used for implementing property delegates of read-only properties."
                ],
                "code": ["fun interface ReadOnlyProperty<in T, out V>"]
              },
              {
                "name": "ReadWriteProperty",
                "description": [
                  "Base interface that can be used for implementing property delegates of read-write properties."
                ],
                "code": [
                  "interface ReadWriteProperty<in T, V> : ReadOnlyProperty<T, V>"
                ]
              },
              {
                "name": "ReadyState",
                "description": [],
                "code": ["interface ReadyState"]
              },
              {
                "name": "RefinesInSwift",
                "description": [
                  "Meta-annotation that instructs the Kotlin compiler to mark the annotated function or property as\nswift_private in the generated Objective-C API."
                ],
                "code": ["annotation class RefinesInSwift"]
              },
              {
                "name": "Regex",
                "description": [
                  "Represents a compiled regular expression.\nProvides functions to match strings in text with a pattern, replace the found occurrences and split text around matches."
                ],
                "code": ["class Regex", "class Regex : Serializable"]
              },
              {
                "name": "RegExp",
                "description": [
                  "Exposes the JavaScript RegExp object to Kotlin."
                ],
                "code": ["class RegExp"]
              },
              {
                "name": "RegExpMatch",
                "description": ["Represents the return value of RegExp.exec."],
                "code": ["interface RegExpMatch"]
              },
              {
                "name": "RegistrationOptions",
                "description": [],
                "code": ["interface RegistrationOptions"]
              },
              {
                "name": "RelatedEventInit",
                "description": [],
                "code": ["interface RelatedEventInit : EventInit"]
              },
              {
                "name": "RenderingContext",
                "description": [],
                "code": ["interface RenderingContext"]
              },
              {
                "name": "Repeatable",
                "description": [
                  "This meta-annotation determines that an annotation is applicable twice or more on a single code element"
                ],
                "code": ["annotation class Repeatable"]
              },
              {
                "name": "ReplaceWith",
                "description": [
                  "Specifies a code fragment that can be used to replace a deprecated function, property or class. Tools such\nas IDEs can automatically apply the replacements specified through this annotation."
                ],
                "code": ["annotation class ReplaceWith"]
              },
              {
                "name": "Request",
                "description": ["Exposes the JavaScript Request to Kotlin"],
                "code": ["open class Request : Body"]
              },
              {
                "name": "RequestCache",
                "description": [],
                "code": ["interface RequestCache"]
              },
              {
                "name": "RequestCredentials",
                "description": [],
                "code": ["interface RequestCredentials"]
              },
              {
                "name": "RequestDestination",
                "description": [],
                "code": ["interface RequestDestination"]
              },
              {
                "name": "RequestInit",
                "description": [],
                "code": ["interface RequestInit"]
              },
              {
                "name": "RequestMode",
                "description": [],
                "code": ["interface RequestMode"]
              },
              {
                "name": "RequestRedirect",
                "description": [],
                "code": ["interface RequestRedirect"]
              },
              {
                "name": "RequestType",
                "description": [],
                "code": ["interface RequestType"]
              },
              {
                "name": "RequiresOptIn",
                "description": [
                  "Signals that the annotated annotation class is a marker of an API that requires an explicit opt-in."
                ],
                "code": ["annotation class RequiresOptIn"]
              },
              {
                "name": "ResizeQuality",
                "description": [],
                "code": ["interface ResizeQuality"]
              },
              {
                "name": "Response",
                "description": ["Exposes the JavaScript Response to Kotlin"],
                "code": ["open class Response : Body"]
              },
              {
                "name": "ResponseInit",
                "description": [],
                "code": ["interface ResponseInit"]
              },
              {
                "name": "ResponseType",
                "description": [],
                "code": ["interface ResponseType"]
              },
              {
                "name": "RestrictsSuspension",
                "description": [
                  "Classes and interfaces marked with this annotation are restricted when used as receivers for extension\nsuspend functions. These suspend extensions can only invoke other member or extension suspend functions on this particular\nreceiver and are restricted from calling arbitrary suspension functions."
                ],
                "code": ["annotation class RestrictsSuspension"]
              },
              {
                "name": "Result",
                "description": [
                  "A discriminated union that encapsulates a successful outcome with a value of type T\nor a failure with an arbitrary Throwable exception."
                ],
                "code": ["class Result<out T> : Serializable"]
              },
              {
                "name": "Retain",
                "description": [
                  "Preserve the function entry point during global optimizations."
                ],
                "code": ["annotation class Retain"]
              },
              {
                "name": "RetainForTarget",
                "description": [
                  "Preserve the function entry point during global optimizations, only for the given target."
                ],
                "code": ["annotation class RetainForTarget"]
              },
              {
                "name": "Retention",
                "description": [
                  "This meta-annotation determines whether an annotation is stored in binary output and visible for reflection. By default, both are true."
                ],
                "code": ["annotation class Retention"]
              },
              {
                "name": "Returns",
                "description": [
                  "Describes a situation when a function returns normally with a given return value."
                ],
                "code": ["interface Returns : SimpleEffect"]
              },
              {
                "name": "ReturnsNotNull",
                "description": [
                  "Describes a situation when a function returns normally with any non-null return value."
                ],
                "code": ["interface ReturnsNotNull : SimpleEffect"]
              },
              {
                "name": "RootSetStatistics",
                "description": [
                  "This class represents statistics of the root set for garbage collector run, separated by root set pools.\nThese nodes are assumed to be used, even if there are no references for them."
                ],
                "code": ["class RootSetStatistics"]
              },
              {
                "name": "Screen",
                "description": ["Exposes the JavaScript Screen to Kotlin"],
                "code": ["abstract class Screen"]
              },
              {
                "name": "ScrollBehavior",
                "description": [],
                "code": ["interface ScrollBehavior"]
              },
              {
                "name": "ScrollIntoViewOptions",
                "description": [],
                "code": ["interface ScrollIntoViewOptions : ScrollOptions"]
              },
              {
                "name": "ScrollLogicalPosition",
                "description": [],
                "code": ["interface ScrollLogicalPosition"]
              },
              {
                "name": "ScrollOptions",
                "description": [],
                "code": ["interface ScrollOptions"]
              },
              {
                "name": "ScrollRestoration",
                "description": [],
                "code": ["interface ScrollRestoration"]
              },
              {
                "name": "ScrollToOptions",
                "description": [
                  "Exposes the JavaScript ScrollToOptions to Kotlin"
                ],
                "code": ["interface ScrollToOptions : ScrollOptions"]
              },
              {
                "name": "SelectionMode",
                "description": [],
                "code": ["interface SelectionMode"]
              },
              {
                "name": "Sequence",
                "description": [
                  "A sequence that returns values through its iterator. The values are evaluated lazily, and the sequence\nis potentially infinite."
                ],
                "code": ["interface Sequence<out T>"]
              },
              {
                "name": "SequenceScope",
                "description": [
                  "The scope for yielding values of a Sequence or an Iterator, provides yield and yieldAll suspension functions."
                ],
                "code": ["abstract class SequenceScope<in T>"]
              },
              {
                "name": "ServiceWorkerMessageEventInit",
                "description": [],
                "code": ["interface ServiceWorkerMessageEventInit : EventInit"]
              },
              {
                "name": "ServiceWorkerState",
                "description": [],
                "code": ["interface ServiceWorkerState"]
              },
              {
                "name": "Set",
                "description": [
                  "A generic unordered collection of elements that does not support duplicate elements.\nMethods in this interface support only read-only access to the set;\nread/write access is supported through the MutableSet interface."
                ],
                "code": ["interface Set<out E> : Collection<E>"]
              },
              {
                "name": "Setter",
                "description": [
                  "Setter of the property is a set method declared alongside the property."
                ],
                "code": [
                  "interface Setter<V> : KProperty.Accessor<V>, KFunction<Unit>"
                ]
              },
              {
                "name": "Setter",
                "description": [
                  "Setter of the property is a set method declared alongside the property."
                ],
                "code": [
                  "interface Setter<V> : KMutableProperty.Setter<V>, (V) -> Unit"
                ]
              },
              {
                "name": "Setter",
                "description": [
                  "Setter of the property is a set method declared alongside the property."
                ],
                "code": [
                  "interface Setter<T, V> :     KMutableProperty.Setter<V>,     (T, V) -> Unit"
                ]
              },
              {
                "name": "Setter",
                "description": [
                  "Setter of the property is a set method declared alongside the property."
                ],
                "code": [
                  "interface Setter<D, E, V> :     KMutableProperty.Setter<V>,     (D, E, V) -> Unit"
                ]
              },
              {
                "name": "Settings",
                "description": [],
                "code": ["interface Settings"]
              },
              {
                "name": "ShadowAnimation",
                "description": [],
                "code": ["open class ShadowAnimation"]
              },
              {
                "name": "ShadowRootInit",
                "description": [],
                "code": ["interface ShadowRootInit"]
              },
              {
                "name": "ShadowRootMode",
                "description": [],
                "code": ["interface ShadowRootMode"]
              },
              {
                "name": "SharedImmutable",
                "description": [
                  "Note: this annotation has effect only in Kotlin/Native with legacy memory manager."
                ],
                "code": ["annotation class SharedImmutable"]
              },
              {
                "name": "ShortArray",
                "description": [
                  "An array of shorts. When targeting the JVM, instances of this class are represented as short[]."
                ],
                "code": ["class ShortArray"]
              },
              {
                "name": "ShortIterator",
                "description": [
                  "An iterator over a sequence of values of type Short."
                ],
                "code": ["abstract class ShortIterator : Iterator<Short>"]
              },
              {
                "name": "ShouldRefineInSwift",
                "description": [
                  "Instructs the Kotlin compiler to mark this function or property as swift_private in the generated Objective-C API."
                ],
                "code": ["annotation class ShouldRefineInSwift"]
              },
              {
                "name": "SimpleEffect",
                "description": [
                  "An effect that can be observed after a function invocation."
                ],
                "code": ["interface SimpleEffect : Effect"]
              },
              {
                "name": "SinceKotlin",
                "description": [
                  "Specifies the first version of Kotlin where a declaration has appeared.\nUsing the declaration and specifying an older API version (via the -api-version command line option) will result in an error."
                ],
                "code": ["annotation class SinceKotlin"]
              },
              {
                "name": "SkiaRefCnt",
                "description": [],
                "code": ["interface SkiaRefCnt"]
              },
              {
                "name": "Slotable",
                "description": ["Exposes the JavaScript Slotable to Kotlin"],
                "code": ["interface Slotable"]
              },
              {
                "name": "StableRef",
                "description": [],
                "code": ["class StableRef<out T : Any>"]
              },
              {
                "name": "Storage",
                "description": ["Exposes the JavaScript Storage to Kotlin"],
                "code": ["abstract class Storage"]
              },
              {
                "name": "StorageEventInit",
                "description": [],
                "code": ["interface StorageEventInit : EventInit"]
              },
              {
                "name": "Strictfp",
                "description": [
                  "Marks the JVM method generated from the annotated function as strictfp, meaning that the precision\nof floating point operations performed inside the method needs to be restricted in order to\nachieve better portability."
                ],
                "code": ["annotation class Strictfp"]
              },
              {
                "name": "String",
                "description": [
                  "The String class represents character strings. All string literals in Kotlin programs, such as \"abc\", are\nimplemented as instances of this class."
                ],
                "code": ["class String : Comparable<String>, CharSequence"]
              },
              {
                "name": "StringBuilder",
                "description": ["A mutable sequence of characters."],
                "code": [
                  "class StringBuilder : Appendable, CharSequence",
                  "typealias StringBuilder = StringBuilder",
                  "class StringBuilder : CharSequence, Appendable"
                ]
              },
              {
                "name": "StyleSheet",
                "description": ["Exposes the JavaScript StyleSheet to Kotlin"],
                "code": ["abstract class StyleSheet"]
              },
              {
                "name": "StyleSheetList",
                "description": [
                  "Exposes the JavaScript StyleSheetList to Kotlin"
                ],
                "code": [
                  "abstract class StyleSheetList : ItemArrayLike<StyleSheet>"
                ]
              },
              {
                "name": "SubclassOptInRequired",
                "description": [
                  "Annotation that marks open for subclassing classes and interfaces, and makes implementation\nand extension of such declarations as requiring an explicit opt-in."
                ],
                "code": ["annotation class SubclassOptInRequired"]
              },
              {
                "name": "Suppress",
                "description": [
                  "Suppresses the given compilation warnings in the annotated element."
                ],
                "code": ["annotation class Suppress"]
              },
              {
                "name": "SuspendFunction",
                "description": [
                  "Represents a value of a functional type, such as a lambda, an anonymous function or a function reference."
                ],
                "code": ["interface SuspendFunction<out R>"]
              },
              {
                "name": "SVGAngle",
                "description": ["Exposes the JavaScript SVGAngle to Kotlin"],
                "code": ["abstract class SVGAngle"]
              },
              {
                "name": "SVGAnimatedAngle",
                "description": [
                  "Exposes the JavaScript SVGAnimatedAngle to Kotlin"
                ],
                "code": ["abstract class SVGAnimatedAngle"]
              },
              {
                "name": "SVGAnimatedBoolean",
                "description": [
                  "Exposes the JavaScript SVGAnimatedBoolean to Kotlin"
                ],
                "code": ["abstract class SVGAnimatedBoolean"]
              },
              {
                "name": "SVGAnimatedEnumeration",
                "description": [
                  "Exposes the JavaScript SVGAnimatedEnumeration to Kotlin"
                ],
                "code": ["abstract class SVGAnimatedEnumeration"]
              },
              {
                "name": "SVGAnimatedInteger",
                "description": [
                  "Exposes the JavaScript SVGAnimatedInteger to Kotlin"
                ],
                "code": ["abstract class SVGAnimatedInteger"]
              },
              {
                "name": "SVGAnimatedLength",
                "description": [
                  "Exposes the JavaScript SVGAnimatedLength to Kotlin"
                ],
                "code": ["abstract class SVGAnimatedLength"]
              },
              {
                "name": "SVGAnimatedLengthList",
                "description": [
                  "Exposes the JavaScript SVGAnimatedLengthList to Kotlin"
                ],
                "code": ["abstract class SVGAnimatedLengthList"]
              },
              {
                "name": "SVGAnimatedNumber",
                "description": [
                  "Exposes the JavaScript SVGAnimatedNumber to Kotlin"
                ],
                "code": ["abstract class SVGAnimatedNumber"]
              },
              {
                "name": "SVGAnimatedNumberList",
                "description": [
                  "Exposes the JavaScript SVGAnimatedNumberList to Kotlin"
                ],
                "code": ["abstract class SVGAnimatedNumberList"]
              },
              {
                "name": "SVGAnimatedPoints",
                "description": [
                  "Exposes the JavaScript SVGAnimatedPoints to Kotlin"
                ],
                "code": ["interface SVGAnimatedPoints"]
              },
              {
                "name": "SVGAnimatedPreserveAspectRatio",
                "description": [
                  "Exposes the JavaScript SVGAnimatedPreserveAspectRatio to Kotlin"
                ],
                "code": ["abstract class SVGAnimatedPreserveAspectRatio"]
              },
              {
                "name": "SVGAnimatedRect",
                "description": [
                  "Exposes the JavaScript SVGAnimatedRect to Kotlin"
                ],
                "code": ["abstract class SVGAnimatedRect"]
              },
              {
                "name": "SVGAnimatedString",
                "description": [
                  "Exposes the JavaScript SVGAnimatedString to Kotlin"
                ],
                "code": ["abstract class SVGAnimatedString"]
              },
              {
                "name": "SVGAnimatedTransformList",
                "description": [
                  "Exposes the JavaScript SVGAnimatedTransformList to Kotlin"
                ],
                "code": ["abstract class SVGAnimatedTransformList"]
              },
              {
                "name": "SVGBoundingBoxOptions",
                "description": [],
                "code": ["interface SVGBoundingBoxOptions"]
              },
              {
                "name": "SVGElementInstance",
                "description": [],
                "code": ["interface SVGElementInstance"]
              },
              {
                "name": "SVGFitToViewBox",
                "description": [],
                "code": ["interface SVGFitToViewBox"]
              },
              {
                "name": "SVGLength",
                "description": ["Exposes the JavaScript SVGLength to Kotlin"],
                "code": ["abstract class SVGLength"]
              },
              {
                "name": "SVGLengthList",
                "description": [
                  "Exposes the JavaScript SVGLengthList to Kotlin"
                ],
                "code": ["abstract class SVGLengthList"]
              },
              {
                "name": "SVGNameList",
                "description": [],
                "code": ["abstract class SVGNameList"]
              },
              {
                "name": "SVGNumber",
                "description": ["Exposes the JavaScript SVGNumber to Kotlin"],
                "code": ["abstract class SVGNumber"]
              },
              {
                "name": "SVGNumberList",
                "description": [
                  "Exposes the JavaScript SVGNumberList to Kotlin"
                ],
                "code": ["abstract class SVGNumberList"]
              },
              {
                "name": "SVGPointList",
                "description": [],
                "code": ["abstract class SVGPointList"]
              },
              {
                "name": "SVGPreserveAspectRatio",
                "description": [
                  "Exposes the JavaScript SVGPreserveAspectRatio to Kotlin"
                ],
                "code": ["abstract class SVGPreserveAspectRatio"]
              },
              {
                "name": "SVGStringList",
                "description": [
                  "Exposes the JavaScript SVGStringList to Kotlin"
                ],
                "code": ["abstract class SVGStringList"]
              },
              {
                "name": "SVGTests",
                "description": ["Exposes the JavaScript SVGTests to Kotlin"],
                "code": ["interface SVGTests"]
              },
              {
                "name": "SVGTransform",
                "description": [
                  "Exposes the JavaScript SVGTransform to Kotlin"
                ],
                "code": ["abstract class SVGTransform"]
              },
              {
                "name": "SVGTransformList",
                "description": [
                  "Exposes the JavaScript SVGTransformList to Kotlin"
                ],
                "code": ["abstract class SVGTransformList"]
              },
              {
                "name": "SVGUnitTypes",
                "description": [
                  "Exposes the JavaScript SVGUnitTypes to Kotlin"
                ],
                "code": ["interface SVGUnitTypes"]
              },
              {
                "name": "SVGURIReference",
                "description": [
                  "Exposes the JavaScript SVGURIReference to Kotlin"
                ],
                "code": ["interface SVGURIReference"]
              },
              {
                "name": "SVGZoomAndPan",
                "description": [
                  "Exposes the JavaScript SVGZoomAndPan to Kotlin"
                ],
                "code": ["interface SVGZoomAndPan"]
              },
              {
                "name": "SweepStatistics",
                "description": [
                  "This class represents statistics of sweeping in one memory pool."
                ],
                "code": ["class SweepStatistics"]
              },
              {
                "name": "SymbolName",
                "description": [
                  "This is a dangerous deprecated and internal annotation. Please avoid using it."
                ],
                "code": ["annotation class SymbolName"]
              },
              {
                "name": "Synchronized",
                "description": [
                  "Marks the JVM method generated from the annotated function as synchronized, meaning that the method\nwill be protected from concurrent execution by multiple threads by the monitor of the instance (or,\nfor static methods, the class) on which the method is defined."
                ],
                "code": [
                  "annotation class Synchronized",
                  "annotation class Synchronized"
                ]
              },
              {
                "name": "Target",
                "description": [
                  "This meta-annotation indicates the kinds of code elements which are possible targets of an annotation."
                ],
                "code": ["annotation class Target"]
              },
              {
                "name": "TexImageSource",
                "description": [],
                "code": ["interface TexImageSource"]
              },
              {
                "name": "TextMetrics",
                "description": ["Exposes the JavaScript TextMetrics to Kotlin"],
                "code": ["abstract class TextMetrics"]
              },
              {
                "name": "TextTrackCueList",
                "description": [],
                "code": ["abstract class TextTrackCueList"]
              },
              {
                "name": "TextTrackKind",
                "description": [],
                "code": ["interface TextTrackKind"]
              },
              {
                "name": "TextTrackMode",
                "description": [],
                "code": ["interface TextTrackMode"]
              },
              {
                "name": "ThreadLocal",
                "description": [
                  "Marks a top level property with a backing field or an object as thread local.\nThe object remains mutable and it is possible to change its state,\nbut every thread will have a distinct copy of this object,\nso changes in one thread are not reflected in another."
                ],
                "code": ["annotation class ThreadLocal"]
              },
              {
                "name": "Throwable",
                "description": [
                  "The base class for all errors and exceptions. Only instances of this class can be thrown or caught."
                ],
                "code": ["open class Throwable"]
              },
              {
                "name": "Throws",
                "description": [
                  "This annotation indicates what exceptions should be declared by a function when compiled to a platform method\nin Kotlin/JVM and Kotlin/Native."
                ],
                "code": ["annotation class Throws", "typealias Throws = Throws"]
              },
              {
                "name": "Throws",
                "description": [
                  "This annotation indicates what exceptions should be declared by a function when compiled to a JVM method."
                ],
                "code": ["annotation class Throws"]
              },
              {
                "name": "TimedValue",
                "description": [
                  "Data class representing a result of executing an action, along with the duration of elapsed time interval."
                ],
                "code": ["data class TimedValue<T>"]
              },
              {
                "name": "TimeMark",
                "description": [
                  "Represents a time point notched on a particular TimeSource. Remains bound to the time source it was taken from\nand allows querying for the duration of time elapsed from that point (see the function elapsedNow)."
                ],
                "code": ["interface TimeMark"]
              },
              {
                "name": "TimeRanges",
                "description": ["Exposes the JavaScript TimeRanges to Kotlin"],
                "code": ["abstract class TimeRanges"]
              },
              {
                "name": "TimeSource",
                "description": [
                  "A source of time for measuring time intervals."
                ],
                "code": ["interface TimeSource"]
              },
              {
                "name": "Touch",
                "description": ["Exposes the JavaScript Touch to Kotlin"],
                "code": ["abstract class Touch"]
              },
              {
                "name": "TouchList",
                "description": [],
                "code": ["abstract class TouchList : ItemArrayLike<Touch>"]
              },
              {
                "name": "TrackEventInit",
                "description": [],
                "code": ["interface TrackEventInit : EventInit"]
              },
              {
                "name": "Transient",
                "description": [
                  "Marks the JVM backing field of the annotated property as transient, meaning that it is not\npart of the default serialized form of the object."
                ],
                "code": ["annotation class Transient"]
              },
              {
                "name": "TreeWalker",
                "description": ["Exposes the JavaScript TreeWalker to Kotlin"],
                "code": ["abstract class TreeWalker"]
              },
              {
                "name": "Triple",
                "description": ["Represents a triad of values"],
                "code": [
                  "data class Triple<out A, out B, out C> : Serializable"
                ]
              },
              {
                "name": "Typography",
                "description": [
                  "Defines names for Unicode symbols used in proper Typography."
                ],
                "code": ["object Typography"]
              },
              {
                "name": "UByte",
                "description": [],
                "code": ["class UByte : Comparable<UByte>"]
              },
              {
                "name": "UByteArray",
                "description": [],
                "code": ["class UByteArray : Collection<UByte>"]
              },
              {
                "name": "UIEventInit",
                "description": [],
                "code": ["interface UIEventInit : EventInit"]
              },
              {
                "name": "UInt",
                "description": [],
                "code": ["class UInt : Comparable<UInt>"]
              },
              {
                "name": "Uint16Array",
                "description": ["Exposes the JavaScript Uint16Array to Kotlin"],
                "code": ["open class Uint16Array : ArrayBufferView"]
              },
              {
                "name": "Uint32Array",
                "description": ["Exposes the JavaScript Uint32Array to Kotlin"],
                "code": ["open class Uint32Array : ArrayBufferView"]
              },
              {
                "name": "Uint8Array",
                "description": ["Exposes the JavaScript Uint8Array to Kotlin"],
                "code": ["open class Uint8Array : ArrayBufferView"]
              },
              {
                "name": "Uint8ClampedArray",
                "description": [
                  "Exposes the JavaScript Uint8ClampedArray to Kotlin"
                ],
                "code": ["open class Uint8ClampedArray : ArrayBufferView"]
              },
              {
                "name": "UIntArray",
                "description": [],
                "code": ["class UIntArray : Collection<UInt>"]
              },
              {
                "name": "UIntProgression",
                "description": ["A progression of values of type UInt."],
                "code": ["open class UIntProgression : Iterable<UInt>"]
              },
              {
                "name": "ULong",
                "description": [],
                "code": ["class ULong : Comparable<ULong>"]
              },
              {
                "name": "ULongArray",
                "description": [],
                "code": ["class ULongArray : Collection<ULong>"]
              },
              {
                "name": "ULongProgression",
                "description": ["A progression of values of type ULong."],
                "code": ["open class ULongProgression : Iterable<ULong>"]
              },
              {
                "name": "ULongRange",
                "description": [],
                "code": ["interface ULongRange"]
              },
              {
                "name": "UnionAudioTrackOrTextTrackOrVideoTrack",
                "description": [],
                "code": ["interface UnionAudioTrackOrTextTrackOrVideoTrack"]
              },
              {
                "name": "UnionClientOrMessagePortOrServiceWorker",
                "description": [],
                "code": ["interface UnionClientOrMessagePortOrServiceWorker"]
              },
              {
                "name": "UnionElementOrHTMLCollection",
                "description": [],
                "code": ["interface UnionElementOrHTMLCollection"]
              },
              {
                "name": "UnionElementOrMouseEvent",
                "description": [],
                "code": ["interface UnionElementOrMouseEvent"]
              },
              {
                "name": "UnionElementOrProcessingInstruction",
                "description": [],
                "code": ["interface UnionElementOrProcessingInstruction"]
              },
              {
                "name": "UnionElementOrRadioNodeList",
                "description": [],
                "code": ["interface UnionElementOrRadioNodeList"]
              },
              {
                "name": "UnionHTMLOptGroupElementOrHTMLOptionElement",
                "description": [],
                "code": [
                  "interface UnionHTMLOptGroupElementOrHTMLOptionElement"
                ]
              },
              {
                "name": "UnionMessagePortOrServiceWorker",
                "description": [],
                "code": ["interface UnionMessagePortOrServiceWorker"]
              },
              {
                "name": "UnionMessagePortOrWindowProxy",
                "description": [],
                "code": ["interface UnionMessagePortOrWindowProxy"]
              },
              {
                "name": "Unit",
                "description": [
                  "The type with only one value: the Unit object. This type corresponds to the void type in Java."
                ],
                "code": ["object Unit"]
              },
              {
                "name": "UnsafeNumber",
                "description": [
                  "Marker for declarations that depend on numeric types of different bit width on at least two platforms."
                ],
                "code": ["annotation class UnsafeNumber"]
              },
              {
                "name": "UnsafeVariance",
                "description": ["Suppresses errors about variance conflict"],
                "code": ["annotation class UnsafeVariance"]
              },
              {
                "name": "URL",
                "description": ["Exposes the JavaScript URL to Kotlin"],
                "code": ["open class URL"]
              },
              {
                "name": "URLSearchParams",
                "description": [
                  "Exposes the JavaScript URLSearchParams to Kotlin"
                ],
                "code": ["open class URLSearchParams"]
              },
              {
                "name": "UShort",
                "description": [],
                "code": ["class UShort : Comparable<UShort>"]
              },
              {
                "name": "UShortArray",
                "description": [],
                "code": ["class UShortArray : Collection<UShort>"]
              },
              {
                "name": "ValidityState",
                "description": [
                  "Exposes the JavaScript ValidityState to Kotlin"
                ],
                "code": ["abstract class ValidityState"]
              },
              {
                "name": "Vector128",
                "description": [],
                "code": ["class Vector128"]
              },
              {
                "name": "VideoFacingModeEnum",
                "description": [],
                "code": ["interface VideoFacingModeEnum"]
              },
              {
                "name": "VideoResizeModeEnum",
                "description": [],
                "code": ["interface VideoResizeModeEnum"]
              },
              {
                "name": "VideoTrack",
                "description": ["Exposes the JavaScript VideoTrack to Kotlin"],
                "code": [
                  "abstract class VideoTrack :     UnionAudioTrackOrTextTrackOrVideoTrack"
                ]
              },
              {
                "name": "Volatile",
                "description": [
                  "Marks the JVM backing field of the annotated var property as volatile, meaning that reads and writes to this field\nare atomic and writes are always made visible to other threads. If another thread reads the value of this field (e.g. through its accessor),\nit sees not only that value, but all side effects that led to writing that value."
                ],
                "code": [
                  "annotation class Volatile",
                  "annotation class Volatile"
                ]
              },
              {
                "name": "Volatile",
                "description": [
                  "Marks the backing field of the annotated var property as volatile, meaning that reads and writes to this field\nare atomic and writes are always made visible to other threads. If another thread reads the value of this field (e.g. through its accessor),\nit sees not only that value, but all side effects that led to writing that value."
                ],
                "code": [
                  "annotation class Volatile",
                  "typealias Volatile = Volatile"
                ]
              },
              {
                "name": "WeakReference",
                "description": [
                  "Class WeakReference encapsulates weak reference to an object, which could be used to either\nretrieve a strong reference to an object, or return null, if object was already destroyed by\nthe memory manager."
                ],
                "code": ["class WeakReference<T : Any>"]
              },
              {
                "name": "WebGLActiveInfo",
                "description": [
                  "Exposes the JavaScript WebGLActiveInfo to Kotlin"
                ],
                "code": ["abstract class WebGLActiveInfo"]
              },
              {
                "name": "WebGLContextAttributes",
                "description": [],
                "code": ["interface WebGLContextAttributes"]
              },
              {
                "name": "WebGLContextEventInit",
                "description": [],
                "code": ["interface WebGLContextEventInit : EventInit"]
              },
              {
                "name": "WebGLObject",
                "description": [],
                "code": ["abstract class WebGLObject"]
              },
              {
                "name": "WebGLRenderingContext",
                "description": [
                  "Exposes the JavaScript WebGLRenderingContext to Kotlin"
                ],
                "code": [
                  "abstract class WebGLRenderingContext :     WebGLRenderingContextBase,     RenderingContext"
                ]
              },
              {
                "name": "WebGLRenderingContextBase",
                "description": [],
                "code": ["interface WebGLRenderingContextBase"]
              },
              {
                "name": "WebGLShaderPrecisionFormat",
                "description": [
                  "Exposes the JavaScript WebGLShaderPrecisionFormat to Kotlin"
                ],
                "code": ["abstract class WebGLShaderPrecisionFormat"]
              },
              {
                "name": "WebGLUniformLocation",
                "description": [
                  "Exposes the JavaScript WebGLUniformLocation to Kotlin"
                ],
                "code": ["abstract class WebGLUniformLocation"]
              },
              {
                "name": "WheelEventInit",
                "description": [],
                "code": ["interface WheelEventInit : MouseEventInit"]
              },
              {
                "name": "WindowEventHandlers",
                "description": [
                  "Exposes the JavaScript WindowEventHandlers to Kotlin"
                ],
                "code": ["interface WindowEventHandlers"]
              },
              {
                "name": "WindowLocalStorage",
                "description": [
                  "Exposes the JavaScript WindowLocalStorage to Kotlin"
                ],
                "code": ["interface WindowLocalStorage"]
              },
              {
                "name": "WindowOrWorkerGlobalScope",
                "description": [
                  "Exposes the JavaScript WindowOrWorkerGlobalScope to Kotlin"
                ],
                "code": ["interface WindowOrWorkerGlobalScope"]
              },
              {
                "name": "WindowSessionStorage",
                "description": [
                  "Exposes the JavaScript WindowSessionStorage to Kotlin"
                ],
                "code": ["interface WindowSessionStorage"]
              },
              { "name": "Worker", "description": [], "code": ["class Worker"] },
              {
                "name": "WorkerBoundReference",
                "description": [
                  "A shared reference to a Kotlin object that doesn't freeze the referred object when it gets frozen itself."
                ],
                "code": ["class WorkerBoundReference<out T : Any>"]
              },
              {
                "name": "WorkerLocation",
                "description": [
                  "Exposes the JavaScript WorkerLocation to Kotlin"
                ],
                "code": ["abstract class WorkerLocation"]
              },
              {
                "name": "WorkerNavigator",
                "description": [
                  "Exposes the JavaScript WorkerNavigator to Kotlin"
                ],
                "code": [
                  "abstract class WorkerNavigator :     NavigatorID,     NavigatorLanguage,     NavigatorOnLine,     NavigatorConcurrentHardware"
                ]
              },
              {
                "name": "WorkerOptions",
                "description": [],
                "code": ["interface WorkerOptions"]
              },
              {
                "name": "WorkerType",
                "description": [],
                "code": ["interface WorkerType"]
              },
              {
                "name": "XMLHttpRequestResponseType",
                "description": [],
                "code": ["interface XMLHttpRequestResponseType"]
              },
              {
                "name": "XMLSerializer",
                "description": [
                  "Exposes the JavaScript XMLSerializer to Kotlin"
                ],
                "code": ["open class XMLSerializer"]
              }
            ]
          }
        ]
      },
      {
        "name": "Array",
        "description": [
          "Represents an array (specifically, a Java array when targeting the JVM platform).\nArray instances can be created using the arrayOf, arrayOfNulls and emptyArray\nstandard library functions.\nSee Kotlin language documentation\nfor more information on arrays."
        ],
        "code": ["class Array<T>"],
        "url": "-array/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Creates a new array with the specified size, where each element is calculated by calling the specified\ninit function."
                ],
                "code": ["<init>(size: Int, init: (Int) -> T)"]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "size",
                "description": ["Returns the number of elements in the array."],
                "code": ["val size: Int"]
              }
            ]
          },
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "get",
                "description": [
                  "Returns the array element at the specified index. This method can be called using the\nindex operator."
                ],
                "code": ["operator fun get(index: Int): T"]
              },
              {
                "name": "iterator",
                "description": [
                  "Creates an Iterator for iterating over the elements of the array."
                ],
                "code": ["operator fun iterator(): Iterator<T>"]
              },
              {
                "name": "set",
                "description": [
                  "Sets the array element at the specified index to the specified value. This method can\nbe called using the index operator."
                ],
                "code": ["operator fun set(index: Int, value: T)"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "indices",
                "description": [
                  "Returns the range of valid indices for the array."
                ],
                "code": ["val <T> Array<out T>.indices: IntRange"]
              },
              {
                "name": "lastIndex",
                "description": ["Returns the last valid index for the array."],
                "code": ["val <T> Array<out T>.lastIndex: Int"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "all",
                "description": [
                  "Returns true if all elements match the given predicate."
                ],
                "code": [
                  "fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean"
                ]
              },
              {
                "name": "any",
                "description": [
                  "Returns true if array has at least one element.",
                  "Returns true if at least one element matches the given predicate."
                ],
                "code": [
                  "fun <T> Array<out T>.any(): Boolean",
                  "fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean"
                ]
              },
              {
                "name": "asIterable",
                "description": [
                  "Creates an Iterable instance that wraps the original array returning its elements when being iterated."
                ],
                "code": ["fun <T> Array<out T>.asIterable(): Iterable<T>"]
              },
              {
                "name": "asSequence",
                "description": [
                  "Creates a Sequence instance that wraps the original array returning its elements when being iterated."
                ],
                "code": ["fun <T> Array<out T>.asSequence(): Sequence<T>"]
              },
              {
                "name": "associate",
                "description": [
                  "Returns a Map containing key-value pairs provided by transform function\napplied to elements of the given array."
                ],
                "code": [
                  "fun <T, K, V> Array<out T>.associate(    transform: (T) -> Pair<K, V>): Map<K, V>"
                ]
              },
              {
                "name": "associateBy",
                "description": [
                  "Returns a Map containing the elements from the given array indexed by the key\nreturned from keySelector function applied to each element.",
                  "Returns a Map containing the values provided by valueTransform and indexed by keySelector functions applied to elements of the given array."
                ],
                "code": [
                  "fun <T, K> Array<out T>.associateBy(    keySelector: (T) -> K): Map<K, T>",
                  "fun <T, K, V> Array<out T>.associateBy(    keySelector: (T) -> K,     valueTransform: (T) -> V): Map<K, V>"
                ]
              },
              {
                "name": "associateByTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function applied to each element of the given array\nand value is the element itself.",
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function and\nand value is provided by the valueTransform function applied to elements of the given array."
                ],
                "code": [
                  "fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(    destination: M,     keySelector: (T) -> K): M",
                  "fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(    destination: M,     keySelector: (T) -> K,     valueTransform: (T) -> V): M"
                ]
              },
              {
                "name": "associateTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs\nprovided by transform function applied to each element of the given array."
                ],
                "code": [
                  "fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(    destination: M,     transform: (T) -> Pair<K, V>): M"
                ]
              },
              {
                "name": "associateWith",
                "description": [
                  "Returns a Map where keys are elements from the given array and values are\nproduced by the valueSelector function applied to each element."
                ],
                "code": [
                  "fun <K, V> Array<out K>.associateWith(    valueSelector: (K) -> V): Map<K, V>"
                ]
              },
              {
                "name": "associateWithTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs for each element of the given array,\nwhere key is the element itself and value is provided by the valueSelector function applied to that key."
                ],
                "code": [
                  "fun <K, V, M : MutableMap<in K, in V>> Array<out K>.associateWithTo(    destination: M,     valueSelector: (K) -> V): M"
                ]
              },
              {
                "name": "average",
                "description": [
                  "Returns an average value of elements in the array."
                ],
                "code": [
                  "fun Array<out Byte>.average(): Double",
                  "fun Array<out Short>.average(): Double",
                  "fun Array<out Int>.average(): Double",
                  "fun Array<out Long>.average(): Double",
                  "fun Array<out Float>.average(): Double",
                  "fun Array<out Double>.average(): Double"
                ]
              },
              {
                "name": "binarySearch",
                "description": [
                  "Searches the array or the range of the array for the provided element using the binary search algorithm.\nThe array is expected to be sorted according to the specified comparator, otherwise the result is undefined.",
                  "Searches the array or the range of the array for the provided element using the binary search algorithm.\nThe array is expected to be sorted, otherwise the result is undefined."
                ],
                "code": [
                  "fun <T> Array<out T>.binarySearch(    element: T,     comparator: Comparator<in T>,     fromIndex: Int = 0,     toIndex: Int = size): Int",
                  "fun <T> Array<out T>.binarySearch(    element: T,     fromIndex: Int = 0,     toIndex: Int = size): Int"
                ]
              },
              {
                "name": "component1",
                "description": ["Returns 1st element from the array."],
                "code": ["operator fun <T> Array<out T>.component1(): T"]
              },
              {
                "name": "component2",
                "description": ["Returns 2nd element from the array."],
                "code": ["operator fun <T> Array<out T>.component2(): T"]
              },
              {
                "name": "component3",
                "description": ["Returns 3rd element from the array."],
                "code": ["operator fun <T> Array<out T>.component3(): T"]
              },
              {
                "name": "component4",
                "description": ["Returns 4th element from the array."],
                "code": ["operator fun <T> Array<out T>.component4(): T"]
              },
              {
                "name": "component5",
                "description": ["Returns 5th element from the array."],
                "code": ["operator fun <T> Array<out T>.component5(): T"]
              },
              {
                "name": "contains",
                "description": [
                  "Returns true if element is found in the array."
                ],
                "code": [
                  "operator fun <T> Array<out T>.contains(element: T): Boolean"
                ]
              },
              {
                "name": "contentEquals",
                "description": [
                  "Returns true if the two specified arrays are structurally equal to one another,\ni.e. contain the same number of the same elements in the same order."
                ],
                "code": [
                  "infix fun <T> Array<out T>.contentEquals(    other: Array<out T>): Boolean"
                ]
              },
              {
                "name": "contentHashCode",
                "description": [
                  "Returns a hash code based on the contents of this array as if it is List."
                ],
                "code": ["fun <T> Array<out T>.contentHashCode(): Int"]
              },
              {
                "name": "contentToString",
                "description": [
                  "Returns a string representation of the contents of the specified array as if it is List."
                ],
                "code": ["fun <T> Array<out T>.contentToString(): String"]
              },
              {
                "name": "count",
                "description": [
                  "Returns the number of elements in this array.",
                  "Returns the number of elements matching the given predicate."
                ],
                "code": [
                  "fun <T> Array<out T>.count(): Int",
                  "fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int"
                ]
              },
              {
                "name": "distinct",
                "description": [
                  "Returns a list containing only distinct elements from the given array."
                ],
                "code": ["fun <T> Array<out T>.distinct(): List<T>"]
              },
              {
                "name": "distinctBy",
                "description": [
                  "Returns a list containing only elements from the given array\nhaving distinct keys returned by the given selector function."
                ],
                "code": [
                  "fun <T, K> Array<out T>.distinctBy(    selector: (T) -> K): List<T>"
                ]
              },
              {
                "name": "drop",
                "description": [
                  "Returns a list containing all elements except first n elements."
                ],
                "code": ["fun <T> Array<out T>.drop(n: Int): List<T>"]
              },
              {
                "name": "dropLast",
                "description": [
                  "Returns a list containing all elements except last n elements."
                ],
                "code": ["fun <T> Array<out T>.dropLast(n: Int): List<T>"]
              },
              {
                "name": "dropLastWhile",
                "description": [
                  "Returns a list containing all elements except last elements that satisfy the given predicate."
                ],
                "code": [
                  "fun <T> Array<out T>.dropLastWhile(    predicate: (T) -> Boolean): List<T>"
                ]
              },
              {
                "name": "dropWhile",
                "description": [
                  "Returns a list containing all elements except first elements that satisfy the given predicate."
                ],
                "code": [
                  "fun <T> Array<out T>.dropWhile(    predicate: (T) -> Boolean): List<T>"
                ]
              },
              {
                "name": "elementAtOrElse",
                "description": [
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
                ],
                "code": [
                  "fun <T> Array<out T>.elementAtOrElse(    index: Int,     defaultValue: (Int) -> T): T"
                ]
              },
              {
                "name": "elementAtOrNull",
                "description": [
                  "Returns an element at the given index or null if the index is out of bounds of this array."
                ],
                "code": ["fun <T> Array<out T>.elementAtOrNull(index: Int): T?"]
              },
              {
                "name": "filter",
                "description": [
                  "Returns a list containing only elements matching the given predicate."
                ],
                "code": [
                  "fun <T> Array<out T>.filter(    predicate: (T) -> Boolean): List<T>"
                ]
              },
              {
                "name": "filterIndexed",
                "description": [
                  "Returns a list containing only elements matching the given predicate."
                ],
                "code": [
                  "fun <T> Array<out T>.filterIndexed(    predicate: (index: Int, T) -> Boolean): List<T>"
                ]
              },
              {
                "name": "filterIndexedTo",
                "description": [
                  "Appends all elements matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(    destination: C,     predicate: (index: Int, T) -> Boolean): C"
                ]
              },
              {
                "name": "filterIsInstance",
                "description": [
                  "Returns a list containing all elements that are instances of specified type parameter R.",
                  "Returns a list containing all elements that are instances of specified class."
                ],
                "code": [
                  "fun <R> Array<*>.filterIsInstance(): List<R>",
                  "fun <R> Array<*>.filterIsInstance(klass: Class<R>): List<R>"
                ]
              },
              {
                "name": "filterIsInstanceTo",
                "description": [
                  "Appends all elements that are instances of specified type parameter R to the given destination.",
                  "Appends all elements that are instances of specified class to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(    destination: C): C",
                  "fun <C : MutableCollection<in R>, R> Array<*>.filterIsInstanceTo(    destination: C,     klass: Class<R>): C"
                ]
              },
              {
                "name": "filterNot",
                "description": [
                  "Returns a list containing all elements not matching the given predicate."
                ],
                "code": [
                  "fun <T> Array<out T>.filterNot(    predicate: (T) -> Boolean): List<T>"
                ]
              },
              {
                "name": "filterNotNull",
                "description": [
                  "Returns a list containing all elements that are not null."
                ],
                "code": ["fun <T : Any> Array<out T?>.filterNotNull(): List<T>"]
              },
              {
                "name": "filterNotNullTo",
                "description": [
                  "Appends all elements that are not null to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(    destination: C): C"
                ]
              },
              {
                "name": "filterNotTo",
                "description": [
                  "Appends all elements not matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(    destination: C,     predicate: (T) -> Boolean): C"
                ]
              },
              {
                "name": "filterTo",
                "description": [
                  "Appends all elements matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(    destination: C,     predicate: (T) -> Boolean): C"
                ]
              },
              {
                "name": "find",
                "description": [
                  "Returns the first element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun <T> Array<out T>.find(predicate: (T) -> Boolean): T?"
                ]
              },
              {
                "name": "findLast",
                "description": [
                  "Returns the last element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T?"
                ]
              },
              {
                "name": "first",
                "description": [
                  "Returns the first element.",
                  "Returns the first element matching the given predicate."
                ],
                "code": [
                  "fun <T> Array<out T>.first(): T",
                  "fun <T> Array<out T>.first(predicate: (T) -> Boolean): T"
                ]
              },
              {
                "name": "firstNotNullOf",
                "description": [
                  "Returns the first non-null value produced by transform function being applied to elements of this array in iteration order,\nor throws NoSuchElementException if no non-null value was produced."
                ],
                "code": [
                  "fun <T, R : Any> Array<out T>.firstNotNullOf(    transform: (T) -> R?): R"
                ]
              },
              {
                "name": "firstNotNullOfOrNull",
                "description": [
                  "Returns the first non-null value produced by transform function being applied to elements of this array in iteration order,\nor null if no non-null value was produced."
                ],
                "code": [
                  "fun <T, R : Any> Array<out T>.firstNotNullOfOrNull(    transform: (T) -> R?): R?"
                ]
              },
              {
                "name": "firstOrNull",
                "description": [
                  "Returns the first element, or null if the array is empty.",
                  "Returns the first element matching the given predicate, or null if element was not found."
                ],
                "code": [
                  "fun <T> Array<out T>.firstOrNull(): T?",
                  "fun <T> Array<out T>.firstOrNull(    predicate: (T) -> Boolean): T?"
                ]
              },
              {
                "name": "flatMap",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element of original array."
                ],
                "code": [
                  "fun <T, R> any_array<T>.flatMap(    transform: (T) -> Iterable<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexed",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element\nand its index in the original array."
                ],
                "code": [
                  "fun <T, R> any_array<T>.flatMapIndexed(    transform: (index: Int, T) -> Iterable<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexedTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each element\nand its index in the original array, to the given destination."
                ],
                "code": [
                  "fun <T, R, C : MutableCollection<in R>> any_array<T>.flatMapIndexedTo(    destination: C,     transform: (index: Int, T) -> Iterable<R>): C"
                ]
              },
              {
                "name": "flatMapTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each element of original array, to the given destination."
                ],
                "code": [
                  "fun <T, R, C : MutableCollection<in R>> any_array<T>.flatMapTo(    destination: C,     transform: (T) -> Iterable<R>): C"
                ]
              },
              {
                "name": "flatten",
                "description": [
                  "Returns a single list of all elements from all arrays in the given array."
                ],
                "code": ["fun <T> Array<out Array<out T>>.flatten(): List<T>"]
              },
              {
                "name": "fold",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun <T, R> Array<out T>.fold(    initial: R,     operation: (acc: R, T) -> R): R"
                ]
              },
              {
                "name": "foldIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element with its index in the original array."
                ],
                "code": [
                  "fun <T, R> Array<out T>.foldIndexed(    initial: R,     operation: (index: Int, acc: R, T) -> R): R"
                ]
              },
              {
                "name": "foldRight",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun <T, R> Array<out T>.foldRight(    initial: R,     operation: (T, acc: R) -> R): R"
                ]
              },
              {
                "name": "foldRightIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun <T, R> Array<out T>.foldRightIndexed(    initial: R,     operation: (index: Int, T, acc: R) -> R): R"
                ]
              },
              {
                "name": "forEach",
                "description": ["Performs the given action on each element."],
                "code": ["fun <T> Array<out T>.forEach(action: (T) -> Unit)"]
              },
              {
                "name": "forEachIndexed",
                "description": [
                  "Performs the given action on each element, providing sequential index with the element."
                ],
                "code": [
                  "fun <T> Array<out T>.forEachIndexed(    action: (index: Int, T) -> Unit)"
                ]
              },
              {
                "name": "getOrElse",
                "description": [
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
                ],
                "code": [
                  "fun <T> Array<out T>.getOrElse(    index: Int,     defaultValue: (Int) -> T): T"
                ]
              },
              {
                "name": "getOrNull",
                "description": [
                  "Returns an element at the given index or null if the index is out of bounds of this array."
                ],
                "code": ["fun <T> Array<out T>.getOrNull(index: Int): T?"]
              },
              {
                "name": "groupBy",
                "description": [
                  "Groups elements of the original array by the key returned by the given keySelector function\napplied to each element and returns a map where each group key is associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original array\nby the key returned by the given keySelector function applied to the element\nand returns a map where each group key is associated with a list of corresponding values."
                ],
                "code": [
                  "fun <T, K> Array<out T>.groupBy(    keySelector: (T) -> K): Map<K, List<T>>",
                  "fun <T, K, V> Array<out T>.groupBy(    keySelector: (T) -> K,     valueTransform: (T) -> V): Map<K, List<V>>"
                ]
              },
              {
                "name": "groupByTo",
                "description": [
                  "Groups elements of the original array by the key returned by the given keySelector function\napplied to each element and puts to the destination map each group key associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original array\nby the key returned by the given keySelector function applied to the element\nand puts to the destination map each group key associated with a list of corresponding values."
                ],
                "code": [
                  "fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(    destination: M,     keySelector: (T) -> K): M",
                  "fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(    destination: M,     keySelector: (T) -> K,     valueTransform: (T) -> V): M"
                ]
              },
              {
                "name": "groupingBy",
                "description": [
                  "Creates a Grouping source from an array to be used later with one of group-and-fold operations\nusing the specified keySelector function to extract a key from each element."
                ],
                "code": [
                  "fun <T, K> Array<out T>.groupingBy(    keySelector: (T) -> K): Grouping<T, K>"
                ]
              },
              {
                "name": "indexOf",
                "description": [
                  "Returns first index of element, or -1 if the array does not contain element."
                ],
                "code": ["fun <T> Array<out T>.indexOf(element: T): Int"]
              },
              {
                "name": "indexOfFirst",
                "description": [
                  "Returns index of the first element matching the given predicate, or -1 if the array does not contain such element."
                ],
                "code": [
                  "fun <T> Array<out T>.indexOfFirst(    predicate: (T) -> Boolean): Int"
                ]
              },
              {
                "name": "indexOfLast",
                "description": [
                  "Returns index of the last element matching the given predicate, or -1 if the array does not contain such element."
                ],
                "code": [
                  "fun <T> Array<out T>.indexOfLast(    predicate: (T) -> Boolean): Int"
                ]
              },
              {
                "name": "intersect",
                "description": [
                  "Returns a set containing all elements that are contained by both this array and the specified collection."
                ],
                "code": [
                  "infix fun <T> Array<out T>.intersect(    other: Iterable<T>): Set<T>"
                ]
              },
              {
                "name": "isArrayOf",
                "description": [
                  "Checks if array can contain element of type T."
                ],
                "code": ["fun <T : Any> Array<*>.isArrayOf(): Boolean"]
              },
              {
                "name": "isEmpty",
                "description": ["Returns true if the array is empty."],
                "code": ["fun <T> Array<out T>.isEmpty(): Boolean"]
              },
              {
                "name": "isNotEmpty",
                "description": ["Returns true if the array is not empty."],
                "code": ["fun <T> Array<out T>.isNotEmpty(): Boolean"]
              },
              {
                "name": "isNullOrEmpty",
                "description": [
                  "Returns true if this nullable array is either null or empty."
                ],
                "code": ["fun Array<*>?.isNullOrEmpty(): Boolean"]
              },
              {
                "name": "joinTo",
                "description": [
                  "Appends the string from all the elements separated using separator and using the given prefix and postfix if supplied."
                ],
                "code": [
                  "fun <T, A : Appendable> Array<out T>.joinTo(    buffer: A,     separator: CharSequence = \", \",     prefix: CharSequence = \"\",     postfix: CharSequence = \"\",     limit: Int = -1,     truncated: CharSequence = \"...\",     transform: ((T) -> CharSequence)? = null): A"
                ]
              },
              {
                "name": "joinToString",
                "description": [
                  "Creates a string from all the elements separated using separator and using the given prefix and postfix if supplied."
                ],
                "code": [
                  "fun <T> Array<out T>.joinToString(    separator: CharSequence = \", \",     prefix: CharSequence = \"\",     postfix: CharSequence = \"\",     limit: Int = -1,     truncated: CharSequence = \"...\",     transform: ((T) -> CharSequence)? = null): String"
                ]
              },
              {
                "name": "last",
                "description": [
                  "Returns the last element.",
                  "Returns the last element matching the given predicate."
                ],
                "code": [
                  "fun <T> Array<out T>.last(): T",
                  "fun <T> Array<out T>.last(predicate: (T) -> Boolean): T"
                ]
              },
              {
                "name": "lastIndexOf",
                "description": [
                  "Returns last index of element, or -1 if the array does not contain element."
                ],
                "code": ["fun <T> Array<out T>.lastIndexOf(element: T): Int"]
              },
              {
                "name": "lastOrNull",
                "description": [
                  "Returns the last element, or null if the array is empty.",
                  "Returns the last element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun <T> Array<out T>.lastOrNull(): T?",
                  "fun <T> Array<out T>.lastOrNull(    predicate: (T) -> Boolean): T?"
                ]
              },
              {
                "name": "map",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each element in the original array."
                ],
                "code": [
                  "fun <T, R> Array<out T>.map(transform: (T) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexed",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each element and its index in the original array."
                ],
                "code": [
                  "fun <T, R> Array<out T>.mapIndexed(    transform: (index: Int, T) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexedNotNull",
                "description": [
                  "Returns a list containing only the non-null results of applying the given transform function\nto each element and its index in the original array."
                ],
                "code": [
                  "fun <T, R : Any> Array<out T>.mapIndexedNotNull(    transform: (index: Int, T) -> R?): List<R>"
                ]
              },
              {
                "name": "mapIndexedNotNullTo",
                "description": [
                  "Applies the given transform function to each element and its index in the original array\nand appends only the non-null results to the given destination."
                ],
                "code": [
                  "fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(    destination: C,     transform: (index: Int, T) -> R?): C"
                ]
              },
              {
                "name": "mapIndexedTo",
                "description": [
                  "Applies the given transform function to each element and its index in the original array\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(    destination: C,     transform: (index: Int, T) -> R): C"
                ]
              },
              {
                "name": "mapNotNull",
                "description": [
                  "Returns a list containing only the non-null results of applying the given transform function\nto each element in the original array."
                ],
                "code": [
                  "fun <T, R : Any> Array<out T>.mapNotNull(    transform: (T) -> R?): List<R>"
                ]
              },
              {
                "name": "mapNotNullTo",
                "description": [
                  "Applies the given transform function to each element in the original array\nand appends only the non-null results to the given destination."
                ],
                "code": [
                  "fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(    destination: C,     transform: (T) -> R?): C"
                ]
              },
              {
                "name": "mapTo",
                "description": [
                  "Applies the given transform function to each element of the original array\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(    destination: C,     transform: (T) -> R): C"
                ]
              },
              {
                "name": "maxByOrNull",
                "description": [
                  "Returns the first element yielding the largest value of the given function or null if there are no elements."
                ],
                "code": [
                  "fun <T, R : Comparable<R>> Array<out T>.maxByOrNull(    selector: (T) -> R): T?"
                ]
              },
              {
                "name": "maxOf",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each element in the array."
                ],
                "code": [
                  "fun <T> any_array<T>.maxOf(selector: (T) -> Double): Double"
                ]
              },
              {
                "name": "maxOfOrNull",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <T> any_array<T>.maxOfOrNull(    selector: (T) -> Double): Double?"
                ]
              },
              {
                "name": "maxOfWith",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun <T, R> Array<out T>.maxOfWith(    comparator: Comparator<in R>,     selector: (T) -> R): R"
                ]
              },
              {
                "name": "maxOfWithOrNull",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <T, R> Array<out T>.maxOfWithOrNull(    comparator: Comparator<in R>,     selector: (T) -> R): R?"
                ]
              },
              {
                "name": "maxOrNull",
                "description": [
                  "Returns the largest element or null if there are no elements."
                ],
                "code": ["fun <T : Comparable<T>> any_array<T>.maxOrNull(): T?"]
              },
              {
                "name": "maxWith",
                "description": [
                  "Returns the first element having the largest value according to the provided comparator."
                ],
                "code": [
                  "fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T",
                  "fun <T> Array<out T>.maxWith(    comparator: Comparator<in T>): T?"
                ]
              },
              {
                "name": "maxWithOrNull",
                "description": [
                  "Returns the first element having the largest value according to the provided comparator or null if there are no elements."
                ],
                "code": [
                  "fun <T> Array<out T>.maxWithOrNull(    comparator: Comparator<in T>): T?"
                ]
              },
              {
                "name": "minByOrNull",
                "description": [
                  "Returns the first element yielding the smallest value of the given function or null if there are no elements."
                ],
                "code": [
                  "fun <T, R : Comparable<R>> Array<out T>.minByOrNull(    selector: (T) -> R): T?"
                ]
              },
              {
                "name": "minOf",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the array."
                ],
                "code": [
                  "fun <T> any_array<T>.minOf(selector: (T) -> Double): Double"
                ]
              },
              {
                "name": "minOfOrNull",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <T> any_array<T>.minOfOrNull(    selector: (T) -> Double): Double?"
                ]
              },
              {
                "name": "minOfWith",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun <T, R> Array<out T>.minOfWith(    comparator: Comparator<in R>,     selector: (T) -> R): R"
                ]
              },
              {
                "name": "minOfWithOrNull",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <T, R> Array<out T>.minOfWithOrNull(    comparator: Comparator<in R>,     selector: (T) -> R): R?"
                ]
              },
              {
                "name": "minOrNull",
                "description": [
                  "Returns the smallest element or null if there are no elements."
                ],
                "code": ["fun <T : Comparable<T>> any_array<T>.minOrNull(): T?"]
              },
              {
                "name": "minWith",
                "description": [
                  "Returns the first element having the smallest value according to the provided comparator."
                ],
                "code": [
                  "fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T",
                  "fun <T> Array<out T>.minWith(    comparator: Comparator<in T>): T?"
                ]
              },
              {
                "name": "minWithOrNull",
                "description": [
                  "Returns the first element having the smallest value according to the provided comparator or null if there are no elements."
                ],
                "code": [
                  "fun <T> Array<out T>.minWithOrNull(    comparator: Comparator<in T>): T?"
                ]
              },
              {
                "name": "none",
                "description": [
                  "Returns true if the array has no elements.",
                  "Returns true if no elements match the given predicate."
                ],
                "code": [
                  "fun <T> Array<out T>.none(): Boolean",
                  "fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean"
                ]
              },
              {
                "name": "onEach",
                "description": [
                  "Performs the given action on each element and returns the array itself afterwards."
                ],
                "code": [
                  "fun <T> Array<out T>.onEach(    action: (T) -> Unit): Array<out T>"
                ]
              },
              {
                "name": "onEachIndexed",
                "description": [
                  "Performs the given action on each element, providing sequential index with the element,\nand returns the array itself afterwards."
                ],
                "code": [
                  "fun <T> Array<out T>.onEachIndexed(    action: (index: Int, T) -> Unit): Array<out T>"
                ]
              },
              {
                "name": "partition",
                "description": [
                  "Splits the original array into pair of lists,\nwhere first list contains elements for which predicate yielded true,\nwhile second list contains elements for which predicate yielded false."
                ],
                "code": [
                  "fun <T> Array<out T>.partition(    predicate: (T) -> Boolean): Pair<List<T>, List<T>>"
                ]
              },
              {
                "name": "random",
                "description": [
                  "Returns a random element from this array.",
                  "Returns a random element from this array using the specified source of randomness."
                ],
                "code": [
                  "fun <T> Array<out T>.random(): T",
                  "fun <T> Array<out T>.random(random: Random): T"
                ]
              },
              {
                "name": "randomOrNull",
                "description": [
                  "Returns a random element from this array, or null if this array is empty.",
                  "Returns a random element from this array using the specified source of randomness, or null if this array is empty."
                ],
                "code": [
                  "fun <T> Array<out T>.randomOrNull(): T?",
                  "fun <T> Array<out T>.randomOrNull(random: Random): T?"
                ]
              },
              {
                "name": "reduce",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun <S, T : S> Array<out T>.reduce(    operation: (acc: S, T) -> S): S"
                ]
              },
              {
                "name": "reduceIndexed",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original array."
                ],
                "code": [
                  "fun <S, T : S> Array<out T>.reduceIndexed(    operation: (index: Int, acc: S, T) -> S): S"
                ]
              },
              {
                "name": "reduceIndexedOrNull",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original array."
                ],
                "code": [
                  "fun <S, T : S> Array<out T>.reduceIndexedOrNull(    operation: (index: Int, acc: S, T) -> S): S?"
                ]
              },
              {
                "name": "reduceOrNull",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun <S, T : S> Array<out T>.reduceOrNull(    operation: (acc: S, T) -> S): S?"
                ]
              },
              {
                "name": "reduceRight",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun <S, T : S> Array<out T>.reduceRight(    operation: (T, acc: S) -> S): S"
                ]
              },
              {
                "name": "reduceRightIndexed",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun <S, T : S> Array<out T>.reduceRightIndexed(    operation: (index: Int, T, acc: S) -> S): S"
                ]
              },
              {
                "name": "reduceRightIndexedOrNull",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun <S, T : S> Array<out T>.reduceRightIndexedOrNull(    operation: (index: Int, T, acc: S) -> S): S?"
                ]
              },
              {
                "name": "reduceRightOrNull",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun <S, T : S> Array<out T>.reduceRightOrNull(    operation: (T, acc: S) -> S): S?"
                ]
              },
              {
                "name": "requireNoNulls",
                "description": [
                  "Returns an original collection containing all the non-null elements, throwing an IllegalArgumentException if there are any null elements."
                ],
                "code": ["fun <T : Any> Array<T?>.requireNoNulls(): Array<T>"]
              },
              {
                "name": "reverse",
                "description": [
                  "Reverses elements in the array in-place.",
                  "Reverses elements of the array in the specified range in-place."
                ],
                "code": [
                  "fun <T> Array<T>.reverse()",
                  "fun <T> Array<T>.reverse(fromIndex: Int, toIndex: Int)"
                ]
              },
              {
                "name": "reversed",
                "description": [
                  "Returns a list with elements in reversed order."
                ],
                "code": ["fun <T> Array<out T>.reversed(): List<T>"]
              },
              {
                "name": "reversedArray",
                "description": [
                  "Returns an array with elements of this array in reversed order."
                ],
                "code": ["fun <T> Array<T>.reversedArray(): Array<T>"]
              },
              {
                "name": "runningFold",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <T, R> Array<out T>.runningFold(    initial: R,     operation: (acc: R, T) -> R): List<R>"
                ]
              },
              {
                "name": "runningFoldIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <T, R> Array<out T>.runningFoldIndexed(    initial: R,     operation: (index: Int, acc: R, T) -> R): List<R>"
                ]
              },
              {
                "name": "runningReduce",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with the first element of this array."
                ],
                "code": [
                  "fun <S, T : S> Array<out T>.runningReduce(    operation: (acc: S, T) -> S): List<S>"
                ]
              },
              {
                "name": "runningReduceIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with the first element of this array."
                ],
                "code": [
                  "fun <S, T : S> Array<out T>.runningReduceIndexed(    operation: (index: Int, acc: S, T) -> S): List<S>"
                ]
              },
              {
                "name": "scan",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <T, R> Array<out T>.scan(    initial: R,     operation: (acc: R, T) -> R): List<R>"
                ]
              },
              {
                "name": "scanIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <T, R> Array<out T>.scanIndexed(    initial: R,     operation: (index: Int, acc: R, T) -> R): List<R>"
                ]
              },
              {
                "name": "shuffle",
                "description": [
                  "Randomly shuffles elements in this array in-place.",
                  "Randomly shuffles elements in this array in-place using the specified random instance as the source of randomness."
                ],
                "code": [
                  "fun <T> Array<T>.shuffle()",
                  "fun <T> Array<T>.shuffle(random: Random)"
                ]
              },
              {
                "name": "single",
                "description": [
                  "Returns the single element, or throws an exception if the array is empty or has more than one element.",
                  "Returns the single element matching the given predicate, or throws exception if there is no or more than one matching element."
                ],
                "code": [
                  "fun <T> Array<out T>.single(): T",
                  "fun <T> Array<out T>.single(predicate: (T) -> Boolean): T"
                ]
              },
              {
                "name": "singleOrNull",
                "description": [
                  "Returns single element, or null if the array is empty or has more than one element.",
                  "Returns the single element matching the given predicate, or null if element was not found or more than one element was found."
                ],
                "code": [
                  "fun <T> Array<out T>.singleOrNull(): T?",
                  "fun <T> Array<out T>.singleOrNull(    predicate: (T) -> Boolean): T?"
                ]
              },
              {
                "name": "slice",
                "description": [
                  "Returns a list containing elements at indices in the specified indices range.",
                  "Returns a list containing elements at specified indices."
                ],
                "code": [
                  "fun <T> Array<out T>.slice(indices: IntRange): List<T>",
                  "fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T>"
                ]
              },
              {
                "name": "sliceArray",
                "description": [
                  "Returns an array containing elements of this array at specified indices.",
                  "Returns an array containing elements at indices in the specified indices range."
                ],
                "code": [
                  "fun <T> Array<T>.sliceArray(    indices: Collection<Int>): Array<T>",
                  "fun <T> Array<T>.sliceArray(indices: IntRange): Array<T>"
                ]
              },
              {
                "name": "sort",
                "description": [
                  "Sorts the array in-place according to the order specified by the given comparison function."
                ],
                "code": [
                  "fun <T> Array<out T>.sort(comparison: (a: T, b: T) -> Int)"
                ]
              },
              {
                "name": "sortBy",
                "description": [
                  "Sorts elements in the array in-place according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <T, R : Comparable<R>> Array<out T>.sortBy(    selector: (T) -> R?)"
                ]
              },
              {
                "name": "sortByDescending",
                "description": [
                  "Sorts elements in the array in-place descending according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <T, R : Comparable<R>> Array<out T>.sortByDescending(    selector: (T) -> R?)"
                ]
              },
              {
                "name": "sortDescending",
                "description": [
                  "Sorts elements in the array in-place descending according to their natural sort order.",
                  "Sorts elements of the array in the specified range in-place.\nThe elements are sorted descending according to their natural sort order."
                ],
                "code": [
                  "fun <T : Comparable<T>> Array<out T>.sortDescending()",
                  "fun <T : Comparable<T>> Array<out T>.sortDescending(    fromIndex: Int,     toIndex: Int)"
                ]
              },
              {
                "name": "sorted",
                "description": [
                  "Returns a list of all elements sorted according to their natural sort order."
                ],
                "code": [
                  "fun <T : Comparable<T>> Array<out T>.sorted(): List<T>"
                ]
              },
              {
                "name": "sortedArray",
                "description": [
                  "Returns an array with all elements of this array sorted according to their natural sort order."
                ],
                "code": [
                  "fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T>"
                ]
              },
              {
                "name": "sortedArrayDescending",
                "description": [
                  "Returns an array with all elements of this array sorted descending according to their natural sort order."
                ],
                "code": [
                  "fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T>"
                ]
              },
              {
                "name": "sortedArrayWith",
                "description": [
                  "Returns an array with all elements of this array sorted according the specified comparator."
                ],
                "code": [
                  "fun <T> Array<out T>.sortedArrayWith(    comparator: Comparator<in T>): Array<out T>"
                ]
              },
              {
                "name": "sortedBy",
                "description": [
                  "Returns a list of all elements sorted according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <T, R : Comparable<R>> Array<out T>.sortedBy(    selector: (T) -> R?): List<T>"
                ]
              },
              {
                "name": "sortedByDescending",
                "description": [
                  "Returns a list of all elements sorted descending according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(    selector: (T) -> R?): List<T>"
                ]
              },
              {
                "name": "sortedDescending",
                "description": [
                  "Returns a list of all elements sorted descending according to their natural sort order."
                ],
                "code": [
                  "fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T>"
                ]
              },
              {
                "name": "sortedWith",
                "description": [
                  "Returns a list of all elements sorted according to the specified comparator."
                ],
                "code": [
                  "fun <T> Array<out T>.sortedWith(    comparator: Comparator<in T>): List<T>"
                ]
              },
              {
                "name": "sortWith",
                "description": [
                  "Sorts the array in-place according to the order specified by the given comparator.",
                  "Sorts a range in the array in-place with the given comparator."
                ],
                "code": [
                  "fun <T> Array<out T>.sortWith(comparator: Comparator<in T>)",
                  "fun <T> Array<out T>.sortWith(    comparator: Comparator<in T>,     fromIndex: Int = 0,     toIndex: Int = size)"
                ]
              },
              {
                "name": "subtract",
                "description": [
                  "Returns a set containing all elements that are contained by this array and not contained by the specified collection."
                ],
                "code": [
                  "infix fun <T> Array<out T>.subtract(    other: Iterable<T>): Set<T>"
                ]
              },
              {
                "name": "sum",
                "description": [
                  "Returns the sum of all elements in the array."
                ],
                "code": [
                  "fun Array<out Byte>.sum(): Int",
                  "fun Array<out Short>.sum(): Int",
                  "fun Array<out Int>.sum(): Int",
                  "fun Array<out Long>.sum(): Long",
                  "fun Array<out Float>.sum(): Float",
                  "fun Array<out Double>.sum(): Double",
                  "fun Array<out UInt>.sum(): UInt",
                  "fun Array<out ULong>.sum(): ULong",
                  "fun Array<out UByte>.sum(): UInt",
                  "fun Array<out UShort>.sum(): UInt"
                ]
              },
              {
                "name": "sumBy",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int"
                ]
              },
              {
                "name": "sumByDouble",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun <T> Array<out T>.sumByDouble(    selector: (T) -> Double): Double"
                ]
              },
              {
                "name": "sumOf",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun <T> any_array<T>.sumOf(selector: (T) -> Double): Double"
                ]
              },
              {
                "name": "take",
                "description": ["Returns a list containing first n elements."],
                "code": ["fun <T> Array<out T>.take(n: Int): List<T>"]
              },
              {
                "name": "takeLast",
                "description": ["Returns a list containing last n elements."],
                "code": ["fun <T> Array<out T>.takeLast(n: Int): List<T>"]
              },
              {
                "name": "takeLastWhile",
                "description": [
                  "Returns a list containing last elements satisfying the given predicate."
                ],
                "code": [
                  "fun <T> Array<out T>.takeLastWhile(    predicate: (T) -> Boolean): List<T>"
                ]
              },
              {
                "name": "takeWhile",
                "description": [
                  "Returns a list containing first elements satisfying the given predicate."
                ],
                "code": [
                  "fun <T> Array<out T>.takeWhile(    predicate: (T) -> Boolean): List<T>"
                ]
              },
              {
                "name": "toBooleanArray",
                "description": [
                  "Returns an array of Boolean containing all of the elements of this generic array."
                ],
                "code": [
                  "fun Array<out Boolean>.toBooleanArray(): BooleanArray"
                ]
              },
              {
                "name": "toByteArray",
                "description": [
                  "Returns an array of Byte containing all of the elements of this generic array."
                ],
                "code": ["fun Array<out Byte>.toByteArray(): ByteArray"]
              },
              {
                "name": "toCharArray",
                "description": [
                  "Returns an array of Char containing all of the elements of this generic array."
                ],
                "code": ["fun Array<out Char>.toCharArray(): CharArray"]
              },
              {
                "name": "toCollection",
                "description": [
                  "Appends all elements to the given destination collection."
                ],
                "code": [
                  "fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(    destination: C): C"
                ]
              },
              {
                "name": "toCStringArray",
                "description": [
                  "Convert this array of Kotlin strings to C array of C strings,\nallocating memory for the array and C strings with given AutofreeScope."
                ],
                "code": [
                  "fun Array<String>.toCStringArray(    autofreeScope: AutofreeScope): CPointer<CPointerVar<ByteVar>>"
                ]
              },
              {
                "name": "toCValues",
                "description": [],
                "code": [
                  "fun <T : CPointed> Array<CPointer<T>?>.toCValues(): CValues<CPointerVar<T>>"
                ]
              },
              {
                "name": "toDoubleArray",
                "description": [
                  "Returns an array of Double containing all of the elements of this generic array."
                ],
                "code": ["fun Array<out Double>.toDoubleArray(): DoubleArray"]
              },
              {
                "name": "toFloatArray",
                "description": [
                  "Returns an array of Float containing all of the elements of this generic array."
                ],
                "code": ["fun Array<out Float>.toFloatArray(): FloatArray"]
              },
              {
                "name": "toHashSet",
                "description": ["Returns a new HashSet of all elements."],
                "code": ["fun <T> Array<out T>.toHashSet(): HashSet<T>"]
              },
              {
                "name": "toIntArray",
                "description": [
                  "Returns an array of Int containing all of the elements of this generic array."
                ],
                "code": ["fun Array<out Int>.toIntArray(): IntArray"]
              },
              {
                "name": "toList",
                "description": ["Returns a List containing all elements."],
                "code": ["fun <T> Array<out T>.toList(): List<T>"]
              },
              {
                "name": "toLongArray",
                "description": [
                  "Returns an array of Long containing all of the elements of this generic array."
                ],
                "code": ["fun Array<out Long>.toLongArray(): LongArray"]
              },
              {
                "name": "toMap",
                "description": [
                  "Returns a new map containing all key-value pairs from the given array of pairs.",
                  "Populates and returns the destination mutable map with key-value pairs from the given array of pairs."
                ],
                "code": [
                  "fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V>",
                  "fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(    destination: M): M"
                ]
              },
              {
                "name": "toMutableList",
                "description": [
                  "Returns a new MutableList filled with all elements of this array."
                ],
                "code": ["fun <T> Array<out T>.toMutableList(): MutableList<T>"]
              },
              {
                "name": "toMutableSet",
                "description": [
                  "Returns a new MutableSet containing all distinct elements from the given array."
                ],
                "code": ["fun <T> Array<out T>.toMutableSet(): MutableSet<T>"]
              },
              {
                "name": "toSet",
                "description": ["Returns a Set of all elements."],
                "code": ["fun <T> Array<out T>.toSet(): Set<T>"]
              },
              {
                "name": "toShortArray",
                "description": [
                  "Returns an array of Short containing all of the elements of this generic array."
                ],
                "code": ["fun Array<out Short>.toShortArray(): ShortArray"]
              },
              {
                "name": "toSortedSet",
                "description": ["Returns a new SortedSet of all elements."],
                "code": [
                  "fun <T : Comparable<T>> any_array<T>.toSortedSet(): SortedSet<T>"
                ]
              },
              {
                "name": "toUByteArray",
                "description": [
                  "Returns an array of UByte containing all of the elements of this generic array."
                ],
                "code": ["fun Array<out UByte>.toUByteArray(): UByteArray"]
              },
              {
                "name": "toUIntArray",
                "description": [
                  "Returns an array of UInt containing all of the elements of this generic array."
                ],
                "code": ["fun Array<out UInt>.toUIntArray(): UIntArray"]
              },
              {
                "name": "toULongArray",
                "description": [
                  "Returns an array of ULong containing all of the elements of this generic array."
                ],
                "code": ["fun Array<out ULong>.toULongArray(): ULongArray"]
              },
              {
                "name": "toUShortArray",
                "description": [
                  "Returns an array of UShort containing all of the elements of this generic array."
                ],
                "code": ["fun Array<out UShort>.toUShortArray(): UShortArray"]
              },
              {
                "name": "union",
                "description": [
                  "Returns a set containing all distinct elements from both collections."
                ],
                "code": [
                  "infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T>"
                ]
              },
              {
                "name": "unzip",
                "description": [
                  "Returns a pair of lists, where\nfirst list is built from the first values of each pair from this array,\nsecond list is built from the second values of each pair from this array."
                ],
                "code": [
                  "fun <T, R> Array<out Pair<T, R>>.unzip(): Pair<List<T>, List<R>>"
                ]
              },
              {
                "name": "withIndex",
                "description": [
                  "Returns a lazy Iterable that wraps each element of the original array\ninto an IndexedValue containing the index of that element and the element itself."
                ],
                "code": [
                  "fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>>"
                ]
              },
              {
                "name": "zip",
                "description": [
                  "Returns a list of pairs built from the elements of this array and the other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of pairs built from the elements of this collection and other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other collection with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection."
                ],
                "code": [
                  "infix fun <T, R> Array<out T>.zip(    other: Array<out R>): List<Pair<T, R>>",
                  "fun <T, R, V> Array<out T>.zip(    other: Array<out R>,     transform: (a: T, b: R) -> V): List<V>",
                  "infix fun <T, R> Array<out T>.zip(    other: Iterable<R>): List<Pair<T, R>>",
                  "fun <T, R, V> Array<out T>.zip(    other: Iterable<R>,     transform: (a: T, b: R) -> V): List<V>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "ArrayIndexOutOfBoundsException",
        "description": [],
        "code": [
          "open class ArrayIndexOutOfBoundsException :     IndexOutOfBoundsException"
        ],
        "url": "-array-index-out-of-bounds-exception/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [],
                "code": [
                  "ArrayIndexOutOfBoundsException()",
                  "ArrayIndexOutOfBoundsException(message: String?)"
                ]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "getStackTraceAddresses",
                "description": [
                  "Returns a list of stack trace addresses representing the stack trace\npertaining to this throwable."
                ],
                "code": ["fun Throwable.getStackTraceAddresses(): List<Long>"]
              }
            ]
          }
        ]
      },
      {
        "name": "AutoCloseable",
        "description": ["A resource that can be closed or released."],
        "code": ["interface AutoCloseable"],
        "url": "-auto-closeable/index.html",
        "subcategories": [
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "close",
                "description": ["Closes this resource."],
                "code": ["abstract fun close()"]
              }
            ]
          }
        ]
      },
      {
        "name": "Boolean",
        "description": [
          "Represents a value which is either true or false. On the JVM, non-nullable values of this type are\nrepresented as values of the primitive type boolean."
        ],
        "code": ["class Boolean : Comparable<Boolean>"],
        "url": "-boolean/index.html",
        "subcategories": [
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "and",
                "description": [
                  "Performs a logical and operation between this Boolean and the other one. Unlike the && operator,\nthis function does not perform short-circuit evaluation. Both this and other will always be evaluated."
                ],
                "code": ["infix fun and(other: Boolean): Boolean"]
              },
              {
                "name": "compareTo",
                "description": [
                  "Compares this object with the specified object for order. Returns zero if this object is equal\nto the specified other object, a negative number if it's less than other, or a positive number\nif it's greater than other."
                ],
                "code": ["fun compareTo(other: Boolean): Int"]
              },
              {
                "name": "equals",
                "description": [
                  "Indicates whether some other object is \"equal to\" this one. Implementations must fulfil the following\nrequirements:"
                ],
                "code": [
                  "fun equals(other: Boolean): Boolean",
                  "fun equals(other: Any?): Boolean"
                ]
              },
              {
                "name": "hashCode",
                "description": [
                  "Returns a hash code value for the object.  The general contract of hashCode is:"
                ],
                "code": ["fun hashCode(): Int"]
              },
              {
                "name": "not",
                "description": ["Returns the inverse of this boolean."],
                "code": ["operator fun not(): Boolean"]
              },
              {
                "name": "or",
                "description": [
                  "Performs a logical or operation between this Boolean and the other one. Unlike the || operator,\nthis function does not perform short-circuit evaluation. Both this and other will always be evaluated."
                ],
                "code": ["infix fun or(other: Boolean): Boolean"]
              },
              {
                "name": "toString",
                "description": [
                  "Returns a string representation of the object."
                ],
                "code": ["fun toString(): String"]
              },
              {
                "name": "xor",
                "description": [
                  "Performs a logical xor operation between this Boolean and the other one."
                ],
                "code": ["infix fun xor(other: Boolean): Boolean"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "coerceAtLeast",
                "description": [
                  "Ensures that this value is not less than the specified minimumValue."
                ],
                "code": [
                  "fun <T : Comparable<T>> T.coerceAtLeast(minimumValue: T): T"
                ]
              },
              {
                "name": "coerceAtMost",
                "description": [
                  "Ensures that this value is not greater than the specified maximumValue."
                ],
                "code": [
                  "fun <T : Comparable<T>> T.coerceAtMost(maximumValue: T): T"
                ]
              },
              {
                "name": "coerceIn",
                "description": [
                  "Ensures that this value lies in the specified range minimumValue..maximumValue.",
                  "Ensures that this value lies in the specified range."
                ],
                "code": [
                  "fun <T : Comparable<T>> T.coerceIn(    minimumValue: T?,     maximumValue: T?): T",
                  "fun <T : Comparable<T>> T.coerceIn(    range: ClosedFloatingPointRange<T>): T",
                  "fun <T : Comparable<T>> T.coerceIn(range: ClosedRange<T>): T"
                ]
              },
              {
                "name": "compareTo",
                "description": [
                  "Compares this object with the specified object for order. Returns zero if this object is equal\nto the specified other object, a negative number if it's less than other, or a positive number\nif it's greater than other."
                ],
                "code": ["infix fun <T> Comparable<T>.compareTo(other: T): Int"]
              },
              {
                "name": "rangeTo",
                "description": [
                  "Creates a range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeTo(    that: T): ClosedRange<T>"
                ]
              },
              {
                "name": "rangeUntil",
                "description": [
                  "Creates an open-ended range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeUntil(    that: T): OpenEndRange<T>"
                ]
              },
              {
                "name": "toByte",
                "description": [],
                "code": ["fun Boolean.toByte(): Byte"]
              }
            ]
          }
        ]
      },
      {
        "name": "BooleanArray",
        "description": [
          "An array of booleans. When targeting the JVM, instances of this class are represented as boolean[]."
        ],
        "code": ["class BooleanArray"],
        "url": "-boolean-array/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Creates a new array of the specified size, where each element is calculated by calling the specified\ninit function.",
                  "Creates a new array of the specified size, with all elements initialized to false."
                ],
                "code": [
                  "<init>(size: Int, init: (Int) -> Boolean)",
                  "<init>(size: Int)"
                ]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "size",
                "description": ["Returns the number of elements in the array."],
                "code": ["val size: Int"]
              }
            ]
          },
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "get",
                "description": [
                  "Returns the array element at the given index.  This method can be called using the index operator."
                ],
                "code": ["operator fun get(index: Int): Boolean"]
              },
              {
                "name": "iterator",
                "description": [
                  "Creates an iterator over the elements of the array."
                ],
                "code": ["operator fun iterator(): BooleanIterator"]
              },
              {
                "name": "set",
                "description": [
                  "Sets the element at the given index to the given value. This method can be called using the index operator."
                ],
                "code": ["operator fun set(index: Int, value: Boolean)"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "indices",
                "description": [
                  "Returns the range of valid indices for the array."
                ],
                "code": ["val BooleanArray.indices: IntRange"]
              },
              {
                "name": "lastIndex",
                "description": ["Returns the last valid index for the array."],
                "code": ["val BooleanArray.lastIndex: Int"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "all",
                "description": [
                  "Returns true if all elements match the given predicate."
                ],
                "code": [
                  "fun BooleanArray.all(    predicate: (Boolean) -> Boolean): Boolean"
                ]
              },
              {
                "name": "any",
                "description": [
                  "Returns true if array has at least one element.",
                  "Returns true if at least one element matches the given predicate."
                ],
                "code": [
                  "fun BooleanArray.any(): Boolean",
                  "fun BooleanArray.any(    predicate: (Boolean) -> Boolean): Boolean"
                ]
              },
              {
                "name": "asIterable",
                "description": [
                  "Creates an Iterable instance that wraps the original array returning its elements when being iterated."
                ],
                "code": ["fun BooleanArray.asIterable(): Iterable<Boolean>"]
              },
              {
                "name": "asSequence",
                "description": [
                  "Creates a Sequence instance that wraps the original array returning its elements when being iterated."
                ],
                "code": ["fun BooleanArray.asSequence(): Sequence<Boolean>"]
              },
              {
                "name": "associate",
                "description": [
                  "Returns a Map containing key-value pairs provided by transform function\napplied to elements of the given array."
                ],
                "code": [
                  "fun <K, V> BooleanArray.associate(    transform: (Boolean) -> Pair<K, V>): Map<K, V>"
                ]
              },
              {
                "name": "associateBy",
                "description": [
                  "Returns a Map containing the elements from the given array indexed by the key\nreturned from keySelector function applied to each element.",
                  "Returns a Map containing the values provided by valueTransform and indexed by keySelector functions applied to elements of the given array."
                ],
                "code": [
                  "fun <K> BooleanArray.associateBy(    keySelector: (Boolean) -> K): Map<K, Boolean>",
                  "fun <K, V> BooleanArray.associateBy(    keySelector: (Boolean) -> K,     valueTransform: (Boolean) -> V): Map<K, V>"
                ]
              },
              {
                "name": "associateByTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function applied to each element of the given array\nand value is the element itself.",
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function and\nand value is provided by the valueTransform function applied to elements of the given array."
                ],
                "code": [
                  "fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(    destination: M,     keySelector: (Boolean) -> K): M",
                  "fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(    destination: M,     keySelector: (Boolean) -> K,     valueTransform: (Boolean) -> V): M"
                ]
              },
              {
                "name": "associateTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs\nprovided by transform function applied to each element of the given array."
                ],
                "code": [
                  "fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(    destination: M,     transform: (Boolean) -> Pair<K, V>): M"
                ]
              },
              {
                "name": "associateWith",
                "description": [
                  "Returns a Map where keys are elements from the given array and values are\nproduced by the valueSelector function applied to each element."
                ],
                "code": [
                  "fun <V> BooleanArray.associateWith(    valueSelector: (Boolean) -> V): Map<Boolean, V>"
                ]
              },
              {
                "name": "associateWithTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs for each element of the given array,\nwhere key is the element itself and value is provided by the valueSelector function applied to that key."
                ],
                "code": [
                  "fun <V, M : MutableMap<in Boolean, in V>> BooleanArray.associateWithTo(    destination: M,     valueSelector: (Boolean) -> V): M"
                ]
              },
              {
                "name": "component1",
                "description": ["Returns 1st element from the array."],
                "code": ["operator fun BooleanArray.component1(): Boolean"]
              },
              {
                "name": "component2",
                "description": ["Returns 2nd element from the array."],
                "code": ["operator fun BooleanArray.component2(): Boolean"]
              },
              {
                "name": "component3",
                "description": ["Returns 3rd element from the array."],
                "code": ["operator fun BooleanArray.component3(): Boolean"]
              },
              {
                "name": "component4",
                "description": ["Returns 4th element from the array."],
                "code": ["operator fun BooleanArray.component4(): Boolean"]
              },
              {
                "name": "component5",
                "description": ["Returns 5th element from the array."],
                "code": ["operator fun BooleanArray.component5(): Boolean"]
              },
              {
                "name": "contains",
                "description": [
                  "Returns true if element is found in the array."
                ],
                "code": [
                  "operator fun BooleanArray.contains(element: Boolean): Boolean"
                ]
              },
              {
                "name": "contentEquals",
                "description": [
                  "Returns true if the two specified arrays are structurally equal to one another,\ni.e. contain the same number of the same elements in the same order."
                ],
                "code": [
                  "infix fun BooleanArray.contentEquals(    other: BooleanArray): Boolean"
                ]
              },
              {
                "name": "contentHashCode",
                "description": [
                  "Returns a hash code based on the contents of this array as if it is List."
                ],
                "code": ["fun BooleanArray.contentHashCode(): Int"]
              },
              {
                "name": "contentToString",
                "description": [
                  "Returns a string representation of the contents of the specified array as if it is List."
                ],
                "code": ["fun BooleanArray.contentToString(): String"]
              },
              {
                "name": "count",
                "description": [
                  "Returns the number of elements in this array.",
                  "Returns the number of elements matching the given predicate."
                ],
                "code": [
                  "fun BooleanArray.count(): Int",
                  "fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int"
                ]
              },
              {
                "name": "distinct",
                "description": [
                  "Returns a list containing only distinct elements from the given array."
                ],
                "code": ["fun BooleanArray.distinct(): List<Boolean>"]
              },
              {
                "name": "distinctBy",
                "description": [
                  "Returns a list containing only elements from the given array\nhaving distinct keys returned by the given selector function."
                ],
                "code": [
                  "fun <K> BooleanArray.distinctBy(    selector: (Boolean) -> K): List<Boolean>"
                ]
              },
              {
                "name": "drop",
                "description": [
                  "Returns a list containing all elements except first n elements."
                ],
                "code": ["fun BooleanArray.drop(n: Int): List<Boolean>"]
              },
              {
                "name": "dropLast",
                "description": [
                  "Returns a list containing all elements except last n elements."
                ],
                "code": ["fun BooleanArray.dropLast(n: Int): List<Boolean>"]
              },
              {
                "name": "dropLastWhile",
                "description": [
                  "Returns a list containing all elements except last elements that satisfy the given predicate."
                ],
                "code": [
                  "fun BooleanArray.dropLastWhile(    predicate: (Boolean) -> Boolean): List<Boolean>"
                ]
              },
              {
                "name": "dropWhile",
                "description": [
                  "Returns a list containing all elements except first elements that satisfy the given predicate."
                ],
                "code": [
                  "fun BooleanArray.dropWhile(    predicate: (Boolean) -> Boolean): List<Boolean>"
                ]
              },
              {
                "name": "elementAtOrElse",
                "description": [
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
                ],
                "code": [
                  "fun BooleanArray.elementAtOrElse(    index: Int,     defaultValue: (Int) -> Boolean): Boolean"
                ]
              },
              {
                "name": "elementAtOrNull",
                "description": [
                  "Returns an element at the given index or null if the index is out of bounds of this array."
                ],
                "code": [
                  "fun BooleanArray.elementAtOrNull(index: Int): Boolean?"
                ]
              },
              {
                "name": "filter",
                "description": [
                  "Returns a list containing only elements matching the given predicate."
                ],
                "code": [
                  "fun BooleanArray.filter(    predicate: (Boolean) -> Boolean): List<Boolean>"
                ]
              },
              {
                "name": "filterIndexed",
                "description": [
                  "Returns a list containing only elements matching the given predicate."
                ],
                "code": [
                  "fun BooleanArray.filterIndexed(    predicate: (index: Int, Boolean) -> Boolean): List<Boolean>"
                ]
              },
              {
                "name": "filterIndexedTo",
                "description": [
                  "Appends all elements matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(    destination: C,     predicate: (index: Int, Boolean) -> Boolean): C"
                ]
              },
              {
                "name": "filterNot",
                "description": [
                  "Returns a list containing all elements not matching the given predicate."
                ],
                "code": [
                  "fun BooleanArray.filterNot(    predicate: (Boolean) -> Boolean): List<Boolean>"
                ]
              },
              {
                "name": "filterNotTo",
                "description": [
                  "Appends all elements not matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(    destination: C,     predicate: (Boolean) -> Boolean): C"
                ]
              },
              {
                "name": "filterTo",
                "description": [
                  "Appends all elements matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(    destination: C,     predicate: (Boolean) -> Boolean): C"
                ]
              },
              {
                "name": "find",
                "description": [
                  "Returns the first element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun BooleanArray.find(    predicate: (Boolean) -> Boolean): Boolean?"
                ]
              },
              {
                "name": "findLast",
                "description": [
                  "Returns the last element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun BooleanArray.findLast(    predicate: (Boolean) -> Boolean): Boolean?"
                ]
              },
              {
                "name": "first",
                "description": [
                  "Returns the first element.",
                  "Returns the first element matching the given predicate."
                ],
                "code": [
                  "fun BooleanArray.first(): Boolean",
                  "fun BooleanArray.first(    predicate: (Boolean) -> Boolean): Boolean"
                ]
              },
              {
                "name": "firstOrNull",
                "description": [
                  "Returns the first element, or null if the array is empty.",
                  "Returns the first element matching the given predicate, or null if element was not found."
                ],
                "code": [
                  "fun BooleanArray.firstOrNull(): Boolean?",
                  "fun BooleanArray.firstOrNull(    predicate: (Boolean) -> Boolean): Boolean?"
                ]
              },
              {
                "name": "flatMap",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element of original array."
                ],
                "code": [
                  "fun <R> BooleanArray.flatMap(    transform: (Boolean) -> Iterable<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexed",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element\nand its index in the original array."
                ],
                "code": [
                  "fun <R> BooleanArray.flatMapIndexed(    transform: (index: Int, Boolean) -> Iterable<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexedTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each element\nand its index in the original array, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> BooleanArray.flatMapIndexedTo(    destination: C,     transform: (index: Int, Boolean) -> Iterable<R>): C"
                ]
              },
              {
                "name": "flatMapTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each element of original array, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(    destination: C,     transform: (Boolean) -> Iterable<R>): C"
                ]
              },
              {
                "name": "fold",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun <R> BooleanArray.fold(    initial: R,     operation: (acc: R, Boolean) -> R): R"
                ]
              },
              {
                "name": "foldIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element with its index in the original array."
                ],
                "code": [
                  "fun <R> BooleanArray.foldIndexed(    initial: R,     operation: (index: Int, acc: R, Boolean) -> R): R"
                ]
              },
              {
                "name": "foldRight",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun <R> BooleanArray.foldRight(    initial: R,     operation: (Boolean, acc: R) -> R): R"
                ]
              },
              {
                "name": "foldRightIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun <R> BooleanArray.foldRightIndexed(    initial: R,     operation: (index: Int, Boolean, acc: R) -> R): R"
                ]
              },
              {
                "name": "forEach",
                "description": ["Performs the given action on each element."],
                "code": ["fun BooleanArray.forEach(action: (Boolean) -> Unit)"]
              },
              {
                "name": "forEachIndexed",
                "description": [
                  "Performs the given action on each element, providing sequential index with the element."
                ],
                "code": [
                  "fun BooleanArray.forEachIndexed(    action: (index: Int, Boolean) -> Unit)"
                ]
              },
              {
                "name": "getOrElse",
                "description": [
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
                ],
                "code": [
                  "fun BooleanArray.getOrElse(    index: Int,     defaultValue: (Int) -> Boolean): Boolean"
                ]
              },
              {
                "name": "getOrNull",
                "description": [
                  "Returns an element at the given index or null if the index is out of bounds of this array."
                ],
                "code": ["fun BooleanArray.getOrNull(index: Int): Boolean?"]
              },
              {
                "name": "groupBy",
                "description": [
                  "Groups elements of the original array by the key returned by the given keySelector function\napplied to each element and returns a map where each group key is associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original array\nby the key returned by the given keySelector function applied to the element\nand returns a map where each group key is associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K> BooleanArray.groupBy(    keySelector: (Boolean) -> K): Map<K, List<Boolean>>",
                  "fun <K, V> BooleanArray.groupBy(    keySelector: (Boolean) -> K,     valueTransform: (Boolean) -> V): Map<K, List<V>>"
                ]
              },
              {
                "name": "groupByTo",
                "description": [
                  "Groups elements of the original array by the key returned by the given keySelector function\napplied to each element and puts to the destination map each group key associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original array\nby the key returned by the given keySelector function applied to the element\nand puts to the destination map each group key associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(    destination: M,     keySelector: (Boolean) -> K): M",
                  "fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(    destination: M,     keySelector: (Boolean) -> K,     valueTransform: (Boolean) -> V): M"
                ]
              },
              {
                "name": "indexOf",
                "description": [
                  "Returns first index of element, or -1 if the array does not contain element."
                ],
                "code": ["fun BooleanArray.indexOf(element: Boolean): Int"]
              },
              {
                "name": "indexOfFirst",
                "description": [
                  "Returns index of the first element matching the given predicate, or -1 if the array does not contain such element."
                ],
                "code": [
                  "fun BooleanArray.indexOfFirst(    predicate: (Boolean) -> Boolean): Int"
                ]
              },
              {
                "name": "indexOfLast",
                "description": [
                  "Returns index of the last element matching the given predicate, or -1 if the array does not contain such element."
                ],
                "code": [
                  "fun BooleanArray.indexOfLast(    predicate: (Boolean) -> Boolean): Int"
                ]
              },
              {
                "name": "intersect",
                "description": [
                  "Returns a set containing all elements that are contained by both this array and the specified collection."
                ],
                "code": [
                  "infix fun BooleanArray.intersect(    other: Iterable<Boolean>): Set<Boolean>"
                ]
              },
              {
                "name": "isEmpty",
                "description": ["Returns true if the array is empty."],
                "code": ["fun BooleanArray.isEmpty(): Boolean"]
              },
              {
                "name": "isNotEmpty",
                "description": ["Returns true if the array is not empty."],
                "code": ["fun BooleanArray.isNotEmpty(): Boolean"]
              },
              {
                "name": "joinTo",
                "description": [
                  "Appends the string from all the elements separated using separator and using the given prefix and postfix if supplied."
                ],
                "code": [
                  "fun <A : Appendable> BooleanArray.joinTo(    buffer: A,     separator: CharSequence = \", \",     prefix: CharSequence = \"\",     postfix: CharSequence = \"\",     limit: Int = -1,     truncated: CharSequence = \"...\",     transform: ((Boolean) -> CharSequence)? = null): A"
                ]
              },
              {
                "name": "joinToString",
                "description": [
                  "Creates a string from all the elements separated using separator and using the given prefix and postfix if supplied."
                ],
                "code": [
                  "fun BooleanArray.joinToString(    separator: CharSequence = \", \",     prefix: CharSequence = \"\",     postfix: CharSequence = \"\",     limit: Int = -1,     truncated: CharSequence = \"...\",     transform: ((Boolean) -> CharSequence)? = null): String"
                ]
              },
              {
                "name": "last",
                "description": [
                  "Returns the last element.",
                  "Returns the last element matching the given predicate."
                ],
                "code": [
                  "fun BooleanArray.last(): Boolean",
                  "fun BooleanArray.last(    predicate: (Boolean) -> Boolean): Boolean"
                ]
              },
              {
                "name": "lastIndexOf",
                "description": [
                  "Returns last index of element, or -1 if the array does not contain element."
                ],
                "code": ["fun BooleanArray.lastIndexOf(element: Boolean): Int"]
              },
              {
                "name": "lastOrNull",
                "description": [
                  "Returns the last element, or null if the array is empty.",
                  "Returns the last element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun BooleanArray.lastOrNull(): Boolean?",
                  "fun BooleanArray.lastOrNull(    predicate: (Boolean) -> Boolean): Boolean?"
                ]
              },
              {
                "name": "map",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each element in the original array."
                ],
                "code": [
                  "fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexed",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each element and its index in the original array."
                ],
                "code": [
                  "fun <R> BooleanArray.mapIndexed(    transform: (index: Int, Boolean) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexedTo",
                "description": [
                  "Applies the given transform function to each element and its index in the original array\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(    destination: C,     transform: (index: Int, Boolean) -> R): C"
                ]
              },
              {
                "name": "mapTo",
                "description": [
                  "Applies the given transform function to each element of the original array\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(    destination: C,     transform: (Boolean) -> R): C"
                ]
              },
              {
                "name": "maxByOrNull",
                "description": [
                  "Returns the first element yielding the largest value of the given function or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> BooleanArray.maxByOrNull(    selector: (Boolean) -> R): Boolean?"
                ]
              },
              {
                "name": "maxOf",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each element in the array."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.maxOf(    selector: (Boolean) -> R): R"
                ]
              },
              {
                "name": "maxOfOrNull",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.maxOfOrNull(    selector: (Boolean) -> R): R?"
                ]
              },
              {
                "name": "maxOfWith",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun <R> BooleanArray.maxOfWith(    comparator: Comparator<in R>,     selector: (Boolean) -> R): R"
                ]
              },
              {
                "name": "maxOfWithOrNull",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R> BooleanArray.maxOfWithOrNull(    comparator: Comparator<in R>,     selector: (Boolean) -> R): R?"
                ]
              },
              {
                "name": "maxWith",
                "description": [
                  "Returns the first element having the largest value according to the provided comparator."
                ],
                "code": [
                  "fun BooleanArray.maxWith(    comparator: Comparator<in Boolean>): Boolean",
                  "fun BooleanArray.maxWith(    comparator: Comparator<in Boolean>): Boolean?"
                ]
              },
              {
                "name": "maxWithOrNull",
                "description": [
                  "Returns the first element having the largest value according to the provided comparator or null if there are no elements."
                ],
                "code": [
                  "fun BooleanArray.maxWithOrNull(    comparator: Comparator<in Boolean>): Boolean?"
                ]
              },
              {
                "name": "minByOrNull",
                "description": [
                  "Returns the first element yielding the smallest value of the given function or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> BooleanArray.minByOrNull(    selector: (Boolean) -> R): Boolean?"
                ]
              },
              {
                "name": "minOf",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the array."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.minOf(    selector: (Boolean) -> R): R"
                ]
              },
              {
                "name": "minOfOrNull",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.minOfOrNull(    selector: (Boolean) -> R): R?"
                ]
              },
              {
                "name": "minOfWith",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun <R> BooleanArray.minOfWith(    comparator: Comparator<in R>,     selector: (Boolean) -> R): R"
                ]
              },
              {
                "name": "minOfWithOrNull",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R> BooleanArray.minOfWithOrNull(    comparator: Comparator<in R>,     selector: (Boolean) -> R): R?"
                ]
              },
              {
                "name": "minWith",
                "description": [
                  "Returns the first element having the smallest value according to the provided comparator."
                ],
                "code": [
                  "fun BooleanArray.minWith(    comparator: Comparator<in Boolean>): Boolean",
                  "fun BooleanArray.minWith(    comparator: Comparator<in Boolean>): Boolean?"
                ]
              },
              {
                "name": "minWithOrNull",
                "description": [
                  "Returns the first element having the smallest value according to the provided comparator or null if there are no elements."
                ],
                "code": [
                  "fun BooleanArray.minWithOrNull(    comparator: Comparator<in Boolean>): Boolean?"
                ]
              },
              {
                "name": "none",
                "description": [
                  "Returns true if the array has no elements.",
                  "Returns true if no elements match the given predicate."
                ],
                "code": [
                  "fun BooleanArray.none(): Boolean",
                  "fun BooleanArray.none(    predicate: (Boolean) -> Boolean): Boolean"
                ]
              },
              {
                "name": "onEach",
                "description": [
                  "Performs the given action on each element and returns the array itself afterwards."
                ],
                "code": [
                  "fun BooleanArray.onEach(    action: (Boolean) -> Unit): BooleanArray"
                ]
              },
              {
                "name": "onEachIndexed",
                "description": [
                  "Performs the given action on each element, providing sequential index with the element,\nand returns the array itself afterwards."
                ],
                "code": [
                  "fun BooleanArray.onEachIndexed(    action: (index: Int, Boolean) -> Unit): BooleanArray"
                ]
              },
              {
                "name": "partition",
                "description": [
                  "Splits the original array into pair of lists,\nwhere first list contains elements for which predicate yielded true,\nwhile second list contains elements for which predicate yielded false."
                ],
                "code": [
                  "fun BooleanArray.partition(    predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>>"
                ]
              },
              {
                "name": "random",
                "description": [
                  "Returns a random element from this array.",
                  "Returns a random element from this array using the specified source of randomness."
                ],
                "code": [
                  "fun BooleanArray.random(): Boolean",
                  "fun BooleanArray.random(random: Random): Boolean"
                ]
              },
              {
                "name": "randomOrNull",
                "description": [
                  "Returns a random element from this array, or null if this array is empty.",
                  "Returns a random element from this array using the specified source of randomness, or null if this array is empty."
                ],
                "code": [
                  "fun BooleanArray.randomOrNull(): Boolean?",
                  "fun BooleanArray.randomOrNull(random: Random): Boolean?"
                ]
              },
              {
                "name": "reduce",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun BooleanArray.reduce(    operation: (acc: Boolean, Boolean) -> Boolean): Boolean"
                ]
              },
              {
                "name": "reduceIndexed",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original array."
                ],
                "code": [
                  "fun BooleanArray.reduceIndexed(    operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean"
                ]
              },
              {
                "name": "reduceIndexedOrNull",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original array."
                ],
                "code": [
                  "fun BooleanArray.reduceIndexedOrNull(    operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean?"
                ]
              },
              {
                "name": "reduceOrNull",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun BooleanArray.reduceOrNull(    operation: (acc: Boolean, Boolean) -> Boolean): Boolean?"
                ]
              },
              {
                "name": "reduceRight",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun BooleanArray.reduceRight(    operation: (Boolean, acc: Boolean) -> Boolean): Boolean"
                ]
              },
              {
                "name": "reduceRightIndexed",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun BooleanArray.reduceRightIndexed(    operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean"
                ]
              },
              {
                "name": "reduceRightIndexedOrNull",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun BooleanArray.reduceRightIndexedOrNull(    operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean?"
                ]
              },
              {
                "name": "reduceRightOrNull",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun BooleanArray.reduceRightOrNull(    operation: (Boolean, acc: Boolean) -> Boolean): Boolean?"
                ]
              },
              {
                "name": "reverse",
                "description": [
                  "Reverses elements in the array in-place.",
                  "Reverses elements of the array in the specified range in-place."
                ],
                "code": [
                  "fun BooleanArray.reverse()",
                  "fun BooleanArray.reverse(fromIndex: Int, toIndex: Int)"
                ]
              },
              {
                "name": "reversed",
                "description": [
                  "Returns a list with elements in reversed order."
                ],
                "code": ["fun BooleanArray.reversed(): List<Boolean>"]
              },
              {
                "name": "reversedArray",
                "description": [
                  "Returns an array with elements of this array in reversed order."
                ],
                "code": ["fun BooleanArray.reversedArray(): BooleanArray"]
              },
              {
                "name": "runningFold",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> BooleanArray.runningFold(    initial: R,     operation: (acc: R, Boolean) -> R): List<R>"
                ]
              },
              {
                "name": "runningFoldIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> BooleanArray.runningFoldIndexed(    initial: R,     operation: (index: Int, acc: R, Boolean) -> R): List<R>"
                ]
              },
              {
                "name": "runningReduce",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with the first element of this array."
                ],
                "code": [
                  "fun BooleanArray.runningReduce(    operation: (acc: Boolean, Boolean) -> Boolean): List<Boolean>"
                ]
              },
              {
                "name": "runningReduceIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with the first element of this array."
                ],
                "code": [
                  "fun BooleanArray.runningReduceIndexed(    operation: (index: Int, acc: Boolean, Boolean) -> Boolean): List<Boolean>"
                ]
              },
              {
                "name": "scan",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> BooleanArray.scan(    initial: R,     operation: (acc: R, Boolean) -> R): List<R>"
                ]
              },
              {
                "name": "scanIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> BooleanArray.scanIndexed(    initial: R,     operation: (index: Int, acc: R, Boolean) -> R): List<R>"
                ]
              },
              {
                "name": "shuffle",
                "description": [
                  "Randomly shuffles elements in this array in-place.",
                  "Randomly shuffles elements in this array in-place using the specified random instance as the source of randomness."
                ],
                "code": [
                  "fun BooleanArray.shuffle()",
                  "fun BooleanArray.shuffle(random: Random)"
                ]
              },
              {
                "name": "single",
                "description": [
                  "Returns the single element, or throws an exception if the array is empty or has more than one element.",
                  "Returns the single element matching the given predicate, or throws exception if there is no or more than one matching element."
                ],
                "code": [
                  "fun BooleanArray.single(): Boolean",
                  "fun BooleanArray.single(    predicate: (Boolean) -> Boolean): Boolean"
                ]
              },
              {
                "name": "singleOrNull",
                "description": [
                  "Returns single element, or null if the array is empty or has more than one element.",
                  "Returns the single element matching the given predicate, or null if element was not found or more than one element was found."
                ],
                "code": [
                  "fun BooleanArray.singleOrNull(): Boolean?",
                  "fun BooleanArray.singleOrNull(    predicate: (Boolean) -> Boolean): Boolean?"
                ]
              },
              {
                "name": "slice",
                "description": [
                  "Returns a list containing elements at indices in the specified indices range.",
                  "Returns a list containing elements at specified indices."
                ],
                "code": [
                  "fun BooleanArray.slice(indices: IntRange): List<Boolean>",
                  "fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean>"
                ]
              },
              {
                "name": "sliceArray",
                "description": [
                  "Returns an array containing elements of this array at specified indices.",
                  "Returns an array containing elements at indices in the specified indices range."
                ],
                "code": [
                  "fun BooleanArray.sliceArray(    indices: Collection<Int>): BooleanArray",
                  "fun BooleanArray.sliceArray(indices: IntRange): BooleanArray"
                ]
              },
              {
                "name": "sortedBy",
                "description": [
                  "Returns a list of all elements sorted according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <R : Comparable<R>> BooleanArray.sortedBy(    selector: (Boolean) -> R?): List<Boolean>"
                ]
              },
              {
                "name": "sortedByDescending",
                "description": [
                  "Returns a list of all elements sorted descending according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <R : Comparable<R>> BooleanArray.sortedByDescending(    selector: (Boolean) -> R?): List<Boolean>"
                ]
              },
              {
                "name": "sortedWith",
                "description": [
                  "Returns a list of all elements sorted according to the specified comparator."
                ],
                "code": [
                  "fun BooleanArray.sortedWith(    comparator: Comparator<in Boolean>): List<Boolean>"
                ]
              },
              {
                "name": "subtract",
                "description": [
                  "Returns a set containing all elements that are contained by this array and not contained by the specified collection."
                ],
                "code": [
                  "infix fun BooleanArray.subtract(    other: Iterable<Boolean>): Set<Boolean>"
                ]
              },
              {
                "name": "sumBy",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int"
                ]
              },
              {
                "name": "sumByDouble",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun BooleanArray.sumByDouble(    selector: (Boolean) -> Double): Double"
                ]
              },
              {
                "name": "sumOf",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun BooleanArray.sumOf(selector: (Boolean) -> Double): Double",
                  "fun BooleanArray.sumOf(selector: (Boolean) -> Int): Int",
                  "fun BooleanArray.sumOf(selector: (Boolean) -> Long): Long",
                  "fun BooleanArray.sumOf(selector: (Boolean) -> UInt): UInt",
                  "fun BooleanArray.sumOf(selector: (Boolean) -> ULong): ULong",
                  "fun BooleanArray.sumOf(    selector: (Boolean) -> BigDecimal): BigDecimal",
                  "fun BooleanArray.sumOf(    selector: (Boolean) -> BigInteger): BigInteger"
                ]
              },
              {
                "name": "take",
                "description": ["Returns a list containing first n elements."],
                "code": ["fun BooleanArray.take(n: Int): List<Boolean>"]
              },
              {
                "name": "takeLast",
                "description": ["Returns a list containing last n elements."],
                "code": ["fun BooleanArray.takeLast(n: Int): List<Boolean>"]
              },
              {
                "name": "takeLastWhile",
                "description": [
                  "Returns a list containing last elements satisfying the given predicate."
                ],
                "code": [
                  "fun BooleanArray.takeLastWhile(    predicate: (Boolean) -> Boolean): List<Boolean>"
                ]
              },
              {
                "name": "takeWhile",
                "description": [
                  "Returns a list containing first elements satisfying the given predicate."
                ],
                "code": [
                  "fun BooleanArray.takeWhile(    predicate: (Boolean) -> Boolean): List<Boolean>"
                ]
              },
              {
                "name": "toCollection",
                "description": [
                  "Appends all elements to the given destination collection."
                ],
                "code": [
                  "fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(    destination: C): C"
                ]
              },
              {
                "name": "toHashSet",
                "description": ["Returns a new HashSet of all elements."],
                "code": ["fun BooleanArray.toHashSet(): HashSet<Boolean>"]
              },
              {
                "name": "toList",
                "description": ["Returns a List containing all elements."],
                "code": ["fun BooleanArray.toList(): List<Boolean>"]
              },
              {
                "name": "toMutableList",
                "description": [
                  "Returns a new MutableList filled with all elements of this array."
                ],
                "code": [
                  "fun BooleanArray.toMutableList(): MutableList<Boolean>"
                ]
              },
              {
                "name": "toMutableSet",
                "description": [
                  "Returns a new MutableSet containing all distinct elements from the given array."
                ],
                "code": ["fun BooleanArray.toMutableSet(): MutableSet<Boolean>"]
              },
              {
                "name": "toSet",
                "description": ["Returns a Set of all elements."],
                "code": ["fun BooleanArray.toSet(): Set<Boolean>"]
              },
              {
                "name": "toSortedSet",
                "description": ["Returns a new SortedSet of all elements."],
                "code": ["fun BooleanArray.toSortedSet(): SortedSet<Boolean>"]
              },
              {
                "name": "union",
                "description": [
                  "Returns a set containing all distinct elements from both collections."
                ],
                "code": [
                  "infix fun BooleanArray.union(    other: Iterable<Boolean>): Set<Boolean>"
                ]
              },
              {
                "name": "withIndex",
                "description": [
                  "Returns a lazy Iterable that wraps each element of the original array\ninto an IndexedValue containing the index of that element and the element itself."
                ],
                "code": [
                  "fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>>"
                ]
              },
              {
                "name": "zip",
                "description": [
                  "Returns a list of pairs built from the elements of this array and the other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of pairs built from the elements of this collection and other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other collection with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest array."
                ],
                "code": [
                  "infix fun <R> any_array<R>.zip(    other: Array<out R>): List<Pair<Boolean, R>>",
                  "fun <R, V> BooleanArray.zip(    other: Array<out R>,     transform: (a: Boolean, b: R) -> V): List<V>",
                  "infix fun <R> BooleanArray.zip(    other: Iterable<R>): List<Pair<Boolean, R>>",
                  "fun <R, V> BooleanArray.zip(    other: Iterable<R>,     transform: (a: Boolean, b: R) -> V): List<V>",
                  "fun <V> BooleanArray.zip(    other: BooleanArray,     transform: (a: Boolean, b: Boolean) -> V): List<V>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "Byte",
        "description": [
          "Represents a 8-bit signed integer.\nOn the JVM, non-nullable values of this type are represented as values of the primitive type byte."
        ],
        "code": ["class Byte : Number, Comparable<Byte>"],
        "url": "-byte/index.html",
        "subcategories": [
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "compareTo",
                "description": [
                  "Compares this value with the specified value for order.\nReturns zero if this value is equal to the specified other value, a negative number if it's less than other,\nor a positive number if it's greater than other."
                ],
                "code": [
                  "operator fun compareTo(other: Byte): Int",
                  "operator fun compareTo(other: Short): Int",
                  "operator fun compareTo(other: Int): Int",
                  "operator fun compareTo(other: Long): Int",
                  "operator fun compareTo(other: Float): Int",
                  "operator fun compareTo(other: Double): Int"
                ]
              },
              {
                "name": "dec",
                "description": ["Returns this value decremented by one."],
                "code": ["operator fun dec(): Byte"]
              },
              {
                "name": "div",
                "description": [
                  "Divides this value by the other value, truncating the result to an integer that is closer to zero.",
                  "Divides this value by the other value."
                ],
                "code": [
                  "operator fun div(other: Byte): Int",
                  "operator fun div(other: Short): Int",
                  "operator fun div(other: Int): Int",
                  "operator fun div(other: Long): Long",
                  "operator fun div(other: Float): Float",
                  "operator fun div(other: Double): Double"
                ]
              },
              {
                "name": "equals",
                "description": [
                  "Indicates whether some other object is \"equal to\" this one. Implementations must fulfil the following\nrequirements:"
                ],
                "code": [
                  "fun equals(other: Byte): Boolean",
                  "fun equals(other: Any?): Boolean"
                ]
              },
              {
                "name": "hashCode",
                "description": [
                  "Returns a hash code value for the object.  The general contract of hashCode is:"
                ],
                "code": ["fun hashCode(): Int"]
              },
              {
                "name": "inc",
                "description": ["Returns this value incremented by one."],
                "code": ["operator fun inc(): Byte"]
              },
              {
                "name": "minus",
                "description": ["Subtracts the other value from this value."],
                "code": [
                  "operator fun minus(other: Byte): Int",
                  "operator fun minus(other: Short): Int",
                  "operator fun minus(other: Int): Int",
                  "operator fun minus(other: Long): Long",
                  "operator fun minus(other: Float): Float",
                  "operator fun minus(other: Double): Double"
                ]
              },
              {
                "name": "plus",
                "description": ["Adds the other value to this value."],
                "code": [
                  "operator fun plus(other: Byte): Int",
                  "operator fun plus(other: Short): Int",
                  "operator fun plus(other: Int): Int",
                  "operator fun plus(other: Long): Long",
                  "operator fun plus(other: Float): Float",
                  "operator fun plus(other: Double): Double"
                ]
              },
              {
                "name": "rangeTo",
                "description": [
                  "Creates a range from this value to the specified other value."
                ],
                "code": [
                  "operator fun rangeTo(other: Byte): IntRange",
                  "operator fun rangeTo(other: Short): IntRange",
                  "operator fun rangeTo(other: Int): IntRange",
                  "operator fun rangeTo(other: Long): LongRange"
                ]
              },
              {
                "name": "rangeUntil",
                "description": [
                  "Creates a range from this value up to but excluding the specified other value."
                ],
                "code": [
                  "operator fun rangeUntil(other: Byte): IntRange",
                  "operator fun rangeUntil(other: Short): IntRange",
                  "operator fun rangeUntil(other: Int): IntRange",
                  "operator fun rangeUntil(other: Long): LongRange"
                ]
              },
              {
                "name": "rem",
                "description": [
                  "Calculates the remainder of truncating division of this value (dividend) by the other value (divisor)."
                ],
                "code": [
                  "operator fun rem(other: Byte): Int",
                  "operator fun rem(other: Short): Int",
                  "operator fun rem(other: Int): Int",
                  "operator fun rem(other: Long): Long",
                  "operator fun rem(other: Float): Float",
                  "operator fun rem(other: Double): Double"
                ]
              },
              {
                "name": "times",
                "description": ["Multiplies this value by the other value."],
                "code": [
                  "operator fun times(other: Byte): Int",
                  "operator fun times(other: Short): Int",
                  "operator fun times(other: Int): Int",
                  "operator fun times(other: Long): Long",
                  "operator fun times(other: Float): Float",
                  "operator fun times(other: Double): Double"
                ]
              },
              {
                "name": "toByte",
                "description": ["Returns this value."],
                "code": ["fun toByte(): Byte"]
              },
              {
                "name": "toChar",
                "description": ["Converts this Byte value to Char."],
                "code": ["fun toChar(): Char"]
              },
              {
                "name": "toDouble",
                "description": ["Converts this Byte value to Double."],
                "code": ["fun toDouble(): Double"]
              },
              {
                "name": "toFloat",
                "description": ["Converts this Byte value to Float."],
                "code": ["fun toFloat(): Float"]
              },
              {
                "name": "toInt",
                "description": ["Converts this Byte value to Int."],
                "code": ["fun toInt(): Int"]
              },
              {
                "name": "toLong",
                "description": ["Converts this Byte value to Long."],
                "code": ["fun toLong(): Long"]
              },
              {
                "name": "toShort",
                "description": ["Converts this Byte value to Short."],
                "code": ["fun toShort(): Short"]
              },
              {
                "name": "toString",
                "description": [
                  "Returns a string representation of the object."
                ],
                "code": ["fun toString(): String"]
              },
              {
                "name": "unaryMinus",
                "description": ["Returns the negative of this value."],
                "code": ["operator fun unaryMinus(): Int"]
              },
              {
                "name": "unaryPlus",
                "description": ["Returns this value."],
                "code": ["operator fun unaryPlus(): Int"]
              }
            ]
          },
          {
            "name": "Companion Object Properties",
            "declarations": [
              {
                "name": "MAX_VALUE",
                "description": [
                  "A constant holding the maximum value an instance of Byte can have."
                ],
                "code": ["const val MAX_VALUE: Byte"]
              },
              {
                "name": "MIN_VALUE",
                "description": [
                  "A constant holding the minimum value an instance of Byte can have."
                ],
                "code": ["const val MIN_VALUE: Byte"]
              },
              {
                "name": "SIZE_BITS",
                "description": [
                  "The number of bits used to represent an instance of Byte in a binary form."
                ],
                "code": ["const val SIZE_BITS: Int"]
              },
              {
                "name": "SIZE_BYTES",
                "description": [
                  "The number of bytes used to represent an instance of Byte in a binary form."
                ],
                "code": ["const val SIZE_BYTES: Int"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "and",
                "description": [
                  "Performs a bitwise AND operation between the two values."
                ],
                "code": ["infix fun Byte.and(other: Byte): Byte"]
              },
              {
                "name": "coerceAtLeast",
                "description": [
                  "Ensures that this value is not less than the specified minimumValue."
                ],
                "code": [
                  "fun Byte.coerceAtLeast(minimumValue: Byte): Byte",
                  "fun <T : Comparable<T>> T.coerceAtLeast(minimumValue: T): T"
                ]
              },
              {
                "name": "coerceAtMost",
                "description": [
                  "Ensures that this value is not greater than the specified maximumValue."
                ],
                "code": [
                  "fun Byte.coerceAtMost(maximumValue: Byte): Byte",
                  "fun <T : Comparable<T>> T.coerceAtMost(maximumValue: T): T"
                ]
              },
              {
                "name": "coerceIn",
                "description": [
                  "Ensures that this value lies in the specified range minimumValue..maximumValue.",
                  "Ensures that this value lies in the specified range."
                ],
                "code": [
                  "fun Byte.coerceIn(    minimumValue: Byte,     maximumValue: Byte): Byte",
                  "fun <T : Comparable<T>> T.coerceIn(    minimumValue: T?,     maximumValue: T?): T",
                  "fun <T : Comparable<T>> T.coerceIn(    range: ClosedFloatingPointRange<T>): T",
                  "fun <T : Comparable<T>> T.coerceIn(range: ClosedRange<T>): T"
                ]
              },
              {
                "name": "compareTo",
                "description": [
                  "Compares this object with the specified object for order. Returns zero if this object is equal\nto the specified other object, a negative number if it's less than other, or a positive number\nif it's greater than other."
                ],
                "code": ["infix fun <T> Comparable<T>.compareTo(other: T): Int"]
              },
              {
                "name": "convert",
                "description": [],
                "code": ["fun <R : Any> Byte.convert(): R"]
              },
              {
                "name": "countLeadingZeroBits",
                "description": [
                  "Counts the number of consecutive most significant bits that are zero in the binary representation of this Byte number."
                ],
                "code": ["fun Byte.countLeadingZeroBits(): Int"]
              },
              {
                "name": "countOneBits",
                "description": [
                  "Counts the number of set bits in the binary representation of this Byte number."
                ],
                "code": ["fun Byte.countOneBits(): Int"]
              },
              {
                "name": "countTrailingZeroBits",
                "description": [
                  "Counts the number of consecutive least significant bits that are zero in the binary representation of this Byte number."
                ],
                "code": ["fun Byte.countTrailingZeroBits(): Int"]
              },
              {
                "name": "downTo",
                "description": [
                  "Returns a progression from this value down to the specified to value with the step -1."
                ],
                "code": [
                  "infix fun Byte.downTo(to: Byte): IntProgression",
                  "infix fun Byte.downTo(to: Int): IntProgression",
                  "infix fun Byte.downTo(to: Long): LongProgression",
                  "infix fun Byte.downTo(to: Short): IntProgression"
                ]
              },
              {
                "name": "floorDiv",
                "description": [
                  "Divides this value by the other value, flooring the result to an integer that is closer to negative infinity."
                ],
                "code": [
                  "fun Byte.floorDiv(other: Byte): Int",
                  "fun Byte.floorDiv(other: Short): Int",
                  "fun Byte.floorDiv(other: Int): Int",
                  "fun Byte.floorDiv(other: Long): Long"
                ]
              },
              {
                "name": "inv",
                "description": ["Inverts the bits in this value."],
                "code": ["fun Byte.inv(): Byte"]
              },
              {
                "name": "mod",
                "description": [
                  "Calculates the remainder of flooring division of this value (dividend) by the other value (divisor)."
                ],
                "code": [
                  "fun Byte.mod(other: Byte): Byte",
                  "fun Byte.mod(other: Short): Short",
                  "fun Byte.mod(other: Int): Int",
                  "fun Byte.mod(other: Long): Long"
                ]
              },
              {
                "name": "narrow",
                "description": [],
                "code": ["fun <R : Number> Number.narrow(): R"]
              },
              {
                "name": "or",
                "description": [
                  "Performs a bitwise OR operation between the two values."
                ],
                "code": ["infix fun Byte.or(other: Byte): Byte"]
              },
              {
                "name": "rangeTo",
                "description": [
                  "Creates a range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeTo(    that: T): ClosedRange<T>"
                ]
              },
              {
                "name": "rangeUntil",
                "description": [
                  "Creates an open-ended range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeUntil(    that: T): OpenEndRange<T>"
                ]
              },
              {
                "name": "rotateLeft",
                "description": [
                  "Rotates the binary representation of this Byte number left by the specified bitCount number of bits.\nThe most significant bits pushed out from the left side reenter the number as the least significant bits on the right side."
                ],
                "code": ["fun Byte.rotateLeft(bitCount: Int): Byte"]
              },
              {
                "name": "rotateRight",
                "description": [
                  "Rotates the binary representation of this Byte number right by the specified bitCount number of bits.\nThe least significant bits pushed out from the right side reenter the number as the most significant bits on the left side."
                ],
                "code": ["fun Byte.rotateRight(bitCount: Int): Byte"]
              },
              {
                "name": "signExtend",
                "description": [],
                "code": ["fun <R : Number> Number.signExtend(): R"]
              },
              {
                "name": "takeHighestOneBit",
                "description": [
                  "Returns a number having a single bit set in the position of the most significant set bit of this Byte number,\nor zero, if this number is zero."
                ],
                "code": ["fun Byte.takeHighestOneBit(): Byte"]
              },
              {
                "name": "takeLowestOneBit",
                "description": [
                  "Returns a number having a single bit set in the position of the least significant set bit of this Byte number,\nor zero, if this number is zero."
                ],
                "code": ["fun Byte.takeLowestOneBit(): Byte"]
              },
              {
                "name": "toBoolean",
                "description": [],
                "code": ["fun Byte.toBoolean(): Boolean"]
              },
              {
                "name": "toHexString",
                "description": [
                  "Formats this Byte value using the specified format."
                ],
                "code": [
                  "fun Byte.toHexString(    format: HexFormat = HexFormat.Default): String"
                ]
              },
              {
                "name": "toUByte",
                "description": ["Converts this Byte value to UByte."],
                "code": ["fun Byte.toUByte(): UByte"]
              },
              {
                "name": "toUInt",
                "description": ["Converts this Byte value to UInt."],
                "code": ["fun Byte.toUInt(): UInt"]
              },
              {
                "name": "toULong",
                "description": ["Converts this Byte value to ULong."],
                "code": ["fun Byte.toULong(): ULong"]
              },
              {
                "name": "toUShort",
                "description": ["Converts this Byte value to UShort."],
                "code": ["fun Byte.toUShort(): UShort"]
              },
              {
                "name": "until",
                "description": [
                  "Returns a range from this value up to but excluding the specified to value."
                ],
                "code": [
                  "infix fun Byte.until(to: Byte): IntRange",
                  "infix fun Byte.until(to: Int): IntRange",
                  "infix fun Byte.until(to: Long): LongRange",
                  "infix fun Byte.until(to: Short): IntRange"
                ]
              },
              {
                "name": "xor",
                "description": [
                  "Performs a bitwise XOR operation between the two values."
                ],
                "code": ["infix fun Byte.xor(other: Byte): Byte"]
              }
            ]
          }
        ]
      },
      {
        "name": "ByteArray",
        "description": [
          "An array of bytes. When targeting the JVM, instances of this class are represented as byte[]."
        ],
        "code": ["class ByteArray"],
        "url": "-byte-array/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Creates a new array of the specified size, where each element is calculated by calling the specified\ninit function.",
                  "Creates a new array of the specified size, with all elements initialized to zero."
                ],
                "code": [
                  "<init>(size: Int, init: (Int) -> Byte)",
                  "<init>(size: Int)"
                ]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "size",
                "description": ["Returns the number of elements in the array."],
                "code": ["val size: Int"]
              }
            ]
          },
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "get",
                "description": [
                  "Returns the array element at the given index.  This method can be called using the index operator."
                ],
                "code": ["operator fun get(index: Int): Byte"]
              },
              {
                "name": "iterator",
                "description": [
                  "Creates an iterator over the elements of the array."
                ],
                "code": ["operator fun iterator(): ByteIterator"]
              },
              {
                "name": "set",
                "description": [
                  "Sets the element at the given index to the given value. This method can be called using the index operator."
                ],
                "code": ["operator fun set(index: Int, value: Byte)"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "indices",
                "description": [
                  "Returns the range of valid indices for the array."
                ],
                "code": ["val ByteArray.indices: IntRange"]
              },
              {
                "name": "lastIndex",
                "description": ["Returns the last valid index for the array."],
                "code": ["val ByteArray.lastIndex: Int"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "all",
                "description": [
                  "Returns true if all elements match the given predicate."
                ],
                "code": [
                  "fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean"
                ]
              },
              {
                "name": "any",
                "description": [
                  "Returns true if array has at least one element.",
                  "Returns true if at least one element matches the given predicate."
                ],
                "code": [
                  "fun ByteArray.any(): Boolean",
                  "fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean"
                ]
              },
              {
                "name": "asIterable",
                "description": [
                  "Creates an Iterable instance that wraps the original array returning its elements when being iterated."
                ],
                "code": ["fun ByteArray.asIterable(): Iterable<Byte>"]
              },
              {
                "name": "asSequence",
                "description": [
                  "Creates a Sequence instance that wraps the original array returning its elements when being iterated."
                ],
                "code": ["fun ByteArray.asSequence(): Sequence<Byte>"]
              },
              {
                "name": "associate",
                "description": [
                  "Returns a Map containing key-value pairs provided by transform function\napplied to elements of the given array."
                ],
                "code": [
                  "fun <K, V> ByteArray.associate(    transform: (Byte) -> Pair<K, V>): Map<K, V>"
                ]
              },
              {
                "name": "associateBy",
                "description": [
                  "Returns a Map containing the elements from the given array indexed by the key\nreturned from keySelector function applied to each element.",
                  "Returns a Map containing the values provided by valueTransform and indexed by keySelector functions applied to elements of the given array."
                ],
                "code": [
                  "fun <K> ByteArray.associateBy(    keySelector: (Byte) -> K): Map<K, Byte>",
                  "fun <K, V> ByteArray.associateBy(    keySelector: (Byte) -> K,     valueTransform: (Byte) -> V): Map<K, V>"
                ]
              },
              {
                "name": "associateByTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function applied to each element of the given array\nand value is the element itself.",
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function and\nand value is provided by the valueTransform function applied to elements of the given array."
                ],
                "code": [
                  "fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(    destination: M,     keySelector: (Byte) -> K): M",
                  "fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(    destination: M,     keySelector: (Byte) -> K,     valueTransform: (Byte) -> V): M"
                ]
              },
              {
                "name": "associateTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs\nprovided by transform function applied to each element of the given array."
                ],
                "code": [
                  "fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(    destination: M,     transform: (Byte) -> Pair<K, V>): M"
                ]
              },
              {
                "name": "associateWith",
                "description": [
                  "Returns a Map where keys are elements from the given array and values are\nproduced by the valueSelector function applied to each element."
                ],
                "code": [
                  "fun <V> ByteArray.associateWith(    valueSelector: (Byte) -> V): Map<Byte, V>"
                ]
              },
              {
                "name": "associateWithTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs for each element of the given array,\nwhere key is the element itself and value is provided by the valueSelector function applied to that key."
                ],
                "code": [
                  "fun <V, M : MutableMap<in Byte, in V>> ByteArray.associateWithTo(    destination: M,     valueSelector: (Byte) -> V): M"
                ]
              },
              {
                "name": "asUByteArray",
                "description": [
                  "Returns an array of type UByteArray, which is a view of this array where each element is an unsigned reinterpretation\nof the corresponding element of this array."
                ],
                "code": ["fun ByteArray.asUByteArray(): UByteArray"]
              },
              {
                "name": "average",
                "description": [
                  "Returns an average value of elements in the array."
                ],
                "code": ["fun ByteArray.average(): Double"]
              },
              {
                "name": "binarySearch",
                "description": [
                  "Searches the array or the range of the array for the provided element using the binary search algorithm.\nThe array is expected to be sorted, otherwise the result is undefined."
                ],
                "code": [
                  "fun ByteArray.binarySearch(    element: Byte,     fromIndex: Int = 0,     toIndex: Int = size): Int"
                ]
              },
              {
                "name": "component1",
                "description": ["Returns 1st element from the array."],
                "code": ["operator fun ByteArray.component1(): Byte"]
              },
              {
                "name": "component2",
                "description": ["Returns 2nd element from the array."],
                "code": ["operator fun ByteArray.component2(): Byte"]
              },
              {
                "name": "component3",
                "description": ["Returns 3rd element from the array."],
                "code": ["operator fun ByteArray.component3(): Byte"]
              },
              {
                "name": "component4",
                "description": ["Returns 4th element from the array."],
                "code": ["operator fun ByteArray.component4(): Byte"]
              },
              {
                "name": "component5",
                "description": ["Returns 5th element from the array."],
                "code": ["operator fun ByteArray.component5(): Byte"]
              },
              {
                "name": "contains",
                "description": [
                  "Returns true if element is found in the array."
                ],
                "code": [
                  "operator fun ByteArray.contains(element: Byte): Boolean"
                ]
              },
              {
                "name": "contentEquals",
                "description": [
                  "Returns true if the two specified arrays are structurally equal to one another,\ni.e. contain the same number of the same elements in the same order."
                ],
                "code": [
                  "infix fun ByteArray.contentEquals(other: ByteArray): Boolean"
                ]
              },
              {
                "name": "contentHashCode",
                "description": [
                  "Returns a hash code based on the contents of this array as if it is List."
                ],
                "code": ["fun ByteArray.contentHashCode(): Int"]
              },
              {
                "name": "contentToString",
                "description": [
                  "Returns a string representation of the contents of the specified array as if it is List."
                ],
                "code": ["fun ByteArray.contentToString(): String"]
              },
              {
                "name": "count",
                "description": [
                  "Returns the number of elements in this array.",
                  "Returns the number of elements matching the given predicate."
                ],
                "code": [
                  "fun ByteArray.count(): Int",
                  "fun ByteArray.count(predicate: (Byte) -> Boolean): Int"
                ]
              },
              {
                "name": "distinct",
                "description": [
                  "Returns a list containing only distinct elements from the given array."
                ],
                "code": ["fun ByteArray.distinct(): List<Byte>"]
              },
              {
                "name": "distinctBy",
                "description": [
                  "Returns a list containing only elements from the given array\nhaving distinct keys returned by the given selector function."
                ],
                "code": [
                  "fun <K> ByteArray.distinctBy(    selector: (Byte) -> K): List<Byte>"
                ]
              },
              {
                "name": "drop",
                "description": [
                  "Returns a list containing all elements except first n elements."
                ],
                "code": ["fun ByteArray.drop(n: Int): List<Byte>"]
              },
              {
                "name": "dropLast",
                "description": [
                  "Returns a list containing all elements except last n elements."
                ],
                "code": ["fun ByteArray.dropLast(n: Int): List<Byte>"]
              },
              {
                "name": "dropLastWhile",
                "description": [
                  "Returns a list containing all elements except last elements that satisfy the given predicate."
                ],
                "code": [
                  "fun ByteArray.dropLastWhile(    predicate: (Byte) -> Boolean): List<Byte>"
                ]
              },
              {
                "name": "dropWhile",
                "description": [
                  "Returns a list containing all elements except first elements that satisfy the given predicate."
                ],
                "code": [
                  "fun ByteArray.dropWhile(    predicate: (Byte) -> Boolean): List<Byte>"
                ]
              },
              {
                "name": "elementAtOrElse",
                "description": [
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
                ],
                "code": [
                  "fun ByteArray.elementAtOrElse(    index: Int,     defaultValue: (Int) -> Byte): Byte"
                ]
              },
              {
                "name": "elementAtOrNull",
                "description": [
                  "Returns an element at the given index or null if the index is out of bounds of this array."
                ],
                "code": ["fun ByteArray.elementAtOrNull(index: Int): Byte?"]
              },
              {
                "name": "filter",
                "description": [
                  "Returns a list containing only elements matching the given predicate."
                ],
                "code": [
                  "fun ByteArray.filter(    predicate: (Byte) -> Boolean): List<Byte>"
                ]
              },
              {
                "name": "filterIndexed",
                "description": [
                  "Returns a list containing only elements matching the given predicate."
                ],
                "code": [
                  "fun ByteArray.filterIndexed(    predicate: (index: Int, Byte) -> Boolean): List<Byte>"
                ]
              },
              {
                "name": "filterIndexedTo",
                "description": [
                  "Appends all elements matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(    destination: C,     predicate: (index: Int, Byte) -> Boolean): C"
                ]
              },
              {
                "name": "filterNot",
                "description": [
                  "Returns a list containing all elements not matching the given predicate."
                ],
                "code": [
                  "fun ByteArray.filterNot(    predicate: (Byte) -> Boolean): List<Byte>"
                ]
              },
              {
                "name": "filterNotTo",
                "description": [
                  "Appends all elements not matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(    destination: C,     predicate: (Byte) -> Boolean): C"
                ]
              },
              {
                "name": "filterTo",
                "description": [
                  "Appends all elements matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in Byte>> ByteArray.filterTo(    destination: C,     predicate: (Byte) -> Boolean): C"
                ]
              },
              {
                "name": "find",
                "description": [
                  "Returns the first element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun ByteArray.find(predicate: (Byte) -> Boolean): Byte?"
                ]
              },
              {
                "name": "findLast",
                "description": [
                  "Returns the last element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte?"
                ]
              },
              {
                "name": "first",
                "description": [
                  "Returns the first element.",
                  "Returns the first element matching the given predicate."
                ],
                "code": [
                  "fun ByteArray.first(): Byte",
                  "fun ByteArray.first(predicate: (Byte) -> Boolean): Byte"
                ]
              },
              {
                "name": "firstOrNull",
                "description": [
                  "Returns the first element, or null if the array is empty.",
                  "Returns the first element matching the given predicate, or null if element was not found."
                ],
                "code": [
                  "fun ByteArray.firstOrNull(): Byte?",
                  "fun ByteArray.firstOrNull(    predicate: (Byte) -> Boolean): Byte?"
                ]
              },
              {
                "name": "flatMap",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element of original array."
                ],
                "code": [
                  "fun <R> ByteArray.flatMap(    transform: (Byte) -> Iterable<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexed",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element\nand its index in the original array."
                ],
                "code": [
                  "fun <R> ByteArray.flatMapIndexed(    transform: (index: Int, Byte) -> Iterable<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexedTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each element\nand its index in the original array, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> ByteArray.flatMapIndexedTo(    destination: C,     transform: (index: Int, Byte) -> Iterable<R>): C"
                ]
              },
              {
                "name": "flatMapTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each element of original array, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(    destination: C,     transform: (Byte) -> Iterable<R>): C"
                ]
              },
              {
                "name": "fold",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun <R> ByteArray.fold(    initial: R,     operation: (acc: R, Byte) -> R): R"
                ]
              },
              {
                "name": "foldIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element with its index in the original array."
                ],
                "code": [
                  "fun <R> ByteArray.foldIndexed(    initial: R,     operation: (index: Int, acc: R, Byte) -> R): R"
                ]
              },
              {
                "name": "foldRight",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun <R> ByteArray.foldRight(    initial: R,     operation: (Byte, acc: R) -> R): R"
                ]
              },
              {
                "name": "foldRightIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun <R> ByteArray.foldRightIndexed(    initial: R,     operation: (index: Int, Byte, acc: R) -> R): R"
                ]
              },
              {
                "name": "forEach",
                "description": ["Performs the given action on each element."],
                "code": ["fun ByteArray.forEach(action: (Byte) -> Unit)"]
              },
              {
                "name": "forEachIndexed",
                "description": [
                  "Performs the given action on each element, providing sequential index with the element."
                ],
                "code": [
                  "fun ByteArray.forEachIndexed(    action: (index: Int, Byte) -> Unit)"
                ]
              },
              {
                "name": "getCharAt",
                "description": [
                  "Gets Char out of the ByteArray byte buffer at specified index index"
                ],
                "code": ["fun ByteArray.getCharAt(index: Int): Char"]
              },
              {
                "name": "getDoubleAt",
                "description": [
                  "Gets Double out of the ByteArray byte buffer at specified index index"
                ],
                "code": ["fun ByteArray.getDoubleAt(index: Int): Double"]
              },
              {
                "name": "getFloatAt",
                "description": [
                  "Gets Float out of the ByteArray byte buffer at specified index index"
                ],
                "code": ["fun ByteArray.getFloatAt(index: Int): Float"]
              },
              {
                "name": "getIntAt",
                "description": [
                  "Gets Int out of the ByteArray byte buffer at specified index index"
                ],
                "code": ["fun ByteArray.getIntAt(index: Int): Int"]
              },
              {
                "name": "getLongAt",
                "description": [
                  "Gets Long out of the ByteArray byte buffer at specified index index"
                ],
                "code": ["fun ByteArray.getLongAt(index: Int): Long"]
              },
              {
                "name": "getOrElse",
                "description": [
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
                ],
                "code": [
                  "fun ByteArray.getOrElse(    index: Int,     defaultValue: (Int) -> Byte): Byte"
                ]
              },
              {
                "name": "getOrNull",
                "description": [
                  "Returns an element at the given index or null if the index is out of bounds of this array."
                ],
                "code": ["fun ByteArray.getOrNull(index: Int): Byte?"]
              },
              {
                "name": "getShortAt",
                "description": [
                  "Gets Short out of the ByteArray byte buffer at specified index index"
                ],
                "code": ["fun ByteArray.getShortAt(index: Int): Short"]
              },
              {
                "name": "getUByteAt",
                "description": [
                  "Gets UByte out of the ByteArray byte buffer at specified index index"
                ],
                "code": ["fun ByteArray.getUByteAt(index: Int): UByte"]
              },
              {
                "name": "getUIntAt",
                "description": [
                  "Gets UInt out of the ByteArray byte buffer at specified index index"
                ],
                "code": ["fun ByteArray.getUIntAt(index: Int): UInt"]
              },
              {
                "name": "getULongAt",
                "description": [
                  "Gets ULong out of the ByteArray byte buffer at specified index index"
                ],
                "code": ["fun ByteArray.getULongAt(index: Int): ULong"]
              },
              {
                "name": "getUShortAt",
                "description": [
                  "Gets UShort out of the ByteArray byte buffer at specified index index"
                ],
                "code": ["fun ByteArray.getUShortAt(index: Int): UShort"]
              },
              {
                "name": "groupBy",
                "description": [
                  "Groups elements of the original array by the key returned by the given keySelector function\napplied to each element and returns a map where each group key is associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original array\nby the key returned by the given keySelector function applied to the element\nand returns a map where each group key is associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K> ByteArray.groupBy(    keySelector: (Byte) -> K): Map<K, List<Byte>>",
                  "fun <K, V> ByteArray.groupBy(    keySelector: (Byte) -> K,     valueTransform: (Byte) -> V): Map<K, List<V>>"
                ]
              },
              {
                "name": "groupByTo",
                "description": [
                  "Groups elements of the original array by the key returned by the given keySelector function\napplied to each element and puts to the destination map each group key associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original array\nby the key returned by the given keySelector function applied to the element\nand puts to the destination map each group key associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(    destination: M,     keySelector: (Byte) -> K): M",
                  "fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(    destination: M,     keySelector: (Byte) -> K,     valueTransform: (Byte) -> V): M"
                ]
              },
              {
                "name": "indexOf",
                "description": [
                  "Returns first index of element, or -1 if the array does not contain element."
                ],
                "code": ["fun ByteArray.indexOf(element: Byte): Int"]
              },
              {
                "name": "indexOfFirst",
                "description": [
                  "Returns index of the first element matching the given predicate, or -1 if the array does not contain such element."
                ],
                "code": [
                  "fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int"
                ]
              },
              {
                "name": "indexOfLast",
                "description": [
                  "Returns index of the last element matching the given predicate, or -1 if the array does not contain such element."
                ],
                "code": [
                  "fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int"
                ]
              },
              {
                "name": "inputStream",
                "description": [
                  "Creates an input stream for reading data from this byte array.",
                  "Creates an input stream for reading data from the specified portion of this byte array."
                ],
                "code": [
                  "fun ByteArray.inputStream(): ByteArrayInputStream",
                  "fun ByteArray.inputStream(    offset: Int,     length: Int): ByteArrayInputStream"
                ]
              },
              {
                "name": "intersect",
                "description": [
                  "Returns a set containing all elements that are contained by both this array and the specified collection."
                ],
                "code": [
                  "infix fun ByteArray.intersect(    other: Iterable<Byte>): Set<Byte>"
                ]
              },
              {
                "name": "isEmpty",
                "description": ["Returns true if the array is empty."],
                "code": ["fun ByteArray.isEmpty(): Boolean"]
              },
              {
                "name": "isNotEmpty",
                "description": ["Returns true if the array is not empty."],
                "code": ["fun ByteArray.isNotEmpty(): Boolean"]
              },
              {
                "name": "joinTo",
                "description": [
                  "Appends the string from all the elements separated using separator and using the given prefix and postfix if supplied."
                ],
                "code": [
                  "fun <A : Appendable> ByteArray.joinTo(    buffer: A,     separator: CharSequence = \", \",     prefix: CharSequence = \"\",     postfix: CharSequence = \"\",     limit: Int = -1,     truncated: CharSequence = \"...\",     transform: ((Byte) -> CharSequence)? = null): A"
                ]
              },
              {
                "name": "joinToString",
                "description": [
                  "Creates a string from all the elements separated using separator and using the given prefix and postfix if supplied."
                ],
                "code": [
                  "fun ByteArray.joinToString(    separator: CharSequence = \", \",     prefix: CharSequence = \"\",     postfix: CharSequence = \"\",     limit: Int = -1,     truncated: CharSequence = \"...\",     transform: ((Byte) -> CharSequence)? = null): String"
                ]
              },
              {
                "name": "last",
                "description": [
                  "Returns the last element.",
                  "Returns the last element matching the given predicate."
                ],
                "code": [
                  "fun ByteArray.last(): Byte",
                  "fun ByteArray.last(predicate: (Byte) -> Boolean): Byte"
                ]
              },
              {
                "name": "lastIndexOf",
                "description": [
                  "Returns last index of element, or -1 if the array does not contain element."
                ],
                "code": ["fun ByteArray.lastIndexOf(element: Byte): Int"]
              },
              {
                "name": "lastOrNull",
                "description": [
                  "Returns the last element, or null if the array is empty.",
                  "Returns the last element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun ByteArray.lastOrNull(): Byte?",
                  "fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte?"
                ]
              },
              {
                "name": "map",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each element in the original array."
                ],
                "code": [
                  "fun <R> ByteArray.map(transform: (Byte) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexed",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each element and its index in the original array."
                ],
                "code": [
                  "fun <R> ByteArray.mapIndexed(    transform: (index: Int, Byte) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexedTo",
                "description": [
                  "Applies the given transform function to each element and its index in the original array\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(    destination: C,     transform: (index: Int, Byte) -> R): C"
                ]
              },
              {
                "name": "mapTo",
                "description": [
                  "Applies the given transform function to each element of the original array\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> ByteArray.mapTo(    destination: C,     transform: (Byte) -> R): C"
                ]
              },
              {
                "name": "maxByOrNull",
                "description": [
                  "Returns the first element yielding the largest value of the given function or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> ByteArray.maxByOrNull(    selector: (Byte) -> R): Byte?"
                ]
              },
              {
                "name": "maxOf",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each element in the array."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.maxOf(    selector: (Byte) -> R): R"
                ]
              },
              {
                "name": "maxOfOrNull",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.maxOfOrNull(    selector: (Byte) -> R): R?"
                ]
              },
              {
                "name": "maxOfWith",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun <R> ByteArray.maxOfWith(    comparator: Comparator<in R>,     selector: (Byte) -> R): R"
                ]
              },
              {
                "name": "maxOfWithOrNull",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R> ByteArray.maxOfWithOrNull(    comparator: Comparator<in R>,     selector: (Byte) -> R): R?"
                ]
              },
              {
                "name": "maxOrNull",
                "description": [
                  "Returns the largest element or null if there are no elements."
                ],
                "code": ["fun ByteArray.maxOrNull(): Byte?"]
              },
              {
                "name": "maxWith",
                "description": [
                  "Returns the first element having the largest value according to the provided comparator."
                ],
                "code": [
                  "fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte",
                  "fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte?"
                ]
              },
              {
                "name": "maxWithOrNull",
                "description": [
                  "Returns the first element having the largest value according to the provided comparator or null if there are no elements."
                ],
                "code": [
                  "fun ByteArray.maxWithOrNull(    comparator: Comparator<in Byte>): Byte?"
                ]
              },
              {
                "name": "minByOrNull",
                "description": [
                  "Returns the first element yielding the smallest value of the given function or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> ByteArray.minByOrNull(    selector: (Byte) -> R): Byte?"
                ]
              },
              {
                "name": "minOf",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the array."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.minOf(    selector: (Byte) -> R): R"
                ]
              },
              {
                "name": "minOfOrNull",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.minOfOrNull(    selector: (Byte) -> R): R?"
                ]
              },
              {
                "name": "minOfWith",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun <R> ByteArray.minOfWith(    comparator: Comparator<in R>,     selector: (Byte) -> R): R"
                ]
              },
              {
                "name": "minOfWithOrNull",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R> ByteArray.minOfWithOrNull(    comparator: Comparator<in R>,     selector: (Byte) -> R): R?"
                ]
              },
              {
                "name": "minOrNull",
                "description": [
                  "Returns the smallest element or null if there are no elements."
                ],
                "code": ["fun ByteArray.minOrNull(): Byte?"]
              },
              {
                "name": "minWith",
                "description": [
                  "Returns the first element having the smallest value according to the provided comparator."
                ],
                "code": [
                  "fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte",
                  "fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte?"
                ]
              },
              {
                "name": "minWithOrNull",
                "description": [
                  "Returns the first element having the smallest value according to the provided comparator or null if there are no elements."
                ],
                "code": [
                  "fun ByteArray.minWithOrNull(    comparator: Comparator<in Byte>): Byte?"
                ]
              },
              {
                "name": "none",
                "description": [
                  "Returns true if the array has no elements.",
                  "Returns true if no elements match the given predicate."
                ],
                "code": [
                  "fun ByteArray.none(): Boolean",
                  "fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean"
                ]
              },
              {
                "name": "onEach",
                "description": [
                  "Performs the given action on each element and returns the array itself afterwards."
                ],
                "code": [
                  "fun ByteArray.onEach(action: (Byte) -> Unit): ByteArray"
                ]
              },
              {
                "name": "onEachIndexed",
                "description": [
                  "Performs the given action on each element, providing sequential index with the element,\nand returns the array itself afterwards."
                ],
                "code": [
                  "fun ByteArray.onEachIndexed(    action: (index: Int, Byte) -> Unit): ByteArray"
                ]
              },
              {
                "name": "partition",
                "description": [
                  "Splits the original array into pair of lists,\nwhere first list contains elements for which predicate yielded true,\nwhile second list contains elements for which predicate yielded false."
                ],
                "code": [
                  "fun ByteArray.partition(    predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>>"
                ]
              },
              {
                "name": "random",
                "description": [
                  "Returns a random element from this array.",
                  "Returns a random element from this array using the specified source of randomness."
                ],
                "code": [
                  "fun ByteArray.random(): Byte",
                  "fun ByteArray.random(random: Random): Byte"
                ]
              },
              {
                "name": "randomOrNull",
                "description": [
                  "Returns a random element from this array, or null if this array is empty.",
                  "Returns a random element from this array using the specified source of randomness, or null if this array is empty."
                ],
                "code": [
                  "fun ByteArray.randomOrNull(): Byte?",
                  "fun ByteArray.randomOrNull(random: Random): Byte?"
                ]
              },
              {
                "name": "reduce",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun ByteArray.reduce(    operation: (acc: Byte, Byte) -> Byte): Byte"
                ]
              },
              {
                "name": "reduceIndexed",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original array."
                ],
                "code": [
                  "fun ByteArray.reduceIndexed(    operation: (index: Int, acc: Byte, Byte) -> Byte): Byte"
                ]
              },
              {
                "name": "reduceIndexedOrNull",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original array."
                ],
                "code": [
                  "fun ByteArray.reduceIndexedOrNull(    operation: (index: Int, acc: Byte, Byte) -> Byte): Byte?"
                ]
              },
              {
                "name": "reduceOrNull",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun ByteArray.reduceOrNull(    operation: (acc: Byte, Byte) -> Byte): Byte?"
                ]
              },
              {
                "name": "reduceRight",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun ByteArray.reduceRight(    operation: (Byte, acc: Byte) -> Byte): Byte"
                ]
              },
              {
                "name": "reduceRightIndexed",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun ByteArray.reduceRightIndexed(    operation: (index: Int, Byte, acc: Byte) -> Byte): Byte"
                ]
              },
              {
                "name": "reduceRightIndexedOrNull",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun ByteArray.reduceRightIndexedOrNull(    operation: (index: Int, Byte, acc: Byte) -> Byte): Byte?"
                ]
              },
              {
                "name": "reduceRightOrNull",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun ByteArray.reduceRightOrNull(    operation: (Byte, acc: Byte) -> Byte): Byte?"
                ]
              },
              {
                "name": "refTo",
                "description": [],
                "code": ["fun ByteArray.refTo(index: Int): CValuesRef<ByteVar>"]
              },
              {
                "name": "reverse",
                "description": [
                  "Reverses elements in the array in-place.",
                  "Reverses elements of the array in the specified range in-place."
                ],
                "code": [
                  "fun ByteArray.reverse()",
                  "fun ByteArray.reverse(fromIndex: Int, toIndex: Int)"
                ]
              },
              {
                "name": "reversed",
                "description": [
                  "Returns a list with elements in reversed order."
                ],
                "code": ["fun ByteArray.reversed(): List<Byte>"]
              },
              {
                "name": "reversedArray",
                "description": [
                  "Returns an array with elements of this array in reversed order."
                ],
                "code": ["fun ByteArray.reversedArray(): ByteArray"]
              },
              {
                "name": "runningFold",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> ByteArray.runningFold(    initial: R,     operation: (acc: R, Byte) -> R): List<R>"
                ]
              },
              {
                "name": "runningFoldIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> ByteArray.runningFoldIndexed(    initial: R,     operation: (index: Int, acc: R, Byte) -> R): List<R>"
                ]
              },
              {
                "name": "runningReduce",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with the first element of this array."
                ],
                "code": [
                  "fun ByteArray.runningReduce(    operation: (acc: Byte, Byte) -> Byte): List<Byte>"
                ]
              },
              {
                "name": "runningReduceIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with the first element of this array."
                ],
                "code": [
                  "fun ByteArray.runningReduceIndexed(    operation: (index: Int, acc: Byte, Byte) -> Byte): List<Byte>"
                ]
              },
              {
                "name": "scan",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> ByteArray.scan(    initial: R,     operation: (acc: R, Byte) -> R): List<R>"
                ]
              },
              {
                "name": "scanIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> ByteArray.scanIndexed(    initial: R,     operation: (index: Int, acc: R, Byte) -> R): List<R>"
                ]
              },
              {
                "name": "setCharAt",
                "description": [
                  "Sets Char out of the ByteArray byte buffer at specified index index"
                ],
                "code": ["fun ByteArray.setCharAt(index: Int, value: Char)"]
              },
              {
                "name": "setDoubleAt",
                "description": [
                  "Sets Double out of the ByteArray byte buffer at specified index index"
                ],
                "code": ["fun ByteArray.setDoubleAt(index: Int, value: Double)"]
              },
              {
                "name": "setFloatAt",
                "description": [
                  "Sets Float out of the ByteArray byte buffer at specified index index"
                ],
                "code": ["fun ByteArray.setFloatAt(index: Int, value: Float)"]
              },
              {
                "name": "setIntAt",
                "description": [
                  "Sets Int out of the ByteArray byte buffer at specified index index"
                ],
                "code": ["fun ByteArray.setIntAt(index: Int, value: Int)"]
              },
              {
                "name": "setLongAt",
                "description": [
                  "Sets Long out of the ByteArray byte buffer at specified index index"
                ],
                "code": ["fun ByteArray.setLongAt(index: Int, value: Long)"]
              },
              {
                "name": "setShortAt",
                "description": [
                  "Sets Short out of the ByteArray byte buffer at specified index index"
                ],
                "code": ["fun ByteArray.setShortAt(index: Int, value: Short)"]
              },
              {
                "name": "setUByteAt",
                "description": [
                  "Sets UByte out of the ByteArray byte buffer at specified index index"
                ],
                "code": ["fun ByteArray.setUByteAt(index: Int, value: UByte)"]
              },
              {
                "name": "setUIntAt",
                "description": [
                  "Sets UInt out of the ByteArray byte buffer at specified index index"
                ],
                "code": ["fun ByteArray.setUIntAt(index: Int, value: UInt)"]
              },
              {
                "name": "setULongAt",
                "description": [
                  "Sets ULong out of the ByteArray byte buffer at specified index index"
                ],
                "code": ["fun ByteArray.setULongAt(index: Int, value: ULong)"]
              },
              {
                "name": "setUShortAt",
                "description": [
                  "Sets UShort out of the ByteArray byte buffer at specified index index"
                ],
                "code": ["fun ByteArray.setUShortAt(index: Int, value: UShort)"]
              },
              {
                "name": "shuffle",
                "description": [
                  "Randomly shuffles elements in this array in-place.",
                  "Randomly shuffles elements in this array in-place using the specified random instance as the source of randomness."
                ],
                "code": [
                  "fun ByteArray.shuffle()",
                  "fun ByteArray.shuffle(random: Random)"
                ]
              },
              {
                "name": "single",
                "description": [
                  "Returns the single element, or throws an exception if the array is empty or has more than one element.",
                  "Returns the single element matching the given predicate, or throws exception if there is no or more than one matching element."
                ],
                "code": [
                  "fun ByteArray.single(): Byte",
                  "fun ByteArray.single(predicate: (Byte) -> Boolean): Byte"
                ]
              },
              {
                "name": "singleOrNull",
                "description": [
                  "Returns single element, or null if the array is empty or has more than one element.",
                  "Returns the single element matching the given predicate, or null if element was not found or more than one element was found."
                ],
                "code": [
                  "fun ByteArray.singleOrNull(): Byte?",
                  "fun ByteArray.singleOrNull(    predicate: (Byte) -> Boolean): Byte?"
                ]
              },
              {
                "name": "slice",
                "description": [
                  "Returns a list containing elements at indices in the specified indices range.",
                  "Returns a list containing elements at specified indices."
                ],
                "code": [
                  "fun ByteArray.slice(indices: IntRange): List<Byte>",
                  "fun ByteArray.slice(indices: Iterable<Int>): List<Byte>"
                ]
              },
              {
                "name": "sliceArray",
                "description": [
                  "Returns an array containing elements of this array at specified indices.",
                  "Returns an array containing elements at indices in the specified indices range."
                ],
                "code": [
                  "fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray",
                  "fun ByteArray.sliceArray(indices: IntRange): ByteArray"
                ]
              },
              {
                "name": "sort",
                "description": [
                  "Sorts the array in-place according to the order specified by the given comparison function."
                ],
                "code": [
                  "fun ByteArray.sort(comparison: (a: Byte, b: Byte) -> Int)"
                ]
              },
              {
                "name": "sortDescending",
                "description": [
                  "Sorts elements in the array in-place descending according to their natural sort order.",
                  "Sorts elements of the array in the specified range in-place.\nThe elements are sorted descending according to their natural sort order."
                ],
                "code": [
                  "fun ByteArray.sortDescending()",
                  "fun ByteArray.sortDescending(fromIndex: Int, toIndex: Int)"
                ]
              },
              {
                "name": "sorted",
                "description": [
                  "Returns a list of all elements sorted according to their natural sort order."
                ],
                "code": ["fun ByteArray.sorted(): List<Byte>"]
              },
              {
                "name": "sortedArray",
                "description": [
                  "Returns an array with all elements of this array sorted according to their natural sort order."
                ],
                "code": ["fun ByteArray.sortedArray(): ByteArray"]
              },
              {
                "name": "sortedArrayDescending",
                "description": [
                  "Returns an array with all elements of this array sorted descending according to their natural sort order."
                ],
                "code": ["fun ByteArray.sortedArrayDescending(): ByteArray"]
              },
              {
                "name": "sortedBy",
                "description": [
                  "Returns a list of all elements sorted according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <R : Comparable<R>> ByteArray.sortedBy(    selector: (Byte) -> R?): List<Byte>"
                ]
              },
              {
                "name": "sortedByDescending",
                "description": [
                  "Returns a list of all elements sorted descending according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <R : Comparable<R>> ByteArray.sortedByDescending(    selector: (Byte) -> R?): List<Byte>"
                ]
              },
              {
                "name": "sortedDescending",
                "description": [
                  "Returns a list of all elements sorted descending according to their natural sort order."
                ],
                "code": ["fun ByteArray.sortedDescending(): List<Byte>"]
              },
              {
                "name": "sortedWith",
                "description": [
                  "Returns a list of all elements sorted according to the specified comparator."
                ],
                "code": [
                  "fun ByteArray.sortedWith(    comparator: Comparator<in Byte>): List<Byte>"
                ]
              },
              {
                "name": "subtract",
                "description": [
                  "Returns a set containing all elements that are contained by this array and not contained by the specified collection."
                ],
                "code": [
                  "infix fun ByteArray.subtract(    other: Iterable<Byte>): Set<Byte>"
                ]
              },
              {
                "name": "sum",
                "description": [
                  "Returns the sum of all elements in the array."
                ],
                "code": ["fun ByteArray.sum(): Int"]
              },
              {
                "name": "sumBy",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array."
                ],
                "code": ["fun ByteArray.sumBy(selector: (Byte) -> Int): Int"]
              },
              {
                "name": "sumByDouble",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double"
                ]
              },
              {
                "name": "sumOf",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun ByteArray.sumOf(selector: (Byte) -> Double): Double",
                  "fun ByteArray.sumOf(selector: (Byte) -> Int): Int",
                  "fun ByteArray.sumOf(selector: (Byte) -> Long): Long",
                  "fun ByteArray.sumOf(selector: (Byte) -> UInt): UInt",
                  "fun ByteArray.sumOf(selector: (Byte) -> ULong): ULong",
                  "fun ByteArray.sumOf(    selector: (Byte) -> BigDecimal): BigDecimal",
                  "fun ByteArray.sumOf(    selector: (Byte) -> BigInteger): BigInteger"
                ]
              },
              {
                "name": "take",
                "description": ["Returns a list containing first n elements."],
                "code": ["fun ByteArray.take(n: Int): List<Byte>"]
              },
              {
                "name": "takeLast",
                "description": ["Returns a list containing last n elements."],
                "code": ["fun ByteArray.takeLast(n: Int): List<Byte>"]
              },
              {
                "name": "takeLastWhile",
                "description": [
                  "Returns a list containing last elements satisfying the given predicate."
                ],
                "code": [
                  "fun ByteArray.takeLastWhile(    predicate: (Byte) -> Boolean): List<Byte>"
                ]
              },
              {
                "name": "takeWhile",
                "description": [
                  "Returns a list containing first elements satisfying the given predicate."
                ],
                "code": [
                  "fun ByteArray.takeWhile(    predicate: (Byte) -> Boolean): List<Byte>"
                ]
              },
              {
                "name": "toCollection",
                "description": [
                  "Appends all elements to the given destination collection."
                ],
                "code": [
                  "fun <C : MutableCollection<in Byte>> ByteArray.toCollection(    destination: C): C"
                ]
              },
              {
                "name": "toCValues",
                "description": [],
                "code": ["fun ByteArray.toCValues(): CValues<ByteVar>"]
              },
              {
                "name": "toHashSet",
                "description": ["Returns a new HashSet of all elements."],
                "code": ["fun ByteArray.toHashSet(): HashSet<Byte>"]
              },
              {
                "name": "toHexString",
                "description": [
                  "Formats bytes in this array using the specified format.",
                  "Formats bytes in this array using the specified HexFormat."
                ],
                "code": [
                  "fun ByteArray.toHexString(    format: HexFormat = HexFormat.Default): String",
                  "fun ByteArray.toHexString(    startIndex: Int = 0,     endIndex: Int = size,     format: HexFormat = HexFormat.Default): String"
                ]
              },
              {
                "name": "toKString",
                "description": [
                  "Decodes a string from the bytes in UTF-8 encoding in this array.\nBytes following the first occurrence of 0 byte, if it occurs, are not decoded.",
                  "Decodes a string from the bytes in UTF-8 encoding in this array or its subrange.\nBytes following the first occurrence of 0 byte, if it occurs, are not decoded."
                ],
                "code": [
                  "fun ByteArray.toKString(): String",
                  "fun ByteArray.toKString(    startIndex: Int = 0,     endIndex: Int = this.size,     throwOnInvalidSequence: Boolean = false): String"
                ]
              },
              {
                "name": "toList",
                "description": ["Returns a List containing all elements."],
                "code": ["fun ByteArray.toList(): List<Byte>"]
              },
              {
                "name": "toMutableList",
                "description": [
                  "Returns a new MutableList filled with all elements of this array."
                ],
                "code": ["fun ByteArray.toMutableList(): MutableList<Byte>"]
              },
              {
                "name": "toMutableSet",
                "description": [
                  "Returns a new MutableSet containing all distinct elements from the given array."
                ],
                "code": ["fun ByteArray.toMutableSet(): MutableSet<Byte>"]
              },
              {
                "name": "toSet",
                "description": ["Returns a Set of all elements."],
                "code": ["fun ByteArray.toSet(): Set<Byte>"]
              },
              {
                "name": "toSortedSet",
                "description": ["Returns a new SortedSet of all elements."],
                "code": ["fun ByteArray.toSortedSet(): SortedSet<Byte>"]
              },
              {
                "name": "toString",
                "description": [
                  "Converts the contents of this byte array to a string using the specified charset."
                ],
                "code": ["fun ByteArray.toString(charset: Charset): String"]
              },
              {
                "name": "toUByteArray",
                "description": [
                  "Returns an array of type UByteArray, which is a copy of this array where each element is an unsigned reinterpretation\nof the corresponding element of this array."
                ],
                "code": ["fun ByteArray.toUByteArray(): UByteArray"]
              },
              {
                "name": "union",
                "description": [
                  "Returns a set containing all distinct elements from both collections."
                ],
                "code": [
                  "infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte>"
                ]
              },
              {
                "name": "withIndex",
                "description": [
                  "Returns a lazy Iterable that wraps each element of the original array\ninto an IndexedValue containing the index of that element and the element itself."
                ],
                "code": [
                  "fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>>"
                ]
              },
              {
                "name": "zip",
                "description": [
                  "Returns a list of pairs built from the elements of this array and the other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of pairs built from the elements of this collection and other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other collection with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest array."
                ],
                "code": [
                  "infix fun <R> any_array<R>.zip(    other: Array<out R>): List<Pair<Byte, R>>",
                  "fun <R, V> ByteArray.zip(    other: Array<out R>,     transform: (a: Byte, b: R) -> V): List<V>",
                  "infix fun <R> ByteArray.zip(    other: Iterable<R>): List<Pair<Byte, R>>",
                  "fun <R, V> ByteArray.zip(    other: Iterable<R>,     transform: (a: Byte, b: R) -> V): List<V>",
                  "fun <V> ByteArray.zip(    other: ByteArray,     transform: (a: Byte, b: Byte) -> V): List<V>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "Char",
        "description": ["Represents a 16-bit Unicode character."],
        "code": ["class Char : Comparable<Char>"],
        "url": "-char/index.html",
        "subcategories": [
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "compareTo",
                "description": [
                  "Compares this value with the specified value for order."
                ],
                "code": ["fun compareTo(other: Char): Int"]
              },
              {
                "name": "dec",
                "description": ["Returns this value decremented by one."],
                "code": ["operator fun dec(): Char"]
              },
              {
                "name": "equals",
                "description": [
                  "Indicates whether some other object is \"equal to\" this one. Implementations must fulfil the following\nrequirements:"
                ],
                "code": [
                  "fun equals(other: Char): Boolean",
                  "fun equals(other: Any?): Boolean"
                ]
              },
              {
                "name": "hashCode",
                "description": [
                  "Returns a hash code value for the object.  The general contract of hashCode is:"
                ],
                "code": ["fun hashCode(): Int"]
              },
              {
                "name": "inc",
                "description": ["Returns this value incremented by one."],
                "code": ["operator fun inc(): Char"]
              },
              {
                "name": "minus",
                "description": [
                  "Subtracts the other Char value from this value resulting an Int.",
                  "Subtracts the other Int value from this value resulting a Char."
                ],
                "code": [
                  "operator fun minus(other: Char): Int",
                  "operator fun minus(other: Int): Char"
                ]
              },
              {
                "name": "plus",
                "description": [
                  "Adds the other Int value to this value resulting a Char."
                ],
                "code": ["operator fun plus(other: Int): Char"]
              },
              {
                "name": "rangeTo",
                "description": [
                  "Creates a range from this value to the specified other value."
                ],
                "code": ["operator fun rangeTo(other: Char): CharRange"]
              },
              {
                "name": "rangeUntil",
                "description": [
                  "Creates a range from this value up to but excluding the specified other value."
                ],
                "code": ["operator fun rangeUntil(other: Char): CharRange"]
              },
              {
                "name": "toByte",
                "description": [
                  "Returns the value of this character as a Byte."
                ],
                "code": ["fun toByte(): Byte"]
              },
              {
                "name": "toChar",
                "description": [
                  "Returns the value of this character as a Char."
                ],
                "code": ["fun toChar(): Char"]
              },
              {
                "name": "toDouble",
                "description": [
                  "Returns the value of this character as a Double."
                ],
                "code": ["fun toDouble(): Double"]
              },
              {
                "name": "toFloat",
                "description": [
                  "Returns the value of this character as a Float."
                ],
                "code": ["fun toFloat(): Float"]
              },
              {
                "name": "toInt",
                "description": [
                  "Returns the value of this character as a Int."
                ],
                "code": ["fun toInt(): Int"]
              },
              {
                "name": "toLong",
                "description": [
                  "Returns the value of this character as a Long."
                ],
                "code": ["fun toLong(): Long"]
              },
              {
                "name": "toShort",
                "description": [
                  "Returns the value of this character as a Short."
                ],
                "code": ["fun toShort(): Short"]
              },
              {
                "name": "toString",
                "description": [
                  "Returns a string representation of the object."
                ],
                "code": ["fun toString(): String"]
              }
            ]
          },
          {
            "name": "Companion Object Properties",
            "declarations": [
              {
                "name": "MAX_CODE_POINT",
                "description": ["The maximum value of a Unicode code point."],
                "code": ["const val MAX_CODE_POINT: Int"]
              },
              {
                "name": "MAX_HIGH_SURROGATE",
                "description": [
                  "The maximum value of a Unicode high-surrogate code unit."
                ],
                "code": ["const val MAX_HIGH_SURROGATE: Char"]
              },
              {
                "name": "MAX_LOW_SURROGATE",
                "description": [
                  "The maximum value of a Unicode low-surrogate code unit."
                ],
                "code": ["const val MAX_LOW_SURROGATE: Char"]
              },
              {
                "name": "MAX_RADIX",
                "description": [
                  "The maximum radix available for conversion to and from strings."
                ],
                "code": ["const val MAX_RADIX: Int"]
              },
              {
                "name": "MAX_SURROGATE",
                "description": [
                  "The maximum value of a Unicode surrogate code unit."
                ],
                "code": ["const val MAX_SURROGATE: Char"]
              },
              {
                "name": "MAX_VALUE",
                "description": ["The maximum value of a character code unit."],
                "code": ["const val MAX_VALUE: Char"]
              },
              {
                "name": "MIN_CODE_POINT",
                "description": ["The minimum value of a Unicode code point."],
                "code": ["const val MIN_CODE_POINT: Int"]
              },
              {
                "name": "MIN_HIGH_SURROGATE",
                "description": [
                  "The minimum value of a Unicode high-surrogate code unit."
                ],
                "code": ["const val MIN_HIGH_SURROGATE: Char"]
              },
              {
                "name": "MIN_LOW_SURROGATE",
                "description": [
                  "The minimum value of a Unicode low-surrogate code unit."
                ],
                "code": ["const val MIN_LOW_SURROGATE: Char"]
              },
              {
                "name": "MIN_RADIX",
                "description": [
                  "The minimum radix available for conversion to and from strings."
                ],
                "code": ["const val MIN_RADIX: Int"]
              },
              {
                "name": "MIN_SUPPLEMENTARY_CODE_POINT",
                "description": [
                  "The minimum value of a supplementary code point, \\u0x10000."
                ],
                "code": ["const val MIN_SUPPLEMENTARY_CODE_POINT: Int"]
              },
              {
                "name": "MIN_SURROGATE",
                "description": [
                  "The minimum value of a Unicode surrogate code unit."
                ],
                "code": ["const val MIN_SURROGATE: Char"]
              },
              {
                "name": "MIN_VALUE",
                "description": ["The minimum value of a character code unit."],
                "code": ["const val MIN_VALUE: Char"]
              },
              {
                "name": "SIZE_BITS",
                "description": [
                  "The number of bits used to represent a Char in a binary form."
                ],
                "code": ["const val SIZE_BITS: Int"]
              },
              {
                "name": "SIZE_BYTES",
                "description": [
                  "The number of bytes used to represent a Char in a binary form."
                ],
                "code": ["const val SIZE_BYTES: Int"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "code",
                "description": ["Returns the code of this Char."],
                "code": ["val Char.code: Int"]
              },
              {
                "name": "directionality",
                "description": [
                  "Returns the Unicode directionality property for the given character."
                ],
                "code": ["val Char.directionality: CharDirectionality"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "coerceAtLeast",
                "description": [
                  "Ensures that this value is not less than the specified minimumValue."
                ],
                "code": [
                  "fun <T : Comparable<T>> T.coerceAtLeast(minimumValue: T): T"
                ]
              },
              {
                "name": "coerceAtMost",
                "description": [
                  "Ensures that this value is not greater than the specified maximumValue."
                ],
                "code": [
                  "fun <T : Comparable<T>> T.coerceAtMost(maximumValue: T): T"
                ]
              },
              {
                "name": "coerceIn",
                "description": [
                  "Ensures that this value lies in the specified range minimumValue..maximumValue.",
                  "Ensures that this value lies in the specified range."
                ],
                "code": [
                  "fun <T : Comparable<T>> T.coerceIn(    minimumValue: T?,     maximumValue: T?): T",
                  "fun <T : Comparable<T>> T.coerceIn(    range: ClosedFloatingPointRange<T>): T",
                  "fun <T : Comparable<T>> T.coerceIn(range: ClosedRange<T>): T"
                ]
              },
              {
                "name": "compareTo",
                "description": [
                  "Compares this object with the specified object for order. Returns zero if this object is equal\nto the specified other object, a negative number if it's less than other, or a positive number\nif it's greater than other."
                ],
                "code": ["infix fun <T> Comparable<T>.compareTo(other: T): Int"]
              },
              {
                "name": "digitToInt",
                "description": [
                  "Returns the numeric value of the decimal digit that this Char represents.\nThrows an exception if this Char is not a valid decimal digit.",
                  "Returns the numeric value of the digit that this Char represents in the specified radix.\nThrows an exception if the radix is not in the range 2..36 or if this Char is not a valid digit in the specified radix."
                ],
                "code": [
                  "fun Char.digitToInt(): Int",
                  "fun Char.digitToInt(radix: Int): Int"
                ]
              },
              {
                "name": "digitToIntOrNull",
                "description": [
                  "Returns the numeric value of the decimal digit that this Char represents, or null if this Char is not a valid decimal digit.",
                  "Returns the numeric value of the digit that this Char represents in the specified radix, or null if this Char is not a valid digit in the specified radix.\nThrows an exception if the radix is not in the range 2..36."
                ],
                "code": [
                  "fun Char.digitToIntOrNull(): Int?",
                  "fun Char.digitToIntOrNull(radix: Int): Int?"
                ]
              },
              {
                "name": "downTo",
                "description": [
                  "Returns a progression from this value down to the specified to value with the step -1."
                ],
                "code": ["infix fun Char.downTo(to: Char): CharProgression"]
              },
              {
                "name": "equals",
                "description": [
                  "Returns true if this character is equal to the other character, optionally ignoring character case."
                ],
                "code": [
                  "fun Char.equals(    other: Char,     ignoreCase: Boolean = false): Boolean"
                ]
              },
              {
                "name": "isIdentifierIgnorable",
                "description": [
                  "Returns true if this character (Unicode code point) should be regarded as an ignorable\ncharacter in a Java identifier or a Unicode identifier."
                ],
                "code": ["fun Char.isIdentifierIgnorable(): Boolean"]
              },
              {
                "name": "isJavaIdentifierPart",
                "description": [
                  "Returns true if this  character (Unicode code point) may be part of a Java identifier as other than the first character."
                ],
                "code": ["fun Char.isJavaIdentifierPart(): Boolean"]
              },
              {
                "name": "isJavaIdentifierStart",
                "description": [
                  "Returns true if this character is permissible as the first character in a Java identifier."
                ],
                "code": ["fun Char.isJavaIdentifierStart(): Boolean"]
              },
              {
                "name": "isSurrogate",
                "description": [
                  "Returns true if this character is a Unicode surrogate code unit."
                ],
                "code": ["fun Char.isSurrogate(): Boolean"]
              },
              {
                "name": "lowercase",
                "description": [
                  "Converts this character to lower case using Unicode mapping rules of the specified locale."
                ],
                "code": ["fun Char.lowercase(locale: Locale): String"]
              },
              {
                "name": "plus",
                "description": ["Concatenates this Char and a String."],
                "code": ["operator fun Char.plus(other: String): String"]
              },
              {
                "name": "rangeTo",
                "description": [
                  "Creates a range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeTo(    that: T): ClosedRange<T>"
                ]
              },
              {
                "name": "rangeUntil",
                "description": [
                  "Creates an open-ended range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeUntil(    that: T): OpenEndRange<T>"
                ]
              },
              {
                "name": "titlecase",
                "description": [
                  "Converts this character to title case using Unicode mapping rules of the invariant locale.",
                  "Converts this character to title case using Unicode mapping rules of the specified locale."
                ],
                "code": [
                  "fun Char.titlecase(): String",
                  "fun Char.titlecase(locale: Locale): String"
                ]
              },
              {
                "name": "toTitleCase",
                "description": [
                  "Converts this character to title case using Unicode mapping rules of the invariant locale."
                ],
                "code": ["fun Char.toTitleCase(): Char"]
              },
              {
                "name": "until",
                "description": [
                  "Returns a range from this value up to but excluding the specified to value."
                ],
                "code": ["infix fun Char.until(to: Char): CharRange"]
              },
              {
                "name": "uppercase",
                "description": [
                  "Converts this character to upper case using Unicode mapping rules of the specified locale."
                ],
                "code": ["fun Char.uppercase(locale: Locale): String"]
              }
            ]
          },
          {
            "name": "Companion Object Extension Functions",
            "declarations": [
              {
                "name": "isSupplementaryCodePoint",
                "description": [
                  "Checks if the codepoint specified is a supplementary codepoint or not."
                ],
                "code": [
                  "fun Char.Companion.isSupplementaryCodePoint(    codepoint: Int): Boolean"
                ]
              },
              {
                "name": "isSurrogatePair",
                "description": [
                  "Checks if the specified high and low chars are Char.isHighSurrogate and Char.isLowSurrogate correspondingly."
                ],
                "code": [
                  "fun Char.Companion.isSurrogatePair(    high: Char,     low: Char): Boolean"
                ]
              },
              {
                "name": "toChars",
                "description": [
                  "Converts the codepoint specified to a char array. If the codepoint is not supplementary, the method will\nreturn an array with one element otherwise it will return an array A with a high surrogate in A0 and\na low surrogate in A1."
                ],
                "code": [
                  "fun Char.Companion.toChars(codePoint: Int): CharArray"
                ]
              },
              {
                "name": "toCodePoint",
                "description": [
                  "Converts a surrogate pair to a unicode code point. Doesn't validate that the characters are a valid surrogate pair."
                ],
                "code": [
                  "fun Char.Companion.toCodePoint(high: Char, low: Char): Int"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "CharArray",
        "description": [
          "An array of chars. When targeting the JVM, instances of this class are represented as char[]."
        ],
        "code": ["class CharArray"],
        "url": "-char-array/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Creates a new array of the specified size, where each element is calculated by calling the specified\ninit function.",
                  "Creates a new array of the specified size, with all elements initialized to null char (`\\u0000')."
                ],
                "code": [
                  "<init>(size: Int, init: (Int) -> Char)",
                  "<init>(size: Int)"
                ]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "size",
                "description": ["Returns the number of elements in the array."],
                "code": ["val size: Int"]
              }
            ]
          },
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "get",
                "description": [
                  "Returns the array element at the given index.  This method can be called using the index operator."
                ],
                "code": ["operator fun get(index: Int): Char"]
              },
              {
                "name": "iterator",
                "description": [
                  "Creates an iterator over the elements of the array."
                ],
                "code": ["operator fun iterator(): CharIterator"]
              },
              {
                "name": "set",
                "description": [
                  "Sets the element at the given index to the given value. This method can be called using the index operator."
                ],
                "code": ["operator fun set(index: Int, value: Char)"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "indices",
                "description": [
                  "Returns the range of valid indices for the array."
                ],
                "code": ["val CharArray.indices: IntRange"]
              },
              {
                "name": "lastIndex",
                "description": ["Returns the last valid index for the array."],
                "code": ["val CharArray.lastIndex: Int"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "all",
                "description": [
                  "Returns true if all elements match the given predicate."
                ],
                "code": [
                  "fun CharArray.all(predicate: (Char) -> Boolean): Boolean"
                ]
              },
              {
                "name": "any",
                "description": [
                  "Returns true if array has at least one element.",
                  "Returns true if at least one element matches the given predicate."
                ],
                "code": [
                  "fun CharArray.any(): Boolean",
                  "fun CharArray.any(predicate: (Char) -> Boolean): Boolean"
                ]
              },
              {
                "name": "asIterable",
                "description": [
                  "Creates an Iterable instance that wraps the original array returning its elements when being iterated."
                ],
                "code": ["fun CharArray.asIterable(): Iterable<Char>"]
              },
              {
                "name": "asSequence",
                "description": [
                  "Creates a Sequence instance that wraps the original array returning its elements when being iterated."
                ],
                "code": ["fun CharArray.asSequence(): Sequence<Char>"]
              },
              {
                "name": "associate",
                "description": [
                  "Returns a Map containing key-value pairs provided by transform function\napplied to elements of the given array."
                ],
                "code": [
                  "fun <K, V> CharArray.associate(    transform: (Char) -> Pair<K, V>): Map<K, V>"
                ]
              },
              {
                "name": "associateBy",
                "description": [
                  "Returns a Map containing the elements from the given array indexed by the key\nreturned from keySelector function applied to each element.",
                  "Returns a Map containing the values provided by valueTransform and indexed by keySelector functions applied to elements of the given array."
                ],
                "code": [
                  "fun <K> CharArray.associateBy(    keySelector: (Char) -> K): Map<K, Char>",
                  "fun <K, V> CharArray.associateBy(    keySelector: (Char) -> K,     valueTransform: (Char) -> V): Map<K, V>"
                ]
              },
              {
                "name": "associateByTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function applied to each element of the given array\nand value is the element itself.",
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function and\nand value is provided by the valueTransform function applied to elements of the given array."
                ],
                "code": [
                  "fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(    destination: M,     keySelector: (Char) -> K): M",
                  "fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(    destination: M,     keySelector: (Char) -> K,     valueTransform: (Char) -> V): M"
                ]
              },
              {
                "name": "associateTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs\nprovided by transform function applied to each element of the given array."
                ],
                "code": [
                  "fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(    destination: M,     transform: (Char) -> Pair<K, V>): M"
                ]
              },
              {
                "name": "associateWith",
                "description": [
                  "Returns a Map where keys are elements from the given array and values are\nproduced by the valueSelector function applied to each element."
                ],
                "code": [
                  "fun <V> CharArray.associateWith(    valueSelector: (Char) -> V): Map<Char, V>"
                ]
              },
              {
                "name": "associateWithTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs for each element of the given array,\nwhere key is the element itself and value is provided by the valueSelector function applied to that key."
                ],
                "code": [
                  "fun <V, M : MutableMap<in Char, in V>> CharArray.associateWithTo(    destination: M,     valueSelector: (Char) -> V): M"
                ]
              },
              {
                "name": "binarySearch",
                "description": [
                  "Searches the array or the range of the array for the provided element using the binary search algorithm.\nThe array is expected to be sorted, otherwise the result is undefined."
                ],
                "code": [
                  "fun CharArray.binarySearch(    element: Char,     fromIndex: Int = 0,     toIndex: Int = size): Int"
                ]
              },
              {
                "name": "component1",
                "description": ["Returns 1st element from the array."],
                "code": ["operator fun CharArray.component1(): Char"]
              },
              {
                "name": "component2",
                "description": ["Returns 2nd element from the array."],
                "code": ["operator fun CharArray.component2(): Char"]
              },
              {
                "name": "component3",
                "description": ["Returns 3rd element from the array."],
                "code": ["operator fun CharArray.component3(): Char"]
              },
              {
                "name": "component4",
                "description": ["Returns 4th element from the array."],
                "code": ["operator fun CharArray.component4(): Char"]
              },
              {
                "name": "component5",
                "description": ["Returns 5th element from the array."],
                "code": ["operator fun CharArray.component5(): Char"]
              },
              {
                "name": "contains",
                "description": [
                  "Returns true if element is found in the array."
                ],
                "code": [
                  "operator fun CharArray.contains(element: Char): Boolean"
                ]
              },
              {
                "name": "contentEquals",
                "description": [
                  "Returns true if the two specified arrays are structurally equal to one another,\ni.e. contain the same number of the same elements in the same order."
                ],
                "code": [
                  "infix fun CharArray.contentEquals(other: CharArray): Boolean"
                ]
              },
              {
                "name": "contentHashCode",
                "description": [
                  "Returns a hash code based on the contents of this array as if it is List."
                ],
                "code": ["fun CharArray.contentHashCode(): Int"]
              },
              {
                "name": "contentToString",
                "description": [
                  "Returns a string representation of the contents of the specified array as if it is List."
                ],
                "code": ["fun CharArray.contentToString(): String"]
              },
              {
                "name": "count",
                "description": [
                  "Returns the number of elements in this array.",
                  "Returns the number of elements matching the given predicate."
                ],
                "code": [
                  "fun CharArray.count(): Int",
                  "fun CharArray.count(predicate: (Char) -> Boolean): Int"
                ]
              },
              {
                "name": "distinct",
                "description": [
                  "Returns a list containing only distinct elements from the given array."
                ],
                "code": ["fun CharArray.distinct(): List<Char>"]
              },
              {
                "name": "distinctBy",
                "description": [
                  "Returns a list containing only elements from the given array\nhaving distinct keys returned by the given selector function."
                ],
                "code": [
                  "fun <K> CharArray.distinctBy(    selector: (Char) -> K): List<Char>"
                ]
              },
              {
                "name": "drop",
                "description": [
                  "Returns a list containing all elements except first n elements."
                ],
                "code": ["fun CharArray.drop(n: Int): List<Char>"]
              },
              {
                "name": "dropLast",
                "description": [
                  "Returns a list containing all elements except last n elements."
                ],
                "code": ["fun CharArray.dropLast(n: Int): List<Char>"]
              },
              {
                "name": "dropLastWhile",
                "description": [
                  "Returns a list containing all elements except last elements that satisfy the given predicate."
                ],
                "code": [
                  "fun CharArray.dropLastWhile(    predicate: (Char) -> Boolean): List<Char>"
                ]
              },
              {
                "name": "dropWhile",
                "description": [
                  "Returns a list containing all elements except first elements that satisfy the given predicate."
                ],
                "code": [
                  "fun CharArray.dropWhile(    predicate: (Char) -> Boolean): List<Char>"
                ]
              },
              {
                "name": "elementAtOrElse",
                "description": [
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
                ],
                "code": [
                  "fun CharArray.elementAtOrElse(    index: Int,     defaultValue: (Int) -> Char): Char"
                ]
              },
              {
                "name": "elementAtOrNull",
                "description": [
                  "Returns an element at the given index or null if the index is out of bounds of this array."
                ],
                "code": ["fun CharArray.elementAtOrNull(index: Int): Char?"]
              },
              {
                "name": "filter",
                "description": [
                  "Returns a list containing only elements matching the given predicate."
                ],
                "code": [
                  "fun CharArray.filter(    predicate: (Char) -> Boolean): List<Char>"
                ]
              },
              {
                "name": "filterIndexed",
                "description": [
                  "Returns a list containing only elements matching the given predicate."
                ],
                "code": [
                  "fun CharArray.filterIndexed(    predicate: (index: Int, Char) -> Boolean): List<Char>"
                ]
              },
              {
                "name": "filterIndexedTo",
                "description": [
                  "Appends all elements matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(    destination: C,     predicate: (index: Int, Char) -> Boolean): C"
                ]
              },
              {
                "name": "filterNot",
                "description": [
                  "Returns a list containing all elements not matching the given predicate."
                ],
                "code": [
                  "fun CharArray.filterNot(    predicate: (Char) -> Boolean): List<Char>"
                ]
              },
              {
                "name": "filterNotTo",
                "description": [
                  "Appends all elements not matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in Char>> CharArray.filterNotTo(    destination: C,     predicate: (Char) -> Boolean): C"
                ]
              },
              {
                "name": "filterTo",
                "description": [
                  "Appends all elements matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in Char>> CharArray.filterTo(    destination: C,     predicate: (Char) -> Boolean): C"
                ]
              },
              {
                "name": "find",
                "description": [
                  "Returns the first element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun CharArray.find(predicate: (Char) -> Boolean): Char?"
                ]
              },
              {
                "name": "findLast",
                "description": [
                  "Returns the last element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun CharArray.findLast(predicate: (Char) -> Boolean): Char?"
                ]
              },
              {
                "name": "first",
                "description": [
                  "Returns the first element.",
                  "Returns the first element matching the given predicate."
                ],
                "code": [
                  "fun CharArray.first(): Char",
                  "fun CharArray.first(predicate: (Char) -> Boolean): Char"
                ]
              },
              {
                "name": "firstOrNull",
                "description": [
                  "Returns the first element, or null if the array is empty.",
                  "Returns the first element matching the given predicate, or null if element was not found."
                ],
                "code": [
                  "fun CharArray.firstOrNull(): Char?",
                  "fun CharArray.firstOrNull(    predicate: (Char) -> Boolean): Char?"
                ]
              },
              {
                "name": "flatMap",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element of original array."
                ],
                "code": [
                  "fun <R> CharArray.flatMap(    transform: (Char) -> Iterable<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexed",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element\nand its index in the original array."
                ],
                "code": [
                  "fun <R> CharArray.flatMapIndexed(    transform: (index: Int, Char) -> Iterable<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexedTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each element\nand its index in the original array, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> CharArray.flatMapIndexedTo(    destination: C,     transform: (index: Int, Char) -> Iterable<R>): C"
                ]
              },
              {
                "name": "flatMapTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each element of original array, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(    destination: C,     transform: (Char) -> Iterable<R>): C"
                ]
              },
              {
                "name": "fold",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun <R> CharArray.fold(    initial: R,     operation: (acc: R, Char) -> R): R"
                ]
              },
              {
                "name": "foldIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element with its index in the original array."
                ],
                "code": [
                  "fun <R> CharArray.foldIndexed(    initial: R,     operation: (index: Int, acc: R, Char) -> R): R"
                ]
              },
              {
                "name": "foldRight",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun <R> CharArray.foldRight(    initial: R,     operation: (Char, acc: R) -> R): R"
                ]
              },
              {
                "name": "foldRightIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun <R> CharArray.foldRightIndexed(    initial: R,     operation: (index: Int, Char, acc: R) -> R): R"
                ]
              },
              {
                "name": "forEach",
                "description": ["Performs the given action on each element."],
                "code": ["fun CharArray.forEach(action: (Char) -> Unit)"]
              },
              {
                "name": "forEachIndexed",
                "description": [
                  "Performs the given action on each element, providing sequential index with the element."
                ],
                "code": [
                  "fun CharArray.forEachIndexed(    action: (index: Int, Char) -> Unit)"
                ]
              },
              {
                "name": "getOrElse",
                "description": [
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
                ],
                "code": [
                  "fun CharArray.getOrElse(    index: Int,     defaultValue: (Int) -> Char): Char"
                ]
              },
              {
                "name": "getOrNull",
                "description": [
                  "Returns an element at the given index or null if the index is out of bounds of this array."
                ],
                "code": ["fun CharArray.getOrNull(index: Int): Char?"]
              },
              {
                "name": "groupBy",
                "description": [
                  "Groups elements of the original array by the key returned by the given keySelector function\napplied to each element and returns a map where each group key is associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original array\nby the key returned by the given keySelector function applied to the element\nand returns a map where each group key is associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K> CharArray.groupBy(    keySelector: (Char) -> K): Map<K, List<Char>>",
                  "fun <K, V> CharArray.groupBy(    keySelector: (Char) -> K,     valueTransform: (Char) -> V): Map<K, List<V>>"
                ]
              },
              {
                "name": "groupByTo",
                "description": [
                  "Groups elements of the original array by the key returned by the given keySelector function\napplied to each element and puts to the destination map each group key associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original array\nby the key returned by the given keySelector function applied to the element\nand puts to the destination map each group key associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(    destination: M,     keySelector: (Char) -> K): M",
                  "fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(    destination: M,     keySelector: (Char) -> K,     valueTransform: (Char) -> V): M"
                ]
              },
              {
                "name": "indexOf",
                "description": [
                  "Returns first index of element, or -1 if the array does not contain element."
                ],
                "code": ["fun CharArray.indexOf(element: Char): Int"]
              },
              {
                "name": "indexOfFirst",
                "description": [
                  "Returns index of the first element matching the given predicate, or -1 if the array does not contain such element."
                ],
                "code": [
                  "fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int"
                ]
              },
              {
                "name": "indexOfLast",
                "description": [
                  "Returns index of the last element matching the given predicate, or -1 if the array does not contain such element."
                ],
                "code": [
                  "fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int"
                ]
              },
              {
                "name": "intersect",
                "description": [
                  "Returns a set containing all elements that are contained by both this array and the specified collection."
                ],
                "code": [
                  "infix fun CharArray.intersect(    other: Iterable<Char>): Set<Char>"
                ]
              },
              {
                "name": "isEmpty",
                "description": ["Returns true if the array is empty."],
                "code": ["fun CharArray.isEmpty(): Boolean"]
              },
              {
                "name": "isNotEmpty",
                "description": ["Returns true if the array is not empty."],
                "code": ["fun CharArray.isNotEmpty(): Boolean"]
              },
              {
                "name": "joinTo",
                "description": [
                  "Appends the string from all the elements separated using separator and using the given prefix and postfix if supplied."
                ],
                "code": [
                  "fun <A : Appendable> CharArray.joinTo(    buffer: A,     separator: CharSequence = \", \",     prefix: CharSequence = \"\",     postfix: CharSequence = \"\",     limit: Int = -1,     truncated: CharSequence = \"...\",     transform: ((Char) -> CharSequence)? = null): A"
                ]
              },
              {
                "name": "joinToString",
                "description": [
                  "Creates a string from all the elements separated using separator and using the given prefix and postfix if supplied."
                ],
                "code": [
                  "fun CharArray.joinToString(    separator: CharSequence = \", \",     prefix: CharSequence = \"\",     postfix: CharSequence = \"\",     limit: Int = -1,     truncated: CharSequence = \"...\",     transform: ((Char) -> CharSequence)? = null): String"
                ]
              },
              {
                "name": "last",
                "description": [
                  "Returns the last element.",
                  "Returns the last element matching the given predicate."
                ],
                "code": [
                  "fun CharArray.last(): Char",
                  "fun CharArray.last(predicate: (Char) -> Boolean): Char"
                ]
              },
              {
                "name": "lastIndexOf",
                "description": [
                  "Returns last index of element, or -1 if the array does not contain element."
                ],
                "code": ["fun CharArray.lastIndexOf(element: Char): Int"]
              },
              {
                "name": "lastOrNull",
                "description": [
                  "Returns the last element, or null if the array is empty.",
                  "Returns the last element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun CharArray.lastOrNull(): Char?",
                  "fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char?"
                ]
              },
              {
                "name": "map",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each element in the original array."
                ],
                "code": [
                  "fun <R> CharArray.map(transform: (Char) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexed",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each element and its index in the original array."
                ],
                "code": [
                  "fun <R> CharArray.mapIndexed(    transform: (index: Int, Char) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexedTo",
                "description": [
                  "Applies the given transform function to each element and its index in the original array\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(    destination: C,     transform: (index: Int, Char) -> R): C"
                ]
              },
              {
                "name": "mapTo",
                "description": [
                  "Applies the given transform function to each element of the original array\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> CharArray.mapTo(    destination: C,     transform: (Char) -> R): C"
                ]
              },
              {
                "name": "maxByOrNull",
                "description": [
                  "Returns the first element yielding the largest value of the given function or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> CharArray.maxByOrNull(    selector: (Char) -> R): Char?"
                ]
              },
              {
                "name": "maxOf",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each element in the array."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.maxOf(    selector: (Char) -> R): R"
                ]
              },
              {
                "name": "maxOfOrNull",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.maxOfOrNull(    selector: (Char) -> R): R?"
                ]
              },
              {
                "name": "maxOfWith",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun <R> CharArray.maxOfWith(    comparator: Comparator<in R>,     selector: (Char) -> R): R"
                ]
              },
              {
                "name": "maxOfWithOrNull",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R> CharArray.maxOfWithOrNull(    comparator: Comparator<in R>,     selector: (Char) -> R): R?"
                ]
              },
              {
                "name": "maxOrNull",
                "description": [
                  "Returns the largest element or null if there are no elements."
                ],
                "code": ["fun CharArray.maxOrNull(): Char?"]
              },
              {
                "name": "maxWith",
                "description": [
                  "Returns the first element having the largest value according to the provided comparator."
                ],
                "code": [
                  "fun CharArray.maxWith(comparator: Comparator<in Char>): Char",
                  "fun CharArray.maxWith(comparator: Comparator<in Char>): Char?"
                ]
              },
              {
                "name": "maxWithOrNull",
                "description": [
                  "Returns the first element having the largest value according to the provided comparator or null if there are no elements."
                ],
                "code": [
                  "fun CharArray.maxWithOrNull(    comparator: Comparator<in Char>): Char?"
                ]
              },
              {
                "name": "minByOrNull",
                "description": [
                  "Returns the first element yielding the smallest value of the given function or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> CharArray.minByOrNull(    selector: (Char) -> R): Char?"
                ]
              },
              {
                "name": "minOf",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the array."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.minOf(    selector: (Char) -> R): R"
                ]
              },
              {
                "name": "minOfOrNull",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.minOfOrNull(    selector: (Char) -> R): R?"
                ]
              },
              {
                "name": "minOfWith",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun <R> CharArray.minOfWith(    comparator: Comparator<in R>,     selector: (Char) -> R): R"
                ]
              },
              {
                "name": "minOfWithOrNull",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R> CharArray.minOfWithOrNull(    comparator: Comparator<in R>,     selector: (Char) -> R): R?"
                ]
              },
              {
                "name": "minOrNull",
                "description": [
                  "Returns the smallest element or null if there are no elements."
                ],
                "code": ["fun CharArray.minOrNull(): Char?"]
              },
              {
                "name": "minWith",
                "description": [
                  "Returns the first element having the smallest value according to the provided comparator."
                ],
                "code": [
                  "fun CharArray.minWith(comparator: Comparator<in Char>): Char",
                  "fun CharArray.minWith(comparator: Comparator<in Char>): Char?"
                ]
              },
              {
                "name": "minWithOrNull",
                "description": [
                  "Returns the first element having the smallest value according to the provided comparator or null if there are no elements."
                ],
                "code": [
                  "fun CharArray.minWithOrNull(    comparator: Comparator<in Char>): Char?"
                ]
              },
              {
                "name": "none",
                "description": [
                  "Returns true if the array has no elements.",
                  "Returns true if no elements match the given predicate."
                ],
                "code": [
                  "fun CharArray.none(): Boolean",
                  "fun CharArray.none(predicate: (Char) -> Boolean): Boolean"
                ]
              },
              {
                "name": "onEach",
                "description": [
                  "Performs the given action on each element and returns the array itself afterwards."
                ],
                "code": [
                  "fun CharArray.onEach(action: (Char) -> Unit): CharArray"
                ]
              },
              {
                "name": "onEachIndexed",
                "description": [
                  "Performs the given action on each element, providing sequential index with the element,\nand returns the array itself afterwards."
                ],
                "code": [
                  "fun CharArray.onEachIndexed(    action: (index: Int, Char) -> Unit): CharArray"
                ]
              },
              {
                "name": "partition",
                "description": [
                  "Splits the original array into pair of lists,\nwhere first list contains elements for which predicate yielded true,\nwhile second list contains elements for which predicate yielded false."
                ],
                "code": [
                  "fun CharArray.partition(    predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>>"
                ]
              },
              {
                "name": "random",
                "description": [
                  "Returns a random element from this array.",
                  "Returns a random element from this array using the specified source of randomness."
                ],
                "code": [
                  "fun CharArray.random(): Char",
                  "fun CharArray.random(random: Random): Char"
                ]
              },
              {
                "name": "randomOrNull",
                "description": [
                  "Returns a random element from this array, or null if this array is empty.",
                  "Returns a random element from this array using the specified source of randomness, or null if this array is empty."
                ],
                "code": [
                  "fun CharArray.randomOrNull(): Char?",
                  "fun CharArray.randomOrNull(random: Random): Char?"
                ]
              },
              {
                "name": "reduce",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun CharArray.reduce(    operation: (acc: Char, Char) -> Char): Char"
                ]
              },
              {
                "name": "reduceIndexed",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original array."
                ],
                "code": [
                  "fun CharArray.reduceIndexed(    operation: (index: Int, acc: Char, Char) -> Char): Char"
                ]
              },
              {
                "name": "reduceIndexedOrNull",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original array."
                ],
                "code": [
                  "fun CharArray.reduceIndexedOrNull(    operation: (index: Int, acc: Char, Char) -> Char): Char?"
                ]
              },
              {
                "name": "reduceOrNull",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun CharArray.reduceOrNull(    operation: (acc: Char, Char) -> Char): Char?"
                ]
              },
              {
                "name": "reduceRight",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun CharArray.reduceRight(    operation: (Char, acc: Char) -> Char): Char"
                ]
              },
              {
                "name": "reduceRightIndexed",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun CharArray.reduceRightIndexed(    operation: (index: Int, Char, acc: Char) -> Char): Char"
                ]
              },
              {
                "name": "reduceRightIndexedOrNull",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun CharArray.reduceRightIndexedOrNull(    operation: (index: Int, Char, acc: Char) -> Char): Char?"
                ]
              },
              {
                "name": "reduceRightOrNull",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun CharArray.reduceRightOrNull(    operation: (Char, acc: Char) -> Char): Char?"
                ]
              },
              {
                "name": "refTo",
                "description": [],
                "code": ["fun CharArray.refTo(index: Int): CValuesRef<COpaque>"]
              },
              {
                "name": "reverse",
                "description": [
                  "Reverses elements in the array in-place.",
                  "Reverses elements of the array in the specified range in-place."
                ],
                "code": [
                  "fun CharArray.reverse()",
                  "fun CharArray.reverse(fromIndex: Int, toIndex: Int)"
                ]
              },
              {
                "name": "reversed",
                "description": [
                  "Returns a list with elements in reversed order."
                ],
                "code": ["fun CharArray.reversed(): List<Char>"]
              },
              {
                "name": "reversedArray",
                "description": [
                  "Returns an array with elements of this array in reversed order."
                ],
                "code": ["fun CharArray.reversedArray(): CharArray"]
              },
              {
                "name": "runningFold",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> CharArray.runningFold(    initial: R,     operation: (acc: R, Char) -> R): List<R>"
                ]
              },
              {
                "name": "runningFoldIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> CharArray.runningFoldIndexed(    initial: R,     operation: (index: Int, acc: R, Char) -> R): List<R>"
                ]
              },
              {
                "name": "runningReduce",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with the first element of this array."
                ],
                "code": [
                  "fun CharArray.runningReduce(    operation: (acc: Char, Char) -> Char): List<Char>"
                ]
              },
              {
                "name": "runningReduceIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with the first element of this array."
                ],
                "code": [
                  "fun CharArray.runningReduceIndexed(    operation: (index: Int, acc: Char, Char) -> Char): List<Char>"
                ]
              },
              {
                "name": "scan",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> CharArray.scan(    initial: R,     operation: (acc: R, Char) -> R): List<R>"
                ]
              },
              {
                "name": "scanIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> CharArray.scanIndexed(    initial: R,     operation: (index: Int, acc: R, Char) -> R): List<R>"
                ]
              },
              {
                "name": "shuffle",
                "description": [
                  "Randomly shuffles elements in this array in-place.",
                  "Randomly shuffles elements in this array in-place using the specified random instance as the source of randomness."
                ],
                "code": [
                  "fun CharArray.shuffle()",
                  "fun CharArray.shuffle(random: Random)"
                ]
              },
              {
                "name": "single",
                "description": [
                  "Returns the single element, or throws an exception if the array is empty or has more than one element.",
                  "Returns the single element matching the given predicate, or throws exception if there is no or more than one matching element."
                ],
                "code": [
                  "fun CharArray.single(): Char",
                  "fun CharArray.single(predicate: (Char) -> Boolean): Char"
                ]
              },
              {
                "name": "singleOrNull",
                "description": [
                  "Returns single element, or null if the array is empty or has more than one element.",
                  "Returns the single element matching the given predicate, or null if element was not found or more than one element was found."
                ],
                "code": [
                  "fun CharArray.singleOrNull(): Char?",
                  "fun CharArray.singleOrNull(    predicate: (Char) -> Boolean): Char?"
                ]
              },
              {
                "name": "slice",
                "description": [
                  "Returns a list containing elements at indices in the specified indices range.",
                  "Returns a list containing elements at specified indices."
                ],
                "code": [
                  "fun CharArray.slice(indices: IntRange): List<Char>",
                  "fun CharArray.slice(indices: Iterable<Int>): List<Char>"
                ]
              },
              {
                "name": "sliceArray",
                "description": [
                  "Returns an array containing elements of this array at specified indices.",
                  "Returns an array containing elements at indices in the specified indices range."
                ],
                "code": [
                  "fun CharArray.sliceArray(indices: Collection<Int>): CharArray",
                  "fun CharArray.sliceArray(indices: IntRange): CharArray"
                ]
              },
              {
                "name": "sort",
                "description": [
                  "Sorts the array in-place according to the order specified by the given comparison function."
                ],
                "code": [
                  "fun CharArray.sort(comparison: (a: Char, b: Char) -> Int)"
                ]
              },
              {
                "name": "sortDescending",
                "description": [
                  "Sorts elements in the array in-place descending according to their natural sort order.",
                  "Sorts elements of the array in the specified range in-place.\nThe elements are sorted descending according to their natural sort order."
                ],
                "code": [
                  "fun CharArray.sortDescending()",
                  "fun CharArray.sortDescending(fromIndex: Int, toIndex: Int)"
                ]
              },
              {
                "name": "sorted",
                "description": [
                  "Returns a list of all elements sorted according to their natural sort order."
                ],
                "code": ["fun CharArray.sorted(): List<Char>"]
              },
              {
                "name": "sortedArray",
                "description": [
                  "Returns an array with all elements of this array sorted according to their natural sort order."
                ],
                "code": ["fun CharArray.sortedArray(): CharArray"]
              },
              {
                "name": "sortedArrayDescending",
                "description": [
                  "Returns an array with all elements of this array sorted descending according to their natural sort order."
                ],
                "code": ["fun CharArray.sortedArrayDescending(): CharArray"]
              },
              {
                "name": "sortedBy",
                "description": [
                  "Returns a list of all elements sorted according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <R : Comparable<R>> CharArray.sortedBy(    selector: (Char) -> R?): List<Char>"
                ]
              },
              {
                "name": "sortedByDescending",
                "description": [
                  "Returns a list of all elements sorted descending according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <R : Comparable<R>> CharArray.sortedByDescending(    selector: (Char) -> R?): List<Char>"
                ]
              },
              {
                "name": "sortedDescending",
                "description": [
                  "Returns a list of all elements sorted descending according to their natural sort order."
                ],
                "code": ["fun CharArray.sortedDescending(): List<Char>"]
              },
              {
                "name": "sortedWith",
                "description": [
                  "Returns a list of all elements sorted according to the specified comparator."
                ],
                "code": [
                  "fun CharArray.sortedWith(    comparator: Comparator<in Char>): List<Char>"
                ]
              },
              {
                "name": "subtract",
                "description": [
                  "Returns a set containing all elements that are contained by this array and not contained by the specified collection."
                ],
                "code": [
                  "infix fun CharArray.subtract(    other: Iterable<Char>): Set<Char>"
                ]
              },
              {
                "name": "sumBy",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array."
                ],
                "code": ["fun CharArray.sumBy(selector: (Char) -> Int): Int"]
              },
              {
                "name": "sumByDouble",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun CharArray.sumByDouble(selector: (Char) -> Double): Double"
                ]
              },
              {
                "name": "sumOf",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun CharArray.sumOf(selector: (Char) -> Double): Double",
                  "fun CharArray.sumOf(selector: (Char) -> Int): Int",
                  "fun CharArray.sumOf(selector: (Char) -> Long): Long",
                  "fun CharArray.sumOf(selector: (Char) -> UInt): UInt",
                  "fun CharArray.sumOf(selector: (Char) -> ULong): ULong",
                  "fun CharArray.sumOf(    selector: (Char) -> BigDecimal): BigDecimal",
                  "fun CharArray.sumOf(    selector: (Char) -> BigInteger): BigInteger"
                ]
              },
              {
                "name": "take",
                "description": ["Returns a list containing first n elements."],
                "code": ["fun CharArray.take(n: Int): List<Char>"]
              },
              {
                "name": "takeLast",
                "description": ["Returns a list containing last n elements."],
                "code": ["fun CharArray.takeLast(n: Int): List<Char>"]
              },
              {
                "name": "takeLastWhile",
                "description": [
                  "Returns a list containing last elements satisfying the given predicate."
                ],
                "code": [
                  "fun CharArray.takeLastWhile(    predicate: (Char) -> Boolean): List<Char>"
                ]
              },
              {
                "name": "takeWhile",
                "description": [
                  "Returns a list containing first elements satisfying the given predicate."
                ],
                "code": [
                  "fun CharArray.takeWhile(    predicate: (Char) -> Boolean): List<Char>"
                ]
              },
              {
                "name": "toCollection",
                "description": [
                  "Appends all elements to the given destination collection."
                ],
                "code": [
                  "fun <C : MutableCollection<in Char>> CharArray.toCollection(    destination: C): C"
                ]
              },
              {
                "name": "toHashSet",
                "description": ["Returns a new HashSet of all elements."],
                "code": ["fun CharArray.toHashSet(): HashSet<Char>"]
              },
              {
                "name": "toList",
                "description": ["Returns a List containing all elements."],
                "code": ["fun CharArray.toList(): List<Char>"]
              },
              {
                "name": "toMutableList",
                "description": [
                  "Returns a new MutableList filled with all elements of this array."
                ],
                "code": ["fun CharArray.toMutableList(): MutableList<Char>"]
              },
              {
                "name": "toMutableSet",
                "description": [
                  "Returns a new MutableSet containing all distinct elements from the given array."
                ],
                "code": ["fun CharArray.toMutableSet(): MutableSet<Char>"]
              },
              {
                "name": "toSet",
                "description": ["Returns a Set of all elements."],
                "code": ["fun CharArray.toSet(): Set<Char>"]
              },
              {
                "name": "toSortedSet",
                "description": ["Returns a new SortedSet of all elements."],
                "code": ["fun CharArray.toSortedSet(): SortedSet<Char>"]
              },
              {
                "name": "union",
                "description": [
                  "Returns a set containing all distinct elements from both collections."
                ],
                "code": [
                  "infix fun CharArray.union(other: Iterable<Char>): Set<Char>"
                ]
              },
              {
                "name": "withIndex",
                "description": [
                  "Returns a lazy Iterable that wraps each element of the original array\ninto an IndexedValue containing the index of that element and the element itself."
                ],
                "code": [
                  "fun CharArray.withIndex(): Iterable<IndexedValue<Char>>"
                ]
              },
              {
                "name": "zip",
                "description": [
                  "Returns a list of pairs built from the elements of this array and the other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of pairs built from the elements of this collection and other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other collection with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest array."
                ],
                "code": [
                  "infix fun <R> any_array<R>.zip(    other: Array<out R>): List<Pair<Char, R>>",
                  "fun <R, V> CharArray.zip(    other: Array<out R>,     transform: (a: Char, b: R) -> V): List<V>",
                  "infix fun <R> CharArray.zip(    other: Iterable<R>): List<Pair<Char, R>>",
                  "fun <R, V> CharArray.zip(    other: Iterable<R>,     transform: (a: Char, b: R) -> V): List<V>",
                  "fun <V> CharArray.zip(    other: CharArray,     transform: (a: Char, b: Char) -> V): List<V>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "CharSequence",
        "description": ["Represents a readable sequence of Char values."],
        "code": ["interface CharSequence"],
        "url": "-char-sequence/index.html",
        "subcategories": [
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "length",
                "description": [
                  "Returns the length of this character sequence."
                ],
                "code": ["abstract val length: Int"]
              }
            ]
          },
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "get",
                "description": [
                  "Returns the character at the specified index in this character sequence."
                ],
                "code": ["abstract operator fun get(index: Int): Char"]
              },
              {
                "name": "subSequence",
                "description": [
                  "Returns a new character sequence that is a subsequence of this character sequence,\nstarting at the specified startIndex and ending right before the specified endIndex."
                ],
                "code": [
                  "abstract fun subSequence(    startIndex: Int,     endIndex: Int): CharSequence"
                ]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "indices",
                "description": [
                  "Returns the range of valid character indices for this char sequence."
                ],
                "code": ["val CharSequence.indices: IntRange"]
              },
              {
                "name": "lastIndex",
                "description": [
                  "Returns the index of the last character in the char sequence or -1 if it is empty."
                ],
                "code": ["val CharSequence.lastIndex: Int"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "all",
                "description": [
                  "Returns true if all characters match the given predicate."
                ],
                "code": [
                  "fun CharSequence.all(predicate: (Char) -> Boolean): Boolean"
                ]
              },
              {
                "name": "any",
                "description": [
                  "Returns true if char sequence has at least one character.",
                  "Returns true if at least one character matches the given predicate."
                ],
                "code": [
                  "fun CharSequence.any(): Boolean",
                  "fun CharSequence.any(predicate: (Char) -> Boolean): Boolean"
                ]
              },
              {
                "name": "asIterable",
                "description": [
                  "Creates an Iterable instance that wraps the original char sequence returning its characters when being iterated."
                ],
                "code": ["fun CharSequence.asIterable(): Iterable<Char>"]
              },
              {
                "name": "asSequence",
                "description": [
                  "Creates a Sequence instance that wraps the original char sequence returning its characters when being iterated."
                ],
                "code": ["fun CharSequence.asSequence(): Sequence<Char>"]
              },
              {
                "name": "associate",
                "description": [
                  "Returns a Map containing key-value pairs provided by transform function\napplied to characters of the given char sequence."
                ],
                "code": [
                  "fun <K, V> CharSequence.associate(    transform: (Char) -> Pair<K, V>): Map<K, V>"
                ]
              },
              {
                "name": "associateBy",
                "description": [
                  "Returns a Map containing the characters from the given char sequence indexed by the key\nreturned from keySelector function applied to each character.",
                  "Returns a Map containing the values provided by valueTransform and indexed by keySelector functions applied to characters of the given char sequence."
                ],
                "code": [
                  "fun <K> CharSequence.associateBy(    keySelector: (Char) -> K): Map<K, Char>",
                  "fun <K, V> CharSequence.associateBy(    keySelector: (Char) -> K,     valueTransform: (Char) -> V): Map<K, V>"
                ]
              },
              {
                "name": "associateByTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function applied to each character of the given char sequence\nand value is the character itself.",
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function and\nand value is provided by the valueTransform function applied to characters of the given char sequence."
                ],
                "code": [
                  "fun <K, M : MutableMap<in K, in Char>> CharSequence.associateByTo(    destination: M,     keySelector: (Char) -> K): M",
                  "fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateByTo(    destination: M,     keySelector: (Char) -> K,     valueTransform: (Char) -> V): M"
                ]
              },
              {
                "name": "associateTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs\nprovided by transform function applied to each character of the given char sequence."
                ],
                "code": [
                  "fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateTo(    destination: M,     transform: (Char) -> Pair<K, V>): M"
                ]
              },
              {
                "name": "associateWith",
                "description": [
                  "Returns a Map where keys are characters from the given char sequence and values are\nproduced by the valueSelector function applied to each character."
                ],
                "code": [
                  "fun <V> CharSequence.associateWith(    valueSelector: (Char) -> V): Map<Char, V>"
                ]
              },
              {
                "name": "associateWithTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs for each character of the given char sequence,\nwhere key is the character itself and value is provided by the valueSelector function applied to that key."
                ],
                "code": [
                  "fun <V, M : MutableMap<in Char, in V>> CharSequence.associateWithTo(    destination: M,     valueSelector: (Char) -> V): M"
                ]
              },
              {
                "name": "chunked",
                "description": [
                  "Splits this char sequence into a list of strings each not exceeding the given size.",
                  "Splits this char sequence into several char sequences each not exceeding the given size\nand applies the given transform function to an each."
                ],
                "code": [
                  "fun CharSequence.chunked(size: Int): List<String>",
                  "fun <R> CharSequence.chunked(    size: Int,     transform: (CharSequence) -> R): List<R>"
                ]
              },
              {
                "name": "chunkedSequence",
                "description": [
                  "Splits this char sequence into a sequence of strings each not exceeding the given size.",
                  "Splits this char sequence into several char sequences each not exceeding the given size\nand applies the given transform function to an each."
                ],
                "code": [
                  "fun CharSequence.chunkedSequence(size: Int): Sequence<String>",
                  "fun <R> CharSequence.chunkedSequence(    size: Int,     transform: (CharSequence) -> R): Sequence<R>"
                ]
              },
              {
                "name": "commonPrefixWith",
                "description": [
                  "Returns the longest string prefix such that this char sequence and other char sequence both start with this prefix,\ntaking care not to split surrogate pairs.\nIf this and other have no common prefix, returns the empty string."
                ],
                "code": [
                  "fun CharSequence.commonPrefixWith(    other: CharSequence,     ignoreCase: Boolean = false): String"
                ]
              },
              {
                "name": "commonSuffixWith",
                "description": [
                  "Returns the longest string suffix such that this char sequence and other char sequence both end with this suffix,\ntaking care not to split surrogate pairs.\nIf this and other have no common suffix, returns the empty string."
                ],
                "code": [
                  "fun CharSequence.commonSuffixWith(    other: CharSequence,     ignoreCase: Boolean = false): String"
                ]
              },
              {
                "name": "contains",
                "description": [
                  "Returns true if this char sequence contains the specified other sequence of characters as a substring.",
                  "Returns true if this char sequence contains the specified character char.",
                  "Returns true if this char sequence contains at least one match of the specified regular expression regex."
                ],
                "code": [
                  "operator fun CharSequence.contains(    other: CharSequence,     ignoreCase: Boolean = false): Boolean",
                  "operator fun CharSequence.contains(    char: Char,     ignoreCase: Boolean = false): Boolean",
                  "operator fun CharSequence.contains(regex: Regex): Boolean"
                ]
              },
              {
                "name": "count",
                "description": [
                  "Returns the length of this char sequence.",
                  "Returns the number of characters matching the given predicate."
                ],
                "code": [
                  "fun CharSequence.count(): Int",
                  "fun CharSequence.count(predicate: (Char) -> Boolean): Int"
                ]
              },
              {
                "name": "drop",
                "description": [
                  "Returns a subsequence of this char sequence with the first n characters removed."
                ],
                "code": ["fun CharSequence.drop(n: Int): CharSequence"]
              },
              {
                "name": "dropLast",
                "description": [
                  "Returns a subsequence of this char sequence with the last n characters removed."
                ],
                "code": ["fun CharSequence.dropLast(n: Int): CharSequence"]
              },
              {
                "name": "dropLastWhile",
                "description": [
                  "Returns a subsequence of this char sequence containing all characters except last characters that satisfy the given predicate."
                ],
                "code": [
                  "fun CharSequence.dropLastWhile(    predicate: (Char) -> Boolean): CharSequence"
                ]
              },
              {
                "name": "dropWhile",
                "description": [
                  "Returns a subsequence of this char sequence containing all characters except first characters that satisfy the given predicate."
                ],
                "code": [
                  "fun CharSequence.dropWhile(    predicate: (Char) -> Boolean): CharSequence"
                ]
              },
              {
                "name": "elementAtOrElse",
                "description": [
                  "Returns a character at the given index or the result of calling the defaultValue function if the index is out of bounds of this char sequence."
                ],
                "code": [
                  "fun CharSequence.elementAtOrElse(    index: Int,     defaultValue: (Int) -> Char): Char"
                ]
              },
              {
                "name": "elementAtOrNull",
                "description": [
                  "Returns a character at the given index or null if the index is out of bounds of this char sequence."
                ],
                "code": ["fun CharSequence.elementAtOrNull(index: Int): Char?"]
              },
              {
                "name": "endsWith",
                "description": [
                  "Returns true if this char sequence ends with the specified character.",
                  "Returns true if this char sequence ends with the specified suffix."
                ],
                "code": [
                  "fun CharSequence.endsWith(    char: Char,     ignoreCase: Boolean = false): Boolean",
                  "fun CharSequence.endsWith(    suffix: CharSequence,     ignoreCase: Boolean = false): Boolean"
                ]
              },
              {
                "name": "filter",
                "description": [
                  "Returns a char sequence containing only those characters from the original char sequence that match the given predicate."
                ],
                "code": [
                  "fun CharSequence.filter(    predicate: (Char) -> Boolean): CharSequence"
                ]
              },
              {
                "name": "filterIndexed",
                "description": [
                  "Returns a char sequence containing only those characters from the original char sequence that match the given predicate."
                ],
                "code": [
                  "fun CharSequence.filterIndexed(    predicate: (index: Int, Char) -> Boolean): CharSequence"
                ]
              },
              {
                "name": "filterIndexedTo",
                "description": [
                  "Appends all characters matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : Appendable> CharSequence.filterIndexedTo(    destination: C,     predicate: (index: Int, Char) -> Boolean): C"
                ]
              },
              {
                "name": "filterNot",
                "description": [
                  "Returns a char sequence containing only those characters from the original char sequence that do not match the given predicate."
                ],
                "code": [
                  "fun CharSequence.filterNot(    predicate: (Char) -> Boolean): CharSequence"
                ]
              },
              {
                "name": "filterNotTo",
                "description": [
                  "Appends all characters not matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : Appendable> CharSequence.filterNotTo(    destination: C,     predicate: (Char) -> Boolean): C"
                ]
              },
              {
                "name": "filterTo",
                "description": [
                  "Appends all characters matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : Appendable> CharSequence.filterTo(    destination: C,     predicate: (Char) -> Boolean): C"
                ]
              },
              {
                "name": "find",
                "description": [
                  "Returns the first character matching the given predicate, or null if no such character was found."
                ],
                "code": [
                  "fun CharSequence.find(predicate: (Char) -> Boolean): Char?"
                ]
              },
              {
                "name": "findAnyOf",
                "description": [
                  "Finds the first occurrence of any of the specified strings in this char sequence,\nstarting from the specified startIndex and optionally ignoring the case."
                ],
                "code": [
                  "fun CharSequence.findAnyOf(    strings: Collection<String>,     startIndex: Int = 0,     ignoreCase: Boolean = false): Pair<Int, String>?"
                ]
              },
              {
                "name": "findLast",
                "description": [
                  "Returns the last character matching the given predicate, or null if no such character was found."
                ],
                "code": [
                  "fun CharSequence.findLast(    predicate: (Char) -> Boolean): Char?"
                ]
              },
              {
                "name": "findLastAnyOf",
                "description": [
                  "Finds the last occurrence of any of the specified strings in this char sequence,\nstarting from the specified startIndex and optionally ignoring the case."
                ],
                "code": [
                  "fun CharSequence.findLastAnyOf(    strings: Collection<String>,     startIndex: Int = lastIndex,     ignoreCase: Boolean = false): Pair<Int, String>?"
                ]
              },
              {
                "name": "first",
                "description": [
                  "Returns the first character.",
                  "Returns the first character matching the given predicate."
                ],
                "code": [
                  "fun CharSequence.first(): Char",
                  "fun CharSequence.first(predicate: (Char) -> Boolean): Char"
                ]
              },
              {
                "name": "firstNotNullOf",
                "description": [
                  "Returns the first non-null value produced by transform function being applied to characters of this char sequence in iteration order,\nor throws NoSuchElementException if no non-null value was produced."
                ],
                "code": [
                  "fun <R : Any> CharSequence.firstNotNullOf(    transform: (Char) -> R?): R"
                ]
              },
              {
                "name": "firstNotNullOfOrNull",
                "description": [
                  "Returns the first non-null value produced by transform function being applied to characters of this char sequence in iteration order,\nor null if no non-null value was produced."
                ],
                "code": [
                  "fun <R : Any> CharSequence.firstNotNullOfOrNull(    transform: (Char) -> R?): R?"
                ]
              },
              {
                "name": "firstOrNull",
                "description": [
                  "Returns the first character, or null if the char sequence is empty.",
                  "Returns the first character matching the given predicate, or null if character was not found."
                ],
                "code": [
                  "fun CharSequence.firstOrNull(): Char?",
                  "fun CharSequence.firstOrNull(    predicate: (Char) -> Boolean): Char?"
                ]
              },
              {
                "name": "flatMap",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each character of original char sequence."
                ],
                "code": [
                  "fun <R> CharSequence.flatMap(    transform: (Char) -> Iterable<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexed",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each character\nand its index in the original char sequence."
                ],
                "code": [
                  "fun <R> CharSequence.flatMapIndexed(    transform: (index: Int, Char) -> Iterable<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexedTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each character\nand its index in the original char sequence, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> CharSequence.flatMapIndexedTo(    destination: C,     transform: (index: Int, Char) -> Iterable<R>): C"
                ]
              },
              {
                "name": "flatMapTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each character of original char sequence, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> CharSequence.flatMapTo(    destination: C,     transform: (Char) -> Iterable<R>): C"
                ]
              },
              {
                "name": "fold",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each character."
                ],
                "code": [
                  "fun <R> CharSequence.fold(    initial: R,     operation: (acc: R, Char) -> R): R"
                ]
              },
              {
                "name": "foldIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each character with its index in the original char sequence."
                ],
                "code": [
                  "fun <R> CharSequence.foldIndexed(    initial: R,     operation: (index: Int, acc: R, Char) -> R): R"
                ]
              },
              {
                "name": "foldRight",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each character and current accumulator value."
                ],
                "code": [
                  "fun <R> CharSequence.foldRight(    initial: R,     operation: (Char, acc: R) -> R): R"
                ]
              },
              {
                "name": "foldRightIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each character with its index in the original char sequence and current accumulator value."
                ],
                "code": [
                  "fun <R> CharSequence.foldRightIndexed(    initial: R,     operation: (index: Int, Char, acc: R) -> R): R"
                ]
              },
              {
                "name": "forEach",
                "description": ["Performs the given action on each character."],
                "code": ["fun CharSequence.forEach(action: (Char) -> Unit)"]
              },
              {
                "name": "forEachIndexed",
                "description": [
                  "Performs the given action on each character, providing sequential index with the character."
                ],
                "code": [
                  "fun CharSequence.forEachIndexed(    action: (index: Int, Char) -> Unit)"
                ]
              },
              {
                "name": "getOrElse",
                "description": [
                  "Returns a character at the given index or the result of calling the defaultValue function if the index is out of bounds of this char sequence."
                ],
                "code": [
                  "fun CharSequence.getOrElse(    index: Int,     defaultValue: (Int) -> Char): Char"
                ]
              },
              {
                "name": "getOrNull",
                "description": [
                  "Returns a character at the given index or null if the index is out of bounds of this char sequence."
                ],
                "code": ["fun CharSequence.getOrNull(index: Int): Char?"]
              },
              {
                "name": "groupBy",
                "description": [
                  "Groups characters of the original char sequence by the key returned by the given keySelector function\napplied to each character and returns a map where each group key is associated with a list of corresponding characters.",
                  "Groups values returned by the valueTransform function applied to each character of the original char sequence\nby the key returned by the given keySelector function applied to the character\nand returns a map where each group key is associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K> CharSequence.groupBy(    keySelector: (Char) -> K): Map<K, List<Char>>",
                  "fun <K, V> CharSequence.groupBy(    keySelector: (Char) -> K,     valueTransform: (Char) -> V): Map<K, List<V>>"
                ]
              },
              {
                "name": "groupByTo",
                "description": [
                  "Groups characters of the original char sequence by the key returned by the given keySelector function\napplied to each character and puts to the destination map each group key associated with a list of corresponding characters.",
                  "Groups values returned by the valueTransform function applied to each character of the original char sequence\nby the key returned by the given keySelector function applied to the character\nand puts to the destination map each group key associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K, M : MutableMap<in K, MutableList<Char>>> CharSequence.groupByTo(    destination: M,     keySelector: (Char) -> K): M",
                  "fun <K, V, M : MutableMap<in K, MutableList<V>>> CharSequence.groupByTo(    destination: M,     keySelector: (Char) -> K,     valueTransform: (Char) -> V): M"
                ]
              },
              {
                "name": "groupingBy",
                "description": [
                  "Creates a Grouping source from a char sequence to be used later with one of group-and-fold operations\nusing the specified keySelector function to extract a key from each character."
                ],
                "code": [
                  "fun <K> CharSequence.groupingBy(    keySelector: (Char) -> K): Grouping<Char, K>"
                ]
              },
              {
                "name": "hasSurrogatePairAt",
                "description": [
                  "Returns true if this CharSequence has Unicode surrogate pair at the specified index."
                ],
                "code": [
                  "fun CharSequence.hasSurrogatePairAt(index: Int): Boolean"
                ]
              },
              {
                "name": "indexOf",
                "description": [
                  "Returns the index within this string of the first occurrence of the specified character, starting from the specified startIndex.",
                  "Returns the index within this char sequence of the first occurrence of the specified string,\nstarting from the specified startIndex."
                ],
                "code": [
                  "fun CharSequence.indexOf(    char: Char,     startIndex: Int = 0,     ignoreCase: Boolean = false): Int",
                  "fun CharSequence.indexOf(    string: String,     startIndex: Int = 0,     ignoreCase: Boolean = false): Int"
                ]
              },
              {
                "name": "indexOfAny",
                "description": [
                  "Finds the index of the first occurrence of any of the specified chars in this char sequence,\nstarting from the specified startIndex and optionally ignoring the case.",
                  "Finds the index of the first occurrence of any of the specified strings in this char sequence,\nstarting from the specified startIndex and optionally ignoring the case."
                ],
                "code": [
                  "fun CharSequence.indexOfAny(    chars: CharArray,     startIndex: Int = 0,     ignoreCase: Boolean = false): Int",
                  "fun CharSequence.indexOfAny(    strings: Collection<String>,     startIndex: Int = 0,     ignoreCase: Boolean = false): Int"
                ]
              },
              {
                "name": "indexOfFirst",
                "description": [
                  "Returns index of the first character matching the given predicate, or -1 if the char sequence does not contain such character."
                ],
                "code": [
                  "fun CharSequence.indexOfFirst(    predicate: (Char) -> Boolean): Int"
                ]
              },
              {
                "name": "indexOfLast",
                "description": [
                  "Returns index of the last character matching the given predicate, or -1 if the char sequence does not contain such character."
                ],
                "code": [
                  "fun CharSequence.indexOfLast(    predicate: (Char) -> Boolean): Int"
                ]
              },
              {
                "name": "isEmpty",
                "description": [
                  "Returns true if this char sequence is empty (contains no characters)."
                ],
                "code": ["fun CharSequence.isEmpty(): Boolean"]
              },
              {
                "name": "isNotBlank",
                "description": [
                  "Returns true if this char sequence is not empty and contains some characters except of whitespace characters."
                ],
                "code": ["fun CharSequence.isNotBlank(): Boolean"]
              },
              {
                "name": "isNotEmpty",
                "description": [
                  "Returns true if this char sequence is not empty."
                ],
                "code": ["fun CharSequence.isNotEmpty(): Boolean"]
              },
              {
                "name": "isNullOrBlank",
                "description": [
                  "Returns true if this nullable char sequence is either null or empty or consists solely of whitespace characters."
                ],
                "code": ["fun CharSequence?.isNullOrBlank(): Boolean"]
              },
              {
                "name": "isNullOrEmpty",
                "description": [
                  "Returns true if this nullable char sequence is either null or empty."
                ],
                "code": ["fun CharSequence?.isNullOrEmpty(): Boolean"]
              },
              {
                "name": "iterator",
                "description": [
                  "Iterator for characters of the given char sequence."
                ],
                "code": ["operator fun CharSequence.iterator(): CharIterator"]
              },
              {
                "name": "last",
                "description": [
                  "Returns the last character.",
                  "Returns the last character matching the given predicate."
                ],
                "code": [
                  "fun CharSequence.last(): Char",
                  "fun CharSequence.last(predicate: (Char) -> Boolean): Char"
                ]
              },
              {
                "name": "lastIndexOf",
                "description": [
                  "Returns the index within this char sequence of the last occurrence of the specified character,\nstarting from the specified startIndex.",
                  "Returns the index within this char sequence of the last occurrence of the specified string,\nstarting from the specified startIndex."
                ],
                "code": [
                  "fun CharSequence.lastIndexOf(    char: Char,     startIndex: Int = lastIndex,     ignoreCase: Boolean = false): Int",
                  "fun CharSequence.lastIndexOf(    string: String,     startIndex: Int = lastIndex,     ignoreCase: Boolean = false): Int"
                ]
              },
              {
                "name": "lastIndexOfAny",
                "description": [
                  "Finds the index of the last occurrence of any of the specified chars in this char sequence,\nstarting from the specified startIndex and optionally ignoring the case.",
                  "Finds the index of the last occurrence of any of the specified strings in this char sequence,\nstarting from the specified startIndex and optionally ignoring the case."
                ],
                "code": [
                  "fun CharSequence.lastIndexOfAny(    chars: CharArray,     startIndex: Int = lastIndex,     ignoreCase: Boolean = false): Int",
                  "fun CharSequence.lastIndexOfAny(    strings: Collection<String>,     startIndex: Int = lastIndex,     ignoreCase: Boolean = false): Int"
                ]
              },
              {
                "name": "lastOrNull",
                "description": [
                  "Returns the last character, or null if the char sequence is empty.",
                  "Returns the last character matching the given predicate, or null if no such character was found."
                ],
                "code": [
                  "fun CharSequence.lastOrNull(): Char?",
                  "fun CharSequence.lastOrNull(    predicate: (Char) -> Boolean): Char?"
                ]
              },
              {
                "name": "lines",
                "description": [
                  "Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR."
                ],
                "code": ["fun CharSequence.lines(): List<String>"]
              },
              {
                "name": "lineSequence",
                "description": [
                  "Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR."
                ],
                "code": ["fun CharSequence.lineSequence(): Sequence<String>"]
              },
              {
                "name": "map",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each character in the original char sequence."
                ],
                "code": [
                  "fun <R> CharSequence.map(transform: (Char) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexed",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each character and its index in the original char sequence."
                ],
                "code": [
                  "fun <R> CharSequence.mapIndexed(    transform: (index: Int, Char) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexedNotNull",
                "description": [
                  "Returns a list containing only the non-null results of applying the given transform function\nto each character and its index in the original char sequence."
                ],
                "code": [
                  "fun <R : Any> CharSequence.mapIndexedNotNull(    transform: (index: Int, Char) -> R?): List<R>"
                ]
              },
              {
                "name": "mapIndexedNotNullTo",
                "description": [
                  "Applies the given transform function to each character and its index in the original char sequence\nand appends only the non-null results to the given destination."
                ],
                "code": [
                  "fun <R : Any, C : MutableCollection<in R>> CharSequence.mapIndexedNotNullTo(    destination: C,     transform: (index: Int, Char) -> R?): C"
                ]
              },
              {
                "name": "mapIndexedTo",
                "description": [
                  "Applies the given transform function to each character and its index in the original char sequence\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> CharSequence.mapIndexedTo(    destination: C,     transform: (index: Int, Char) -> R): C"
                ]
              },
              {
                "name": "mapNotNull",
                "description": [
                  "Returns a list containing only the non-null results of applying the given transform function\nto each character in the original char sequence."
                ],
                "code": [
                  "fun <R : Any> CharSequence.mapNotNull(    transform: (Char) -> R?): List<R>"
                ]
              },
              {
                "name": "mapNotNullTo",
                "description": [
                  "Applies the given transform function to each character in the original char sequence\nand appends only the non-null results to the given destination."
                ],
                "code": [
                  "fun <R : Any, C : MutableCollection<in R>> CharSequence.mapNotNullTo(    destination: C,     transform: (Char) -> R?): C"
                ]
              },
              {
                "name": "mapTo",
                "description": [
                  "Applies the given transform function to each character of the original char sequence\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> CharSequence.mapTo(    destination: C,     transform: (Char) -> R): C"
                ]
              },
              {
                "name": "matches",
                "description": [
                  "Returns true if this char sequence matches the given regular expression."
                ],
                "code": [
                  "infix fun CharSequence.matches(regex: Regex): Boolean"
                ]
              },
              {
                "name": "maxByOrNull",
                "description": [
                  "Returns the first character yielding the largest value of the given function or null if there are no characters."
                ],
                "code": [
                  "fun <R : Comparable<R>> CharSequence.maxByOrNull(    selector: (Char) -> R): Char?"
                ]
              },
              {
                "name": "maxOf",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each character in the char sequence."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_iterable<R>.maxOf(    selector: (Char) -> R): R"
                ]
              },
              {
                "name": "maxOfOrNull",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each character in the char sequence or null if there are no characters."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_iterable<R>.maxOfOrNull(    selector: (Char) -> R): R?"
                ]
              },
              {
                "name": "maxOfWith",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each character in the char sequence."
                ],
                "code": [
                  "fun <R> CharSequence.maxOfWith(    comparator: Comparator<in R>,     selector: (Char) -> R): R"
                ]
              },
              {
                "name": "maxOfWithOrNull",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each character in the char sequence or null if there are no characters."
                ],
                "code": [
                  "fun <R> CharSequence.maxOfWithOrNull(    comparator: Comparator<in R>,     selector: (Char) -> R): R?"
                ]
              },
              {
                "name": "maxOrNull",
                "description": [
                  "Returns the largest character or null if there are no characters."
                ],
                "code": ["fun CharSequence.maxOrNull(): Char?"]
              },
              {
                "name": "maxWith",
                "description": [
                  "Returns the first character having the largest value according to the provided comparator."
                ],
                "code": [
                  "fun CharSequence.maxWith(    comparator: Comparator<in Char>): Char",
                  "fun CharSequence.maxWith(    comparator: Comparator<in Char>): Char?"
                ]
              },
              {
                "name": "maxWithOrNull",
                "description": [
                  "Returns the first character having the largest value according to the provided comparator or null if there are no characters."
                ],
                "code": [
                  "fun CharSequence.maxWithOrNull(    comparator: Comparator<in Char>): Char?"
                ]
              },
              {
                "name": "minByOrNull",
                "description": [
                  "Returns the first character yielding the smallest value of the given function or null if there are no characters."
                ],
                "code": [
                  "fun <R : Comparable<R>> CharSequence.minByOrNull(    selector: (Char) -> R): Char?"
                ]
              },
              {
                "name": "minOf",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each character in the char sequence."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_iterable<R>.minOf(    selector: (Char) -> R): R"
                ]
              },
              {
                "name": "minOfOrNull",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each character in the char sequence or null if there are no characters."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_iterable<R>.minOfOrNull(    selector: (Char) -> R): R?"
                ]
              },
              {
                "name": "minOfWith",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each character in the char sequence."
                ],
                "code": [
                  "fun <R> CharSequence.minOfWith(    comparator: Comparator<in R>,     selector: (Char) -> R): R"
                ]
              },
              {
                "name": "minOfWithOrNull",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each character in the char sequence or null if there are no characters."
                ],
                "code": [
                  "fun <R> CharSequence.minOfWithOrNull(    comparator: Comparator<in R>,     selector: (Char) -> R): R?"
                ]
              },
              {
                "name": "minOrNull",
                "description": [
                  "Returns the smallest character or null if there are no characters."
                ],
                "code": ["fun CharSequence.minOrNull(): Char?"]
              },
              {
                "name": "minWith",
                "description": [
                  "Returns the first character having the smallest value according to the provided comparator."
                ],
                "code": [
                  "fun CharSequence.minWith(    comparator: Comparator<in Char>): Char",
                  "fun CharSequence.minWith(    comparator: Comparator<in Char>): Char?"
                ]
              },
              {
                "name": "minWithOrNull",
                "description": [
                  "Returns the first character having the smallest value according to the provided comparator or null if there are no characters."
                ],
                "code": [
                  "fun CharSequence.minWithOrNull(    comparator: Comparator<in Char>): Char?"
                ]
              },
              {
                "name": "none",
                "description": [
                  "Returns true if the char sequence has no characters.",
                  "Returns true if no characters match the given predicate."
                ],
                "code": [
                  "fun CharSequence.none(): Boolean",
                  "fun CharSequence.none(predicate: (Char) -> Boolean): Boolean"
                ]
              },
              {
                "name": "onEach",
                "description": [
                  "Performs the given action on each character and returns the char sequence itself afterwards."
                ],
                "code": [
                  "fun <S : CharSequence> S.onEach(action: (Char) -> Unit): S"
                ]
              },
              {
                "name": "onEachIndexed",
                "description": [
                  "Performs the given action on each character, providing sequential index with the character,\nand returns the char sequence itself afterwards."
                ],
                "code": [
                  "fun <S : CharSequence> S.onEachIndexed(    action: (index: Int, Char) -> Unit): S"
                ]
              },
              {
                "name": "padEnd",
                "description": [
                  "Returns a char sequence with content of this char sequence padded at the end\nto the specified length with the specified character or space."
                ],
                "code": [
                  "fun CharSequence.padEnd(    length: Int,     padChar: Char = ' '): CharSequence"
                ]
              },
              {
                "name": "padStart",
                "description": [
                  "Returns a char sequence with content of this char sequence padded at the beginning\nto the specified length with the specified character or space."
                ],
                "code": [
                  "fun CharSequence.padStart(    length: Int,     padChar: Char = ' '): CharSequence"
                ]
              },
              {
                "name": "partition",
                "description": [
                  "Splits the original char sequence into pair of char sequences,\nwhere first char sequence contains characters for which predicate yielded true,\nwhile second char sequence contains characters for which predicate yielded false."
                ],
                "code": [
                  "fun CharSequence.partition(    predicate: (Char) -> Boolean): Pair<CharSequence, CharSequence>"
                ]
              },
              {
                "name": "random",
                "description": [
                  "Returns a random character from this char sequence.",
                  "Returns a random character from this char sequence using the specified source of randomness."
                ],
                "code": [
                  "fun CharSequence.random(): Char",
                  "fun CharSequence.random(random: Random): Char"
                ]
              },
              {
                "name": "randomOrNull",
                "description": [
                  "Returns a random character from this char sequence, or null if this char sequence is empty.",
                  "Returns a random character from this char sequence using the specified source of randomness, or null if this char sequence is empty."
                ],
                "code": [
                  "fun CharSequence.randomOrNull(): Char?",
                  "fun CharSequence.randomOrNull(random: Random): Char?"
                ]
              },
              {
                "name": "reduce",
                "description": [
                  "Accumulates value starting with the first character and applying operation from left to right\nto current accumulator value and each character."
                ],
                "code": [
                  "fun CharSequence.reduce(    operation: (acc: Char, Char) -> Char): Char"
                ]
              },
              {
                "name": "reduceIndexed",
                "description": [
                  "Accumulates value starting with the first character and applying operation from left to right\nto current accumulator value and each character with its index in the original char sequence."
                ],
                "code": [
                  "fun CharSequence.reduceIndexed(    operation: (index: Int, acc: Char, Char) -> Char): Char"
                ]
              },
              {
                "name": "reduceIndexedOrNull",
                "description": [
                  "Accumulates value starting with the first character and applying operation from left to right\nto current accumulator value and each character with its index in the original char sequence."
                ],
                "code": [
                  "fun CharSequence.reduceIndexedOrNull(    operation: (index: Int, acc: Char, Char) -> Char): Char?"
                ]
              },
              {
                "name": "reduceOrNull",
                "description": [
                  "Accumulates value starting with the first character and applying operation from left to right\nto current accumulator value and each character."
                ],
                "code": [
                  "fun CharSequence.reduceOrNull(    operation: (acc: Char, Char) -> Char): Char?"
                ]
              },
              {
                "name": "reduceRight",
                "description": [
                  "Accumulates value starting with the last character and applying operation from right to left\nto each character and current accumulator value."
                ],
                "code": [
                  "fun CharSequence.reduceRight(    operation: (Char, acc: Char) -> Char): Char"
                ]
              },
              {
                "name": "reduceRightIndexed",
                "description": [
                  "Accumulates value starting with the last character and applying operation from right to left\nto each character with its index in the original char sequence and current accumulator value."
                ],
                "code": [
                  "fun CharSequence.reduceRightIndexed(    operation: (index: Int, Char, acc: Char) -> Char): Char"
                ]
              },
              {
                "name": "reduceRightIndexedOrNull",
                "description": [
                  "Accumulates value starting with the last character and applying operation from right to left\nto each character with its index in the original char sequence and current accumulator value."
                ],
                "code": [
                  "fun CharSequence.reduceRightIndexedOrNull(    operation: (index: Int, Char, acc: Char) -> Char): Char?"
                ]
              },
              {
                "name": "reduceRightOrNull",
                "description": [
                  "Accumulates value starting with the last character and applying operation from right to left\nto each character and current accumulator value."
                ],
                "code": [
                  "fun CharSequence.reduceRightOrNull(    operation: (Char, acc: Char) -> Char): Char?"
                ]
              },
              {
                "name": "removePrefix",
                "description": [
                  "If this char sequence starts with the given prefix, returns a new char sequence\nwith the prefix removed. Otherwise, returns a new char sequence with the same characters."
                ],
                "code": [
                  "fun CharSequence.removePrefix(    prefix: CharSequence): CharSequence"
                ]
              },
              {
                "name": "removeRange",
                "description": [
                  "Returns a char sequence with content of this char sequence where its part at the given range is removed.",
                  "Returns a char sequence with content of this char sequence where its part at the given range is removed."
                ],
                "code": [
                  "fun CharSequence.removeRange(    startIndex: Int,     endIndex: Int): CharSequence",
                  "fun CharSequence.removeRange(range: IntRange): CharSequence"
                ]
              },
              {
                "name": "removeSuffix",
                "description": [
                  "If this char sequence ends with the given suffix, returns a new char sequence\nwith the suffix removed. Otherwise, returns a new char sequence with the same characters."
                ],
                "code": [
                  "fun CharSequence.removeSuffix(    suffix: CharSequence): CharSequence"
                ]
              },
              {
                "name": "removeSurrounding",
                "description": [
                  "When this char sequence starts with the given prefix and ends with the given suffix,\nreturns a new char sequence having both the given prefix and suffix removed.\nOtherwise returns a new char sequence with the same characters.",
                  "When this char sequence starts with and ends with the given delimiter,\nreturns a new char sequence having this delimiter removed both from the start and end.\nOtherwise returns a new char sequence with the same characters."
                ],
                "code": [
                  "fun CharSequence.removeSurrounding(    prefix: CharSequence,     suffix: CharSequence): CharSequence",
                  "fun CharSequence.removeSurrounding(    delimiter: CharSequence): CharSequence"
                ]
              },
              {
                "name": "replace",
                "description": [
                  "Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\nwith the given replacement.",
                  "Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\nwith the result of the given function transform that takes MatchResult and returns a string to be used as a\nreplacement for that match."
                ],
                "code": [
                  "fun CharSequence.replace(    regex: Regex,     replacement: String): String",
                  "fun CharSequence.replace(    regex: Regex,     transform: (MatchResult) -> CharSequence): String"
                ]
              },
              {
                "name": "replaceFirst",
                "description": [
                  "Replaces the first occurrence of the given regular expression regex in this char sequence with specified replacement expression."
                ],
                "code": [
                  "fun CharSequence.replaceFirst(    regex: Regex,     replacement: String): String"
                ]
              },
              {
                "name": "replaceRange",
                "description": [
                  "Returns a char sequence with content of this char sequence where its part at the given range\nis replaced with the replacement char sequence.",
                  "Returns a char sequence with content of this char sequence where its part at the given range\nis replaced with the replacement char sequence."
                ],
                "code": [
                  "fun CharSequence.replaceRange(    startIndex: Int,     endIndex: Int,     replacement: CharSequence): CharSequence",
                  "fun CharSequence.replaceRange(    range: IntRange,     replacement: CharSequence): CharSequence"
                ]
              },
              {
                "name": "reversed",
                "description": [
                  "Returns a char sequence with characters in reversed order."
                ],
                "code": ["fun CharSequence.reversed(): CharSequence"]
              },
              {
                "name": "runningFold",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each character and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> CharSequence.runningFold(    initial: R,     operation: (acc: R, Char) -> R): List<R>"
                ]
              },
              {
                "name": "runningFoldIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each character, its index in the original char sequence and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> CharSequence.runningFoldIndexed(    initial: R,     operation: (index: Int, acc: R, Char) -> R): List<R>"
                ]
              },
              {
                "name": "runningReduce",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each character and current accumulator value that starts with the first character of this char sequence."
                ],
                "code": [
                  "fun CharSequence.runningReduce(    operation: (acc: Char, Char) -> Char): List<Char>"
                ]
              },
              {
                "name": "runningReduceIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each character, its index in the original char sequence and current accumulator value that starts with the first character of this char sequence."
                ],
                "code": [
                  "fun CharSequence.runningReduceIndexed(    operation: (index: Int, acc: Char, Char) -> Char): List<Char>"
                ]
              },
              {
                "name": "scan",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each character and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> CharSequence.scan(    initial: R,     operation: (acc: R, Char) -> R): List<R>"
                ]
              },
              {
                "name": "scanIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each character, its index in the original char sequence and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> CharSequence.scanIndexed(    initial: R,     operation: (index: Int, acc: R, Char) -> R): List<R>"
                ]
              },
              {
                "name": "single",
                "description": [
                  "Returns the single character, or throws an exception if the char sequence is empty or has more than one character.",
                  "Returns the single character matching the given predicate, or throws exception if there is no or more than one matching character."
                ],
                "code": [
                  "fun CharSequence.single(): Char",
                  "fun CharSequence.single(predicate: (Char) -> Boolean): Char"
                ]
              },
              {
                "name": "singleOrNull",
                "description": [
                  "Returns single character, or null if the char sequence is empty or has more than one character.",
                  "Returns the single character matching the given predicate, or null if character was not found or more than one character was found."
                ],
                "code": [
                  "fun CharSequence.singleOrNull(): Char?",
                  "fun CharSequence.singleOrNull(    predicate: (Char) -> Boolean): Char?"
                ]
              },
              {
                "name": "slice",
                "description": [
                  "Returns a char sequence containing characters of the original char sequence at the specified range of indices.",
                  "Returns a char sequence containing characters of the original char sequence at specified indices."
                ],
                "code": [
                  "fun CharSequence.slice(indices: IntRange): CharSequence",
                  "fun CharSequence.slice(indices: Iterable<Int>): CharSequence"
                ]
              },
              {
                "name": "split",
                "description": [
                  "Splits this char sequence to a list of strings around occurrences of the specified delimiters.",
                  "Splits this char sequence to a list of strings around matches of the given regular expression.",
                  "Splits this char sequence around matches of the given regular expression."
                ],
                "code": [
                  "fun CharSequence.split(    vararg delimiters: String,     ignoreCase: Boolean = false,     limit: Int = 0): List<String>",
                  "fun CharSequence.split(    vararg delimiters: Char,     ignoreCase: Boolean = false,     limit: Int = 0): List<String>",
                  "fun CharSequence.split(    regex: Regex,     limit: Int = 0): List<String>",
                  "fun CharSequence.split(    regex: Pattern,     limit: Int = 0): List<String>"
                ]
              },
              {
                "name": "splitToSequence",
                "description": [
                  "Splits this char sequence to a sequence of strings around occurrences of the specified delimiters.",
                  "Splits this char sequence to a sequence of strings around matches of the given regular expression."
                ],
                "code": [
                  "fun CharSequence.splitToSequence(    vararg delimiters: String,     ignoreCase: Boolean = false,     limit: Int = 0): Sequence<String>",
                  "fun CharSequence.splitToSequence(    vararg delimiters: Char,     ignoreCase: Boolean = false,     limit: Int = 0): Sequence<String>",
                  "fun CharSequence.splitToSequence(    regex: Regex,     limit: Int = 0): Sequence<String>"
                ]
              },
              {
                "name": "startsWith",
                "description": [
                  "Returns true if this char sequence starts with the specified character.",
                  "Returns true if this char sequence starts with the specified prefix.",
                  "Returns true if a substring of this char sequence starting at the specified offset startIndex starts with the specified prefix."
                ],
                "code": [
                  "fun CharSequence.startsWith(    char: Char,     ignoreCase: Boolean = false): Boolean",
                  "fun CharSequence.startsWith(    prefix: CharSequence,     ignoreCase: Boolean = false): Boolean",
                  "fun CharSequence.startsWith(    prefix: CharSequence,     startIndex: Int,     ignoreCase: Boolean = false): Boolean"
                ]
              },
              {
                "name": "subSequence",
                "description": [
                  "Returns a subsequence of this char sequence specified by the given range of indices."
                ],
                "code": [
                  "fun CharSequence.subSequence(range: IntRange): CharSequence"
                ]
              },
              {
                "name": "substring",
                "description": [
                  "Returns a substring of chars from a range of this char sequence starting at the startIndex and ending right before the endIndex.",
                  "Returns a substring of chars at indices from the specified range of this char sequence."
                ],
                "code": [
                  "fun CharSequence.substring(    startIndex: Int,     endIndex: Int = length): String",
                  "fun CharSequence.substring(range: IntRange): String"
                ]
              },
              {
                "name": "sumBy",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each character in the char sequence."
                ],
                "code": ["fun CharSequence.sumBy(selector: (Char) -> Int): Int"]
              },
              {
                "name": "sumByDouble",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each character in the char sequence."
                ],
                "code": [
                  "fun CharSequence.sumByDouble(    selector: (Char) -> Double): Double"
                ]
              },
              {
                "name": "sumOf",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each character in the char sequence."
                ],
                "code": [
                  "fun CharSequence.sumOf(selector: (Char) -> Double): Double",
                  "fun CharSequence.sumOf(selector: (Char) -> Int): Int",
                  "fun CharSequence.sumOf(selector: (Char) -> Long): Long",
                  "fun CharSequence.sumOf(selector: (Char) -> UInt): UInt",
                  "fun CharSequence.sumOf(selector: (Char) -> ULong): ULong",
                  "fun CharSequence.sumOf(    selector: (Char) -> BigDecimal): BigDecimal",
                  "fun CharSequence.sumOf(    selector: (Char) -> BigInteger): BigInteger"
                ]
              },
              {
                "name": "take",
                "description": [
                  "Returns a subsequence of this char sequence containing the first n characters from this char sequence, or the entire char sequence if this char sequence is shorter."
                ],
                "code": ["fun CharSequence.take(n: Int): CharSequence"]
              },
              {
                "name": "takeLast",
                "description": [
                  "Returns a subsequence of this char sequence containing the last n characters from this char sequence, or the entire char sequence if this char sequence is shorter."
                ],
                "code": ["fun CharSequence.takeLast(n: Int): CharSequence"]
              },
              {
                "name": "takeLastWhile",
                "description": [
                  "Returns a subsequence of this char sequence containing last characters that satisfy the given predicate."
                ],
                "code": [
                  "fun CharSequence.takeLastWhile(    predicate: (Char) -> Boolean): CharSequence"
                ]
              },
              {
                "name": "takeWhile",
                "description": [
                  "Returns a subsequence of this char sequence containing the first characters that satisfy the given predicate."
                ],
                "code": [
                  "fun CharSequence.takeWhile(    predicate: (Char) -> Boolean): CharSequence"
                ]
              },
              {
                "name": "toCollection",
                "description": [
                  "Appends all characters to the given destination collection."
                ],
                "code": [
                  "fun <C : MutableCollection<in Char>> CharSequence.toCollection(    destination: C): C"
                ]
              },
              {
                "name": "toHashSet",
                "description": ["Returns a new HashSet of all characters."],
                "code": ["fun CharSequence.toHashSet(): HashSet<Char>"]
              },
              {
                "name": "toList",
                "description": ["Returns a List containing all characters."],
                "code": ["fun CharSequence.toList(): List<Char>"]
              },
              {
                "name": "toMutableList",
                "description": [
                  "Returns a new MutableList filled with all characters of this char sequence."
                ],
                "code": ["fun CharSequence.toMutableList(): MutableList<Char>"]
              },
              {
                "name": "toSet",
                "description": ["Returns a Set of all characters."],
                "code": ["fun CharSequence.toSet(): Set<Char>"]
              },
              {
                "name": "toSortedSet",
                "description": ["Returns a new SortedSet of all characters."],
                "code": ["fun CharSequence.toSortedSet(): SortedSet<Char>"]
              },
              {
                "name": "trim",
                "description": [
                  "Returns a sub sequence of this char sequence having leading and trailing characters matching the predicate removed.",
                  "Returns a sub sequence of this char sequence having leading and trailing characters from the chars array removed.",
                  "Returns a sub sequence of this char sequence having leading and trailing whitespace removed."
                ],
                "code": [
                  "fun CharSequence.trim(    predicate: (Char) -> Boolean): CharSequence",
                  "fun CharSequence.trim(vararg chars: Char): CharSequence",
                  "fun CharSequence.trim(): CharSequence"
                ]
              },
              {
                "name": "trimEnd",
                "description": [
                  "Returns a sub sequence of this char sequence having trailing characters matching the predicate removed.",
                  "Returns a sub sequence of this char sequence having trailing characters from the chars array removed.",
                  "Returns a sub sequence of this char sequence having trailing whitespace removed."
                ],
                "code": [
                  "fun CharSequence.trimEnd(    predicate: (Char) -> Boolean): CharSequence",
                  "fun CharSequence.trimEnd(vararg chars: Char): CharSequence",
                  "fun CharSequence.trimEnd(): CharSequence"
                ]
              },
              {
                "name": "trimStart",
                "description": [
                  "Returns a sub sequence of this char sequence having leading characters matching the predicate removed.",
                  "Returns a sub sequence of this char sequence having leading characters from the chars array removed.",
                  "Returns a sub sequence of this char sequence having leading whitespace removed."
                ],
                "code": [
                  "fun CharSequence.trimStart(    predicate: (Char) -> Boolean): CharSequence",
                  "fun CharSequence.trimStart(vararg chars: Char): CharSequence",
                  "fun CharSequence.trimStart(): CharSequence"
                ]
              },
              {
                "name": "windowed",
                "description": [
                  "Returns a list of snapshots of the window of the given size\nsliding along this char sequence with the given step, where each\nsnapshot is a string.",
                  "Returns a list of results of applying the given transform function to\nan each char sequence representing a view over the window of the given size\nsliding along this char sequence with the given step."
                ],
                "code": [
                  "fun CharSequence.windowed(    size: Int,     step: Int = 1,     partialWindows: Boolean = false): List<String>",
                  "fun <R> CharSequence.windowed(    size: Int,     step: Int = 1,     partialWindows: Boolean = false,     transform: (CharSequence) -> R): List<R>"
                ]
              },
              {
                "name": "windowedSequence",
                "description": [
                  "Returns a sequence of snapshots of the window of the given size\nsliding along this char sequence with the given step, where each\nsnapshot is a string.",
                  "Returns a sequence of results of applying the given transform function to\nan each char sequence representing a view over the window of the given size\nsliding along this char sequence with the given step."
                ],
                "code": [
                  "fun CharSequence.windowedSequence(    size: Int,     step: Int = 1,     partialWindows: Boolean = false): Sequence<String>",
                  "fun <R> CharSequence.windowedSequence(    size: Int,     step: Int = 1,     partialWindows: Boolean = false,     transform: (CharSequence) -> R): Sequence<R>"
                ]
              },
              {
                "name": "withIndex",
                "description": [
                  "Returns a lazy Iterable that wraps each character of the original char sequence\ninto an IndexedValue containing the index of that character and the character itself."
                ],
                "code": [
                  "fun CharSequence.withIndex(): Iterable<IndexedValue<Char>>"
                ]
              },
              {
                "name": "zip",
                "description": [
                  "Returns a list of pairs built from the characters of this and the other char sequences with the same index\nThe returned list has length of the shortest char sequence.",
                  "Returns a list of values built from the characters of this and the other char sequences with the same index\nusing the provided transform function applied to each pair of characters.\nThe returned list has length of the shortest char sequence."
                ],
                "code": [
                  "infix fun CharSequence.zip(    other: CharSequence): List<Pair<Char, Char>>",
                  "fun <V> CharSequence.zip(    other: CharSequence,     transform: (a: Char, b: Char) -> V): List<V>"
                ]
              },
              {
                "name": "zipWithNext",
                "description": [
                  "Returns a list of pairs of each two adjacent characters in this char sequence.",
                  "Returns a list containing the results of applying the given transform function\nto an each pair of two adjacent characters in this char sequence."
                ],
                "code": [
                  "fun CharSequence.zipWithNext(): List<Pair<Char, Char>>",
                  "fun <R> CharSequence.zipWithNext(    transform: (a: Char, b: Char) -> R): List<R>"
                ]
              }
            ]
          },
          {
            "name": "Inheritors",
            "declarations": [
              {
                "name": "String",
                "description": [
                  "The String class represents character strings. All string literals in Kotlin programs, such as \"abc\", are\nimplemented as instances of this class."
                ],
                "code": ["class String : Comparable<String>, CharSequence"]
              },
              {
                "name": "StringBuilder",
                "description": ["A mutable sequence of characters."],
                "code": [
                  "class StringBuilder : Appendable, CharSequence",
                  "typealias StringBuilder = StringBuilder",
                  "class StringBuilder : CharSequence, Appendable"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "Comparable",
        "description": [
          "Classes which inherit from this interface have a defined total ordering between their instances."
        ],
        "code": ["interface Comparable<in T>"],
        "url": "-comparable/index.html",
        "subcategories": [
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "compareTo",
                "description": [
                  "Compares this object with the specified object for order. Returns zero if this object is equal\nto the specified other object, a negative number if it's less than other, or a positive number\nif it's greater than other."
                ],
                "code": ["abstract operator fun compareTo(other: T): Int"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "coerceAtLeast",
                "description": [
                  "Ensures that this value is not less than the specified minimumValue."
                ],
                "code": [
                  "fun <T : Comparable<T>> T.coerceAtLeast(minimumValue: T): T"
                ]
              },
              {
                "name": "coerceAtMost",
                "description": [
                  "Ensures that this value is not greater than the specified maximumValue."
                ],
                "code": [
                  "fun <T : Comparable<T>> T.coerceAtMost(maximumValue: T): T"
                ]
              },
              {
                "name": "coerceIn",
                "description": [
                  "Ensures that this value lies in the specified range minimumValue..maximumValue.",
                  "Ensures that this value lies in the specified range."
                ],
                "code": [
                  "fun <T : Comparable<T>> T.coerceIn(    minimumValue: T?,     maximumValue: T?): T",
                  "fun <T : Comparable<T>> T.coerceIn(    range: ClosedFloatingPointRange<T>): T",
                  "fun <T : Comparable<T>> T.coerceIn(range: ClosedRange<T>): T"
                ]
              },
              {
                "name": "compareTo",
                "description": [
                  "Compares this object with the specified object for order. Returns zero if this object is equal\nto the specified other object, a negative number if it's less than other, or a positive number\nif it's greater than other."
                ],
                "code": ["infix fun <T> Comparable<T>.compareTo(other: T): Int"]
              },
              {
                "name": "rangeTo",
                "description": [
                  "Creates a range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeTo(    that: T): ClosedRange<T>"
                ]
              },
              {
                "name": "rangeUntil",
                "description": [
                  "Creates an open-ended range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeUntil(    that: T): OpenEndRange<T>"
                ]
              }
            ]
          },
          {
            "name": "Inheritors",
            "declarations": [
              {
                "name": "Boolean",
                "description": [
                  "Represents a value which is either true or false. On the JVM, non-nullable values of this type are\nrepresented as values of the primitive type boolean."
                ],
                "code": ["class Boolean : Comparable<Boolean>"]
              },
              {
                "name": "Byte",
                "description": [
                  "Represents a 8-bit signed integer.\nOn the JVM, non-nullable values of this type are represented as values of the primitive type byte."
                ],
                "code": ["class Byte : Number, Comparable<Byte>"]
              },
              {
                "name": "Char",
                "description": ["Represents a 16-bit Unicode character."],
                "code": ["class Char : Comparable<Char>"]
              },
              {
                "name": "ComparableTimeMark",
                "description": [
                  "A TimeMark that can be compared for difference with other time marks obtained from the same TimeSource.WithComparableMarks time source."
                ],
                "code": [
                  "interface ComparableTimeMark :     TimeMark,     Comparable<ComparableTimeMark>"
                ]
              },
              {
                "name": "Double",
                "description": [
                  "Represents a double-precision 64-bit IEEE 754 floating point number.\nOn the JVM, non-nullable values of this type are represented as values of the primitive type double."
                ],
                "code": ["class Double : Number, Comparable<Double>"]
              },
              {
                "name": "Duration",
                "description": [
                  "Represents the amount of time one instant of time is away from another instant."
                ],
                "code": ["class Duration : Comparable<Duration>"]
              },
              {
                "name": "Enum",
                "description": [
                  "The common base class of all enum classes.\nSee the Kotlin language documentation for more\ninformation on enum classes."
                ],
                "code": ["abstract class Enum<E : Enum<E>> : Comparable<E>"]
              },
              {
                "name": "Float",
                "description": [
                  "Represents a single-precision 32-bit IEEE 754 floating point number.\nOn the JVM, non-nullable values of this type are represented as values of the primitive type float."
                ],
                "code": ["class Float : Number, Comparable<Float>"]
              },
              {
                "name": "Int",
                "description": [
                  "Represents a 32-bit signed integer.\nOn the JVM, non-nullable values of this type are represented as values of the primitive type int."
                ],
                "code": ["class Int : Number, Comparable<Int>"]
              },
              {
                "name": "KotlinVersion",
                "description": [
                  "Represents a version of the Kotlin standard library."
                ],
                "code": ["class KotlinVersion : Comparable<KotlinVersion>"]
              },
              {
                "name": "Long",
                "description": [
                  "Represents a 64-bit signed integer.\nOn the JVM, non-nullable values of this type are represented as values of the primitive type long."
                ],
                "code": ["class Long : Number, Comparable<Long>"]
              },
              {
                "name": "Short",
                "description": [
                  "Represents a 16-bit signed integer.\nOn the JVM, non-nullable values of this type are represented as values of the primitive type short."
                ],
                "code": ["class Short : Number, Comparable<Short>"]
              },
              {
                "name": "String",
                "description": [
                  "The String class represents character strings. All string literals in Kotlin programs, such as \"abc\", are\nimplemented as instances of this class."
                ],
                "code": ["class String : Comparable<String>, CharSequence"]
              },
              {
                "name": "UByte",
                "description": [],
                "code": ["class UByte : Comparable<UByte>"]
              },
              {
                "name": "UInt",
                "description": [],
                "code": ["class UInt : Comparable<UInt>"]
              },
              {
                "name": "ULong",
                "description": [],
                "code": ["class ULong : Comparable<ULong>"]
              },
              {
                "name": "UShort",
                "description": [],
                "code": ["class UShort : Comparable<UShort>"]
              }
            ]
          }
        ]
      },
      {
        "name": "Comparator",
        "description": [
          "Provides a comparison function for imposing a total ordering between instances of the type T."
        ],
        "code": [
          "fun interface Comparator<T>",
          "typealias Comparator<T> = Comparator<T>"
        ],
        "url": "-comparator/index.html",
        "subcategories": [
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "compare",
                "description": [
                  "Compares its two arguments for order. Returns zero if the arguments are equal,\na negative number if the first argument is less than the second, or a positive number\nif the first argument is greater than the second."
                ],
                "code": ["abstract fun compare(a: T, b: T): Int"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "reversed",
                "description": [
                  "Returns a comparator that imposes the reverse ordering of this comparator."
                ],
                "code": ["fun <T> Comparator<T>.reversed(): Comparator<T>"]
              },
              {
                "name": "then",
                "description": [
                  "Combines this comparator and the given comparator such that the latter is applied only\nwhen the former considered values equal."
                ],
                "code": [
                  "infix fun <T> Comparator<T>.then(    comparator: Comparator<in T>): Comparator<T>"
                ]
              },
              {
                "name": "thenBy",
                "description": [
                  "Creates a comparator comparing values after the primary comparator defined them equal. It uses\nthe function to transform value to a Comparable instance for comparison.",
                  "Creates a comparator comparing values after the primary comparator defined them equal. It uses\nthe selector function to transform values and then compares them with the given comparator."
                ],
                "code": [
                  "fun <T> Comparator<T>.thenBy(    selector: (T) -> Comparable<*>?): Comparator<T>",
                  "fun <T, K> Comparator<T>.thenBy(    comparator: Comparator<in K>,     selector: (T) -> K): Comparator<T>"
                ]
              },
              {
                "name": "thenByDescending",
                "description": [
                  "Creates a descending comparator using the primary comparator and\nthe function to transform value to a Comparable instance for comparison.",
                  "Creates a descending comparator comparing values after the primary comparator defined them equal. It uses\nthe selector function to transform values and then compares them with the given comparator."
                ],
                "code": [
                  "fun <T> Comparator<T>.thenByDescending(    selector: (T) -> Comparable<*>?): Comparator<T>",
                  "fun <T, K> Comparator<T>.thenByDescending(    comparator: Comparator<in K>,     selector: (T) -> K): Comparator<T>"
                ]
              },
              {
                "name": "thenComparator",
                "description": [
                  "Creates a comparator using the primary comparator and function to calculate a result of comparison."
                ],
                "code": [
                  "fun <T> Comparator<T>.thenComparator(    comparison: (a: T, b: T) -> Int): Comparator<T>"
                ]
              },
              {
                "name": "thenDescending",
                "description": [
                  "Combines this comparator and the given comparator such that the latter is applied only\nwhen the former considered values equal."
                ],
                "code": [
                  "infix fun <T> Comparator<T>.thenDescending(    comparator: Comparator<in T>): Comparator<T>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "DeepRecursiveFunction",
        "description": [
          "Defines deep recursive function that keeps its stack on the heap,\nwhich allows very deep recursive computations that do not use the actual call stack.\nTo initiate a call to this deep recursive function use its invoke function.\nAs a rule of thumb, it should be used if recursion goes deeper than a thousand calls."
        ],
        "code": ["class DeepRecursiveFunction<T, R>"],
        "url": "-deep-recursive-function/index.html",
        "subcategories": [
          {
            "name": "Parameters",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Defines deep recursive function that keeps its stack on the heap,\nwhich allows very deep recursive computations that do not use the actual call stack.\nTo initiate a call to this deep recursive function use its invoke function.\nAs a rule of thumb, it should be used if recursion goes deeper than a thousand calls."
                ],
                "code": [
                  "DeepRecursiveFunction(    block: suspend DeepRecursiveScope<T, R>.(T) -> R)"
                ]
              }
            ]
          },
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "invoke",
                "description": [
                  "Initiates a call to this deep recursive function, forming a root of the call tree."
                ],
                "code": [
                  "operator fun <T, R> DeepRecursiveFunction<T, R>.invoke(    value: T): R"
                ]
              }
            ]
          },
          { "name": "Extension Functions", "declarations": [] }
        ]
      },
      {
        "name": "DeepRecursiveScope",
        "description": [
          "A scope class for DeepRecursiveFunction function declaration that defines callRecursive methods to\nrecursively call this function or another DeepRecursiveFunction putting the call activation frame on the heap."
        ],
        "code": ["sealed class DeepRecursiveScope<T, R>"],
        "url": "-deep-recursive-scope/index.html",
        "subcategories": [
          {
            "name": "Parameters",
            "declarations": [
              {
                "name": "callRecursive",
                "description": [
                  "Makes recursive call to this DeepRecursiveFunction function putting the call activation frame on the heap,\nas opposed to the actual call stack that is used by a regular recursive call.",
                  "Makes call to the specified DeepRecursiveFunction function putting the call activation frame on the heap,\nas opposed to the actual call stack that is used by a regular call."
                ],
                "code": [
                  "abstract suspend fun callRecursive(value: T): R",
                  "abstract suspend fun <U, S> DeepRecursiveFunction<U, S>.callRecursive(    value: U): S"
                ]
              },
              {
                "name": "invoke",
                "description": [],
                "code": [
                  "operator fun DeepRecursiveFunction<*, *>.invoke(    value: Any?): Nothing"
                ]
              }
            ]
          },
          { "name": "Functions", "declarations": [] }
        ]
      },
      {
        "name": "DeprecationLevel",
        "description": [
          "Possible levels of a deprecation. The level specifies how the deprecated element usages are reported in code."
        ],
        "code": ["enum class DeprecationLevel"],
        "url": "-deprecation-level/index.html",
        "subcategories": [
          {
            "name": "Enum Values",
            "declarations": [
              {
                "name": "WARNING",
                "description": [
                  "Usage of the deprecated element will be reported as a warning."
                ],
                "code": []
              },
              {
                "name": "ERROR",
                "description": [
                  "Usage of the deprecated element will be reported as an error."
                ],
                "code": []
              },
              {
                "name": "HIDDEN",
                "description": [
                  "Deprecated element will not be accessible from code."
                ],
                "code": []
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "declaringJavaClass",
                "description": [
                  "Returns a Java Class instance of the enum the given constant belongs to."
                ],
                "code": [
                  "val <E : Enum<E>> Enum<E>.declaringJavaClass: Class<E>"
                ]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "coerceAtLeast",
                "description": [
                  "Ensures that this value is not less than the specified minimumValue."
                ],
                "code": [
                  "fun <T : Comparable<T>> T.coerceAtLeast(minimumValue: T): T"
                ]
              },
              {
                "name": "coerceAtMost",
                "description": [
                  "Ensures that this value is not greater than the specified maximumValue."
                ],
                "code": [
                  "fun <T : Comparable<T>> T.coerceAtMost(maximumValue: T): T"
                ]
              },
              {
                "name": "coerceIn",
                "description": [
                  "Ensures that this value lies in the specified range minimumValue..maximumValue.",
                  "Ensures that this value lies in the specified range."
                ],
                "code": [
                  "fun <T : Comparable<T>> T.coerceIn(    minimumValue: T?,     maximumValue: T?): T",
                  "fun <T : Comparable<T>> T.coerceIn(    range: ClosedFloatingPointRange<T>): T",
                  "fun <T : Comparable<T>> T.coerceIn(range: ClosedRange<T>): T"
                ]
              },
              {
                "name": "compareTo",
                "description": [
                  "Compares this object with the specified object for order. Returns zero if this object is equal\nto the specified other object, a negative number if it's less than other, or a positive number\nif it's greater than other."
                ],
                "code": ["infix fun <T> Comparable<T>.compareTo(other: T): Int"]
              },
              {
                "name": "rangeTo",
                "description": [
                  "Creates a range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeTo(    that: T): ClosedRange<T>"
                ]
              },
              {
                "name": "rangeUntil",
                "description": [
                  "Creates an open-ended range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeUntil(    that: T): OpenEndRange<T>"
                ]
              }
            ]
          },
          {
            "name": "Inheritors",
            "declarations": [
              {
                "name": "ERROR",
                "description": [
                  "Usage of the deprecated element will be reported as an error."
                ],
                "code": []
              },
              {
                "name": "HIDDEN",
                "description": [
                  "Deprecated element will not be accessible from code."
                ],
                "code": []
              },
              {
                "name": "WARNING",
                "description": [
                  "Usage of the deprecated element will be reported as a warning."
                ],
                "code": []
              }
            ]
          }
        ]
      },
      {
        "name": "Double",
        "description": [
          "Represents a double-precision 64-bit IEEE 754 floating point number.\nOn the JVM, non-nullable values of this type are represented as values of the primitive type double."
        ],
        "code": ["class Double : Number, Comparable<Double>"],
        "url": "-double/index.html",
        "subcategories": [
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "compareTo",
                "description": [
                  "Compares this value with the specified value for order.\nReturns zero if this value is equal to the specified other value, a negative number if it's less than other,\nor a positive number if it's greater than other."
                ],
                "code": [
                  "operator fun compareTo(other: Byte): Int",
                  "operator fun compareTo(other: Short): Int",
                  "operator fun compareTo(other: Int): Int",
                  "operator fun compareTo(other: Long): Int",
                  "operator fun compareTo(other: Float): Int",
                  "operator fun compareTo(other: Double): Int"
                ]
              },
              {
                "name": "dec",
                "description": ["Returns this value decremented by one."],
                "code": ["operator fun dec(): Double"]
              },
              {
                "name": "div",
                "description": ["Divides this value by the other value."],
                "code": [
                  "operator fun div(other: Byte): Double",
                  "operator fun div(other: Short): Double",
                  "operator fun div(other: Int): Double",
                  "operator fun div(other: Long): Double",
                  "operator fun div(other: Float): Double",
                  "operator fun div(other: Double): Double"
                ]
              },
              {
                "name": "equals",
                "description": [
                  "Indicates whether some other object is \"equal to\" this one. Implementations must fulfil the following\nrequirements:"
                ],
                "code": [
                  "fun equals(other: Double): Boolean",
                  "fun equals(other: Any?): Boolean"
                ]
              },
              {
                "name": "hashCode",
                "description": [
                  "Returns a hash code value for the object.  The general contract of hashCode is:"
                ],
                "code": ["fun hashCode(): Int"]
              },
              {
                "name": "inc",
                "description": ["Returns this value incremented by one."],
                "code": ["operator fun inc(): Double"]
              },
              {
                "name": "minus",
                "description": ["Subtracts the other value from this value."],
                "code": [
                  "operator fun minus(other: Byte): Double",
                  "operator fun minus(other: Short): Double",
                  "operator fun minus(other: Int): Double",
                  "operator fun minus(other: Long): Double",
                  "operator fun minus(other: Float): Double",
                  "operator fun minus(other: Double): Double"
                ]
              },
              {
                "name": "plus",
                "description": ["Adds the other value to this value."],
                "code": [
                  "operator fun plus(other: Byte): Double",
                  "operator fun plus(other: Short): Double",
                  "operator fun plus(other: Int): Double",
                  "operator fun plus(other: Long): Double",
                  "operator fun plus(other: Float): Double",
                  "operator fun plus(other: Double): Double"
                ]
              },
              {
                "name": "rem",
                "description": [
                  "Calculates the remainder of truncating division of this value (dividend) by the other value (divisor)."
                ],
                "code": [
                  "operator fun rem(other: Byte): Double",
                  "operator fun rem(other: Short): Double",
                  "operator fun rem(other: Int): Double",
                  "operator fun rem(other: Long): Double",
                  "operator fun rem(other: Float): Double",
                  "operator fun rem(other: Double): Double"
                ]
              },
              {
                "name": "times",
                "description": ["Multiplies this value by the other value."],
                "code": [
                  "operator fun times(other: Byte): Double",
                  "operator fun times(other: Short): Double",
                  "operator fun times(other: Int): Double",
                  "operator fun times(other: Long): Double",
                  "operator fun times(other: Float): Double",
                  "operator fun times(other: Double): Double"
                ]
              },
              {
                "name": "toByte",
                "description": ["Converts this Double value to Byte."],
                "code": ["fun toByte(): Byte"]
              },
              {
                "name": "toChar",
                "description": ["Converts this Double value to Char."],
                "code": ["fun toChar(): Char"]
              },
              {
                "name": "toDouble",
                "description": ["Returns this value."],
                "code": ["fun toDouble(): Double"]
              },
              {
                "name": "toFloat",
                "description": ["Converts this Double value to Float."],
                "code": ["fun toFloat(): Float"]
              },
              {
                "name": "toInt",
                "description": ["Converts this Double value to Int."],
                "code": ["fun toInt(): Int"]
              },
              {
                "name": "toLong",
                "description": ["Converts this Double value to Long."],
                "code": ["fun toLong(): Long"]
              },
              {
                "name": "toShort",
                "description": ["Converts this Double value to Short."],
                "code": ["fun toShort(): Short"]
              },
              {
                "name": "toString",
                "description": [
                  "Returns a string representation of the object."
                ],
                "code": ["fun toString(): String"]
              },
              {
                "name": "unaryMinus",
                "description": ["Returns the negative of this value."],
                "code": ["operator fun unaryMinus(): Double"]
              },
              {
                "name": "unaryPlus",
                "description": ["Returns this value."],
                "code": ["operator fun unaryPlus(): Double"]
              }
            ]
          },
          {
            "name": "Companion Object Properties",
            "declarations": [
              {
                "name": "MAX_VALUE",
                "description": [
                  "A constant holding the largest positive finite value of Double."
                ],
                "code": ["const val MAX_VALUE: Double"]
              },
              {
                "name": "MIN_VALUE",
                "description": [
                  "A constant holding the smallest positive nonzero value of Double."
                ],
                "code": ["const val MIN_VALUE: Double"]
              },
              {
                "name": "NaN",
                "description": [
                  "A constant holding the \"not a number\" value of Double."
                ],
                "code": ["const val NaN: Double"]
              },
              {
                "name": "NEGATIVE_INFINITY",
                "description": [
                  "A constant holding the negative infinity value of Double."
                ],
                "code": ["const val NEGATIVE_INFINITY: Double"]
              },
              {
                "name": "POSITIVE_INFINITY",
                "description": [
                  "A constant holding the positive infinity value of Double."
                ],
                "code": ["const val POSITIVE_INFINITY: Double"]
              },
              {
                "name": "SIZE_BITS",
                "description": [
                  "The number of bits used to represent an instance of Double in a binary form."
                ],
                "code": ["const val SIZE_BITS: Int"]
              },
              {
                "name": "SIZE_BYTES",
                "description": [
                  "The number of bytes used to represent an instance of Double in a binary form."
                ],
                "code": ["const val SIZE_BYTES: Int"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "days",
                "description": [
                  "Returns a Duration equal to this Double number of days."
                ],
                "code": ["val Double.days: Duration"]
              },
              {
                "name": "hours",
                "description": [
                  "Returns a Duration equal to this Double number of hours."
                ],
                "code": ["val Double.hours: Duration"]
              },
              {
                "name": "microseconds",
                "description": [
                  "Returns a Duration equal to this Double number of microseconds."
                ],
                "code": ["val Double.microseconds: Duration"]
              },
              {
                "name": "milliseconds",
                "description": [
                  "Returns a Duration equal to this Double number of milliseconds."
                ],
                "code": ["val Double.milliseconds: Duration"]
              },
              {
                "name": "minutes",
                "description": [
                  "Returns a Duration equal to this Double number of minutes."
                ],
                "code": ["val Double.minutes: Duration"]
              },
              {
                "name": "nanoseconds",
                "description": [
                  "Returns a Duration equal to this Double number of nanoseconds."
                ],
                "code": ["val Double.nanoseconds: Duration"]
              },
              {
                "name": "seconds",
                "description": [
                  "Returns a Duration equal to this Double number of seconds."
                ],
                "code": ["val Double.seconds: Duration"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "coerceAtLeast",
                "description": [
                  "Ensures that this value is not less than the specified minimumValue."
                ],
                "code": [
                  "fun Double.coerceAtLeast(minimumValue: Double): Double",
                  "fun <T : Comparable<T>> T.coerceAtLeast(minimumValue: T): T"
                ]
              },
              {
                "name": "coerceAtMost",
                "description": [
                  "Ensures that this value is not greater than the specified maximumValue."
                ],
                "code": [
                  "fun Double.coerceAtMost(maximumValue: Double): Double",
                  "fun <T : Comparable<T>> T.coerceAtMost(maximumValue: T): T"
                ]
              },
              {
                "name": "coerceIn",
                "description": [
                  "Ensures that this value lies in the specified range minimumValue..maximumValue.",
                  "Ensures that this value lies in the specified range."
                ],
                "code": [
                  "fun Double.coerceIn(    minimumValue: Double,     maximumValue: Double): Double",
                  "fun <T : Comparable<T>> T.coerceIn(    minimumValue: T?,     maximumValue: T?): T",
                  "fun <T : Comparable<T>> T.coerceIn(    range: ClosedFloatingPointRange<T>): T",
                  "fun <T : Comparable<T>> T.coerceIn(range: ClosedRange<T>): T"
                ]
              },
              {
                "name": "compareTo",
                "description": [
                  "Compares this object with the specified object for order. Returns zero if this object is equal\nto the specified other object, a negative number if it's less than other, or a positive number\nif it's greater than other."
                ],
                "code": ["infix fun <T> Comparable<T>.compareTo(other: T): Int"]
              },
              {
                "name": "mod",
                "description": [
                  "Calculates the remainder of flooring division of this value (dividend) by the other value (divisor)."
                ],
                "code": [
                  "fun Double.mod(other: Float): Double",
                  "fun Double.mod(other: Double): Double"
                ]
              },
              {
                "name": "narrow",
                "description": [],
                "code": ["fun <R : Number> Number.narrow(): R"]
              },
              {
                "name": "rangeTo",
                "description": [
                  "Creates a range from this Double value to the specified that value.",
                  "Creates a range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun Double.rangeTo(    that: Double): ClosedFloatingPointRange<Double>",
                  "operator fun <T : Comparable<T>> T.rangeTo(    that: T): ClosedRange<T>"
                ]
              },
              {
                "name": "rangeUntil",
                "description": [
                  "Creates an open-ended range from this Double value to the specified that value.",
                  "Creates an open-ended range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun Double.rangeUntil(    that: Double): OpenEndRange<Double>",
                  "operator fun <T : Comparable<T>> T.rangeUntil(    that: T): OpenEndRange<T>"
                ]
              },
              {
                "name": "signExtend",
                "description": [],
                "code": ["fun <R : Number> Number.signExtend(): R"]
              },
              {
                "name": "times",
                "description": [
                  "Returns a duration whose value is the specified duration value multiplied by this number."
                ],
                "code": [
                  "operator fun Double.times(duration: Duration): Duration"
                ]
              },
              {
                "name": "toBigDecimal",
                "description": [
                  "Returns the value of this Double number as a BigDecimal."
                ],
                "code": [
                  "fun Double.toBigDecimal(): BigDecimal",
                  "fun Double.toBigDecimal(mathContext: MathContext): BigDecimal"
                ]
              },
              {
                "name": "toDuration",
                "description": [
                  "Returns a Duration equal to this Double number of the specified unit."
                ],
                "code": ["fun Double.toDuration(unit: DurationUnit): Duration"]
              },
              {
                "name": "toUInt",
                "description": ["Converts this Double value to UInt."],
                "code": ["fun Double.toUInt(): UInt"]
              },
              {
                "name": "toULong",
                "description": ["Converts this Double value to ULong."],
                "code": ["fun Double.toULong(): ULong"]
              }
            ]
          }
        ]
      },
      {
        "name": "DoubleArray",
        "description": [
          "An array of doubles. When targeting the JVM, instances of this class are represented as double[]."
        ],
        "code": ["class DoubleArray"],
        "url": "-double-array/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Creates a new array of the specified size, where each element is calculated by calling the specified\ninit function.",
                  "Creates a new array of the specified size, with all elements initialized to zero."
                ],
                "code": [
                  "<init>(size: Int, init: (Int) -> Double)",
                  "<init>(size: Int)"
                ]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "size",
                "description": ["Returns the number of elements in the array."],
                "code": ["val size: Int"]
              }
            ]
          },
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "get",
                "description": [
                  "Returns the array element at the given index.  This method can be called using the index operator."
                ],
                "code": ["operator fun get(index: Int): Double"]
              },
              {
                "name": "iterator",
                "description": [
                  "Creates an iterator over the elements of the array."
                ],
                "code": ["operator fun iterator(): DoubleIterator"]
              },
              {
                "name": "set",
                "description": [
                  "Sets the element at the given index to the given value. This method can be called using the index operator."
                ],
                "code": ["operator fun set(index: Int, value: Double)"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "indices",
                "description": [
                  "Returns the range of valid indices for the array."
                ],
                "code": ["val DoubleArray.indices: IntRange"]
              },
              {
                "name": "lastIndex",
                "description": ["Returns the last valid index for the array."],
                "code": ["val DoubleArray.lastIndex: Int"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "all",
                "description": [
                  "Returns true if all elements match the given predicate."
                ],
                "code": [
                  "fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean"
                ]
              },
              {
                "name": "any",
                "description": [
                  "Returns true if array has at least one element.",
                  "Returns true if at least one element matches the given predicate."
                ],
                "code": [
                  "fun DoubleArray.any(): Boolean",
                  "fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean"
                ]
              },
              {
                "name": "asIterable",
                "description": [
                  "Creates an Iterable instance that wraps the original array returning its elements when being iterated."
                ],
                "code": ["fun DoubleArray.asIterable(): Iterable<Double>"]
              },
              {
                "name": "asSequence",
                "description": [
                  "Creates a Sequence instance that wraps the original array returning its elements when being iterated."
                ],
                "code": ["fun DoubleArray.asSequence(): Sequence<Double>"]
              },
              {
                "name": "associate",
                "description": [
                  "Returns a Map containing key-value pairs provided by transform function\napplied to elements of the given array."
                ],
                "code": [
                  "fun <K, V> DoubleArray.associate(    transform: (Double) -> Pair<K, V>): Map<K, V>"
                ]
              },
              {
                "name": "associateBy",
                "description": [
                  "Returns a Map containing the elements from the given array indexed by the key\nreturned from keySelector function applied to each element.",
                  "Returns a Map containing the values provided by valueTransform and indexed by keySelector functions applied to elements of the given array."
                ],
                "code": [
                  "fun <K> DoubleArray.associateBy(    keySelector: (Double) -> K): Map<K, Double>",
                  "fun <K, V> DoubleArray.associateBy(    keySelector: (Double) -> K,     valueTransform: (Double) -> V): Map<K, V>"
                ]
              },
              {
                "name": "associateByTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function applied to each element of the given array\nand value is the element itself.",
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function and\nand value is provided by the valueTransform function applied to elements of the given array."
                ],
                "code": [
                  "fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(    destination: M,     keySelector: (Double) -> K): M",
                  "fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(    destination: M,     keySelector: (Double) -> K,     valueTransform: (Double) -> V): M"
                ]
              },
              {
                "name": "associateTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs\nprovided by transform function applied to each element of the given array."
                ],
                "code": [
                  "fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(    destination: M,     transform: (Double) -> Pair<K, V>): M"
                ]
              },
              {
                "name": "associateWith",
                "description": [
                  "Returns a Map where keys are elements from the given array and values are\nproduced by the valueSelector function applied to each element."
                ],
                "code": [
                  "fun <V> DoubleArray.associateWith(    valueSelector: (Double) -> V): Map<Double, V>"
                ]
              },
              {
                "name": "associateWithTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs for each element of the given array,\nwhere key is the element itself and value is provided by the valueSelector function applied to that key."
                ],
                "code": [
                  "fun <V, M : MutableMap<in Double, in V>> DoubleArray.associateWithTo(    destination: M,     valueSelector: (Double) -> V): M"
                ]
              },
              {
                "name": "average",
                "description": [
                  "Returns an average value of elements in the array."
                ],
                "code": ["fun DoubleArray.average(): Double"]
              },
              {
                "name": "binarySearch",
                "description": [
                  "Searches the array or the range of the array for the provided element using the binary search algorithm.\nThe array is expected to be sorted, otherwise the result is undefined."
                ],
                "code": [
                  "fun DoubleArray.binarySearch(    element: Double,     fromIndex: Int = 0,     toIndex: Int = size): Int"
                ]
              },
              {
                "name": "component1",
                "description": ["Returns 1st element from the array."],
                "code": ["operator fun DoubleArray.component1(): Double"]
              },
              {
                "name": "component2",
                "description": ["Returns 2nd element from the array."],
                "code": ["operator fun DoubleArray.component2(): Double"]
              },
              {
                "name": "component3",
                "description": ["Returns 3rd element from the array."],
                "code": ["operator fun DoubleArray.component3(): Double"]
              },
              {
                "name": "component4",
                "description": ["Returns 4th element from the array."],
                "code": ["operator fun DoubleArray.component4(): Double"]
              },
              {
                "name": "component5",
                "description": ["Returns 5th element from the array."],
                "code": ["operator fun DoubleArray.component5(): Double"]
              },
              {
                "name": "contains",
                "description": [
                  "Returns true if element is found in the array."
                ],
                "code": [
                  "operator fun DoubleArray.contains(element: Double): Boolean"
                ]
              },
              {
                "name": "contentEquals",
                "description": [
                  "Returns true if the two specified arrays are structurally equal to one another,\ni.e. contain the same number of the same elements in the same order."
                ],
                "code": [
                  "infix fun DoubleArray.contentEquals(    other: DoubleArray): Boolean"
                ]
              },
              {
                "name": "contentHashCode",
                "description": [
                  "Returns a hash code based on the contents of this array as if it is List."
                ],
                "code": ["fun DoubleArray.contentHashCode(): Int"]
              },
              {
                "name": "contentToString",
                "description": [
                  "Returns a string representation of the contents of the specified array as if it is List."
                ],
                "code": ["fun DoubleArray.contentToString(): String"]
              },
              {
                "name": "count",
                "description": [
                  "Returns the number of elements in this array.",
                  "Returns the number of elements matching the given predicate."
                ],
                "code": [
                  "fun DoubleArray.count(): Int",
                  "fun DoubleArray.count(predicate: (Double) -> Boolean): Int"
                ]
              },
              {
                "name": "distinct",
                "description": [
                  "Returns a list containing only distinct elements from the given array."
                ],
                "code": ["fun DoubleArray.distinct(): List<Double>"]
              },
              {
                "name": "distinctBy",
                "description": [
                  "Returns a list containing only elements from the given array\nhaving distinct keys returned by the given selector function."
                ],
                "code": [
                  "fun <K> DoubleArray.distinctBy(    selector: (Double) -> K): List<Double>"
                ]
              },
              {
                "name": "drop",
                "description": [
                  "Returns a list containing all elements except first n elements."
                ],
                "code": ["fun DoubleArray.drop(n: Int): List<Double>"]
              },
              {
                "name": "dropLast",
                "description": [
                  "Returns a list containing all elements except last n elements."
                ],
                "code": ["fun DoubleArray.dropLast(n: Int): List<Double>"]
              },
              {
                "name": "dropLastWhile",
                "description": [
                  "Returns a list containing all elements except last elements that satisfy the given predicate."
                ],
                "code": [
                  "fun DoubleArray.dropLastWhile(    predicate: (Double) -> Boolean): List<Double>"
                ]
              },
              {
                "name": "dropWhile",
                "description": [
                  "Returns a list containing all elements except first elements that satisfy the given predicate."
                ],
                "code": [
                  "fun DoubleArray.dropWhile(    predicate: (Double) -> Boolean): List<Double>"
                ]
              },
              {
                "name": "elementAtOrElse",
                "description": [
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
                ],
                "code": [
                  "fun DoubleArray.elementAtOrElse(    index: Int,     defaultValue: (Int) -> Double): Double"
                ]
              },
              {
                "name": "elementAtOrNull",
                "description": [
                  "Returns an element at the given index or null if the index is out of bounds of this array."
                ],
                "code": ["fun DoubleArray.elementAtOrNull(index: Int): Double?"]
              },
              {
                "name": "filter",
                "description": [
                  "Returns a list containing only elements matching the given predicate."
                ],
                "code": [
                  "fun DoubleArray.filter(    predicate: (Double) -> Boolean): List<Double>"
                ]
              },
              {
                "name": "filterIndexed",
                "description": [
                  "Returns a list containing only elements matching the given predicate."
                ],
                "code": [
                  "fun DoubleArray.filterIndexed(    predicate: (index: Int, Double) -> Boolean): List<Double>"
                ]
              },
              {
                "name": "filterIndexedTo",
                "description": [
                  "Appends all elements matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(    destination: C,     predicate: (index: Int, Double) -> Boolean): C"
                ]
              },
              {
                "name": "filterNot",
                "description": [
                  "Returns a list containing all elements not matching the given predicate."
                ],
                "code": [
                  "fun DoubleArray.filterNot(    predicate: (Double) -> Boolean): List<Double>"
                ]
              },
              {
                "name": "filterNotTo",
                "description": [
                  "Appends all elements not matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(    destination: C,     predicate: (Double) -> Boolean): C"
                ]
              },
              {
                "name": "filterTo",
                "description": [
                  "Appends all elements matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in Double>> DoubleArray.filterTo(    destination: C,     predicate: (Double) -> Boolean): C"
                ]
              },
              {
                "name": "find",
                "description": [
                  "Returns the first element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun DoubleArray.find(predicate: (Double) -> Boolean): Double?"
                ]
              },
              {
                "name": "findLast",
                "description": [
                  "Returns the last element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun DoubleArray.findLast(    predicate: (Double) -> Boolean): Double?"
                ]
              },
              {
                "name": "first",
                "description": [
                  "Returns the first element.",
                  "Returns the first element matching the given predicate."
                ],
                "code": [
                  "fun DoubleArray.first(): Double",
                  "fun DoubleArray.first(predicate: (Double) -> Boolean): Double"
                ]
              },
              {
                "name": "firstOrNull",
                "description": [
                  "Returns the first element, or null if the array is empty.",
                  "Returns the first element matching the given predicate, or null if element was not found."
                ],
                "code": [
                  "fun DoubleArray.firstOrNull(): Double?",
                  "fun DoubleArray.firstOrNull(    predicate: (Double) -> Boolean): Double?"
                ]
              },
              {
                "name": "flatMap",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element of original array."
                ],
                "code": [
                  "fun <R> DoubleArray.flatMap(    transform: (Double) -> Iterable<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexed",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element\nand its index in the original array."
                ],
                "code": [
                  "fun <R> DoubleArray.flatMapIndexed(    transform: (index: Int, Double) -> Iterable<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexedTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each element\nand its index in the original array, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> DoubleArray.flatMapIndexedTo(    destination: C,     transform: (index: Int, Double) -> Iterable<R>): C"
                ]
              },
              {
                "name": "flatMapTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each element of original array, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(    destination: C,     transform: (Double) -> Iterable<R>): C"
                ]
              },
              {
                "name": "fold",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun <R> DoubleArray.fold(    initial: R,     operation: (acc: R, Double) -> R): R"
                ]
              },
              {
                "name": "foldIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element with its index in the original array."
                ],
                "code": [
                  "fun <R> DoubleArray.foldIndexed(    initial: R,     operation: (index: Int, acc: R, Double) -> R): R"
                ]
              },
              {
                "name": "foldRight",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun <R> DoubleArray.foldRight(    initial: R,     operation: (Double, acc: R) -> R): R"
                ]
              },
              {
                "name": "foldRightIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun <R> DoubleArray.foldRightIndexed(    initial: R,     operation: (index: Int, Double, acc: R) -> R): R"
                ]
              },
              {
                "name": "forEach",
                "description": ["Performs the given action on each element."],
                "code": ["fun DoubleArray.forEach(action: (Double) -> Unit)"]
              },
              {
                "name": "forEachIndexed",
                "description": [
                  "Performs the given action on each element, providing sequential index with the element."
                ],
                "code": [
                  "fun DoubleArray.forEachIndexed(    action: (index: Int, Double) -> Unit)"
                ]
              },
              {
                "name": "getOrElse",
                "description": [
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
                ],
                "code": [
                  "fun DoubleArray.getOrElse(    index: Int,     defaultValue: (Int) -> Double): Double"
                ]
              },
              {
                "name": "getOrNull",
                "description": [
                  "Returns an element at the given index or null if the index is out of bounds of this array."
                ],
                "code": ["fun DoubleArray.getOrNull(index: Int): Double?"]
              },
              {
                "name": "groupBy",
                "description": [
                  "Groups elements of the original array by the key returned by the given keySelector function\napplied to each element and returns a map where each group key is associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original array\nby the key returned by the given keySelector function applied to the element\nand returns a map where each group key is associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K> DoubleArray.groupBy(    keySelector: (Double) -> K): Map<K, List<Double>>",
                  "fun <K, V> DoubleArray.groupBy(    keySelector: (Double) -> K,     valueTransform: (Double) -> V): Map<K, List<V>>"
                ]
              },
              {
                "name": "groupByTo",
                "description": [
                  "Groups elements of the original array by the key returned by the given keySelector function\napplied to each element and puts to the destination map each group key associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original array\nby the key returned by the given keySelector function applied to the element\nand puts to the destination map each group key associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(    destination: M,     keySelector: (Double) -> K): M",
                  "fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(    destination: M,     keySelector: (Double) -> K,     valueTransform: (Double) -> V): M"
                ]
              },
              {
                "name": "indexOf",
                "description": [
                  "Returns first index of element, or -1 if the array does not contain element."
                ],
                "code": ["fun DoubleArray.indexOf(element: Double): Int"]
              },
              {
                "name": "indexOfFirst",
                "description": [
                  "Returns index of the first element matching the given predicate, or -1 if the array does not contain such element."
                ],
                "code": [
                  "fun DoubleArray.indexOfFirst(    predicate: (Double) -> Boolean): Int"
                ]
              },
              {
                "name": "indexOfLast",
                "description": [
                  "Returns index of the last element matching the given predicate, or -1 if the array does not contain such element."
                ],
                "code": [
                  "fun DoubleArray.indexOfLast(    predicate: (Double) -> Boolean): Int"
                ]
              },
              {
                "name": "intersect",
                "description": [
                  "Returns a set containing all elements that are contained by both this array and the specified collection."
                ],
                "code": [
                  "infix fun DoubleArray.intersect(    other: Iterable<Double>): Set<Double>"
                ]
              },
              {
                "name": "isEmpty",
                "description": ["Returns true if the array is empty."],
                "code": ["fun DoubleArray.isEmpty(): Boolean"]
              },
              {
                "name": "isNotEmpty",
                "description": ["Returns true if the array is not empty."],
                "code": ["fun DoubleArray.isNotEmpty(): Boolean"]
              },
              {
                "name": "joinTo",
                "description": [
                  "Appends the string from all the elements separated using separator and using the given prefix and postfix if supplied."
                ],
                "code": [
                  "fun <A : Appendable> DoubleArray.joinTo(    buffer: A,     separator: CharSequence = \", \",     prefix: CharSequence = \"\",     postfix: CharSequence = \"\",     limit: Int = -1,     truncated: CharSequence = \"...\",     transform: ((Double) -> CharSequence)? = null): A"
                ]
              },
              {
                "name": "joinToString",
                "description": [
                  "Creates a string from all the elements separated using separator and using the given prefix and postfix if supplied."
                ],
                "code": [
                  "fun DoubleArray.joinToString(    separator: CharSequence = \", \",     prefix: CharSequence = \"\",     postfix: CharSequence = \"\",     limit: Int = -1,     truncated: CharSequence = \"...\",     transform: ((Double) -> CharSequence)? = null): String"
                ]
              },
              {
                "name": "last",
                "description": [
                  "Returns the last element.",
                  "Returns the last element matching the given predicate."
                ],
                "code": [
                  "fun DoubleArray.last(): Double",
                  "fun DoubleArray.last(predicate: (Double) -> Boolean): Double"
                ]
              },
              {
                "name": "lastIndexOf",
                "description": [
                  "Returns last index of element, or -1 if the array does not contain element."
                ],
                "code": ["fun DoubleArray.lastIndexOf(element: Double): Int"]
              },
              {
                "name": "lastOrNull",
                "description": [
                  "Returns the last element, or null if the array is empty.",
                  "Returns the last element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun DoubleArray.lastOrNull(): Double?",
                  "fun DoubleArray.lastOrNull(    predicate: (Double) -> Boolean): Double?"
                ]
              },
              {
                "name": "map",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each element in the original array."
                ],
                "code": [
                  "fun <R> DoubleArray.map(transform: (Double) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexed",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each element and its index in the original array."
                ],
                "code": [
                  "fun <R> DoubleArray.mapIndexed(    transform: (index: Int, Double) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexedTo",
                "description": [
                  "Applies the given transform function to each element and its index in the original array\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(    destination: C,     transform: (index: Int, Double) -> R): C"
                ]
              },
              {
                "name": "mapTo",
                "description": [
                  "Applies the given transform function to each element of the original array\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(    destination: C,     transform: (Double) -> R): C"
                ]
              },
              {
                "name": "maxByOrNull",
                "description": [
                  "Returns the first element yielding the largest value of the given function or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> DoubleArray.maxByOrNull(    selector: (Double) -> R): Double?"
                ]
              },
              {
                "name": "maxOf",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each element in the array."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.maxOf(    selector: (Double) -> R): R"
                ]
              },
              {
                "name": "maxOfOrNull",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.maxOfOrNull(    selector: (Double) -> R): R?"
                ]
              },
              {
                "name": "maxOfWith",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun <R> DoubleArray.maxOfWith(    comparator: Comparator<in R>,     selector: (Double) -> R): R"
                ]
              },
              {
                "name": "maxOfWithOrNull",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R> DoubleArray.maxOfWithOrNull(    comparator: Comparator<in R>,     selector: (Double) -> R): R?"
                ]
              },
              {
                "name": "maxOrNull",
                "description": [
                  "Returns the largest element or null if there are no elements."
                ],
                "code": ["fun DoubleArray.maxOrNull(): Double?"]
              },
              {
                "name": "maxWith",
                "description": [
                  "Returns the first element having the largest value according to the provided comparator."
                ],
                "code": [
                  "fun DoubleArray.maxWith(    comparator: Comparator<in Double>): Double",
                  "fun DoubleArray.maxWith(    comparator: Comparator<in Double>): Double?"
                ]
              },
              {
                "name": "maxWithOrNull",
                "description": [
                  "Returns the first element having the largest value according to the provided comparator or null if there are no elements."
                ],
                "code": [
                  "fun DoubleArray.maxWithOrNull(    comparator: Comparator<in Double>): Double?"
                ]
              },
              {
                "name": "minByOrNull",
                "description": [
                  "Returns the first element yielding the smallest value of the given function or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> DoubleArray.minByOrNull(    selector: (Double) -> R): Double?"
                ]
              },
              {
                "name": "minOf",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the array."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.minOf(    selector: (Double) -> R): R"
                ]
              },
              {
                "name": "minOfOrNull",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.minOfOrNull(    selector: (Double) -> R): R?"
                ]
              },
              {
                "name": "minOfWith",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun <R> DoubleArray.minOfWith(    comparator: Comparator<in R>,     selector: (Double) -> R): R"
                ]
              },
              {
                "name": "minOfWithOrNull",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R> DoubleArray.minOfWithOrNull(    comparator: Comparator<in R>,     selector: (Double) -> R): R?"
                ]
              },
              {
                "name": "minOrNull",
                "description": [
                  "Returns the smallest element or null if there are no elements."
                ],
                "code": ["fun DoubleArray.minOrNull(): Double?"]
              },
              {
                "name": "minWith",
                "description": [
                  "Returns the first element having the smallest value according to the provided comparator."
                ],
                "code": [
                  "fun DoubleArray.minWith(    comparator: Comparator<in Double>): Double",
                  "fun DoubleArray.minWith(    comparator: Comparator<in Double>): Double?"
                ]
              },
              {
                "name": "minWithOrNull",
                "description": [
                  "Returns the first element having the smallest value according to the provided comparator or null if there are no elements."
                ],
                "code": [
                  "fun DoubleArray.minWithOrNull(    comparator: Comparator<in Double>): Double?"
                ]
              },
              {
                "name": "none",
                "description": [
                  "Returns true if the array has no elements.",
                  "Returns true if no elements match the given predicate."
                ],
                "code": [
                  "fun DoubleArray.none(): Boolean",
                  "fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean"
                ]
              },
              {
                "name": "onEach",
                "description": [
                  "Performs the given action on each element and returns the array itself afterwards."
                ],
                "code": [
                  "fun DoubleArray.onEach(action: (Double) -> Unit): DoubleArray"
                ]
              },
              {
                "name": "onEachIndexed",
                "description": [
                  "Performs the given action on each element, providing sequential index with the element,\nand returns the array itself afterwards."
                ],
                "code": [
                  "fun DoubleArray.onEachIndexed(    action: (index: Int, Double) -> Unit): DoubleArray"
                ]
              },
              {
                "name": "partition",
                "description": [
                  "Splits the original array into pair of lists,\nwhere first list contains elements for which predicate yielded true,\nwhile second list contains elements for which predicate yielded false."
                ],
                "code": [
                  "fun DoubleArray.partition(    predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>>"
                ]
              },
              {
                "name": "random",
                "description": [
                  "Returns a random element from this array.",
                  "Returns a random element from this array using the specified source of randomness."
                ],
                "code": [
                  "fun DoubleArray.random(): Double",
                  "fun DoubleArray.random(random: Random): Double"
                ]
              },
              {
                "name": "randomOrNull",
                "description": [
                  "Returns a random element from this array, or null if this array is empty.",
                  "Returns a random element from this array using the specified source of randomness, or null if this array is empty."
                ],
                "code": [
                  "fun DoubleArray.randomOrNull(): Double?",
                  "fun DoubleArray.randomOrNull(random: Random): Double?"
                ]
              },
              {
                "name": "reduce",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun DoubleArray.reduce(    operation: (acc: Double, Double) -> Double): Double"
                ]
              },
              {
                "name": "reduceIndexed",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original array."
                ],
                "code": [
                  "fun DoubleArray.reduceIndexed(    operation: (index: Int, acc: Double, Double) -> Double): Double"
                ]
              },
              {
                "name": "reduceIndexedOrNull",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original array."
                ],
                "code": [
                  "fun DoubleArray.reduceIndexedOrNull(    operation: (index: Int, acc: Double, Double) -> Double): Double?"
                ]
              },
              {
                "name": "reduceOrNull",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun DoubleArray.reduceOrNull(    operation: (acc: Double, Double) -> Double): Double?"
                ]
              },
              {
                "name": "reduceRight",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun DoubleArray.reduceRight(    operation: (Double, acc: Double) -> Double): Double"
                ]
              },
              {
                "name": "reduceRightIndexed",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun DoubleArray.reduceRightIndexed(    operation: (index: Int, Double, acc: Double) -> Double): Double"
                ]
              },
              {
                "name": "reduceRightIndexedOrNull",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun DoubleArray.reduceRightIndexedOrNull(    operation: (index: Int, Double, acc: Double) -> Double): Double?"
                ]
              },
              {
                "name": "reduceRightOrNull",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun DoubleArray.reduceRightOrNull(    operation: (Double, acc: Double) -> Double): Double?"
                ]
              },
              {
                "name": "refTo",
                "description": [],
                "code": [
                  "fun DoubleArray.refTo(index: Int): CValuesRef<DoubleVar>"
                ]
              },
              {
                "name": "reverse",
                "description": [
                  "Reverses elements in the array in-place.",
                  "Reverses elements of the array in the specified range in-place."
                ],
                "code": [
                  "fun DoubleArray.reverse()",
                  "fun DoubleArray.reverse(fromIndex: Int, toIndex: Int)"
                ]
              },
              {
                "name": "reversed",
                "description": [
                  "Returns a list with elements in reversed order."
                ],
                "code": ["fun DoubleArray.reversed(): List<Double>"]
              },
              {
                "name": "reversedArray",
                "description": [
                  "Returns an array with elements of this array in reversed order."
                ],
                "code": ["fun DoubleArray.reversedArray(): DoubleArray"]
              },
              {
                "name": "runningFold",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> DoubleArray.runningFold(    initial: R,     operation: (acc: R, Double) -> R): List<R>"
                ]
              },
              {
                "name": "runningFoldIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> DoubleArray.runningFoldIndexed(    initial: R,     operation: (index: Int, acc: R, Double) -> R): List<R>"
                ]
              },
              {
                "name": "runningReduce",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with the first element of this array."
                ],
                "code": [
                  "fun DoubleArray.runningReduce(    operation: (acc: Double, Double) -> Double): List<Double>"
                ]
              },
              {
                "name": "runningReduceIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with the first element of this array."
                ],
                "code": [
                  "fun DoubleArray.runningReduceIndexed(    operation: (index: Int, acc: Double, Double) -> Double): List<Double>"
                ]
              },
              {
                "name": "scan",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> DoubleArray.scan(    initial: R,     operation: (acc: R, Double) -> R): List<R>"
                ]
              },
              {
                "name": "scanIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> DoubleArray.scanIndexed(    initial: R,     operation: (index: Int, acc: R, Double) -> R): List<R>"
                ]
              },
              {
                "name": "shuffle",
                "description": [
                  "Randomly shuffles elements in this array in-place.",
                  "Randomly shuffles elements in this array in-place using the specified random instance as the source of randomness."
                ],
                "code": [
                  "fun DoubleArray.shuffle()",
                  "fun DoubleArray.shuffle(random: Random)"
                ]
              },
              {
                "name": "single",
                "description": [
                  "Returns the single element, or throws an exception if the array is empty or has more than one element.",
                  "Returns the single element matching the given predicate, or throws exception if there is no or more than one matching element."
                ],
                "code": [
                  "fun DoubleArray.single(): Double",
                  "fun DoubleArray.single(    predicate: (Double) -> Boolean): Double"
                ]
              },
              {
                "name": "singleOrNull",
                "description": [
                  "Returns single element, or null if the array is empty or has more than one element.",
                  "Returns the single element matching the given predicate, or null if element was not found or more than one element was found."
                ],
                "code": [
                  "fun DoubleArray.singleOrNull(): Double?",
                  "fun DoubleArray.singleOrNull(    predicate: (Double) -> Boolean): Double?"
                ]
              },
              {
                "name": "slice",
                "description": [
                  "Returns a list containing elements at indices in the specified indices range.",
                  "Returns a list containing elements at specified indices."
                ],
                "code": [
                  "fun DoubleArray.slice(indices: IntRange): List<Double>",
                  "fun DoubleArray.slice(indices: Iterable<Int>): List<Double>"
                ]
              },
              {
                "name": "sliceArray",
                "description": [
                  "Returns an array containing elements of this array at specified indices.",
                  "Returns an array containing elements at indices in the specified indices range."
                ],
                "code": [
                  "fun DoubleArray.sliceArray(    indices: Collection<Int>): DoubleArray",
                  "fun DoubleArray.sliceArray(indices: IntRange): DoubleArray"
                ]
              },
              {
                "name": "sort",
                "description": [
                  "Sorts the array in-place according to the order specified by the given comparison function."
                ],
                "code": [
                  "fun DoubleArray.sort(    comparison: (a: Double, b: Double) -> Int)"
                ]
              },
              {
                "name": "sortDescending",
                "description": [
                  "Sorts elements in the array in-place descending according to their natural sort order.",
                  "Sorts elements of the array in the specified range in-place.\nThe elements are sorted descending according to their natural sort order."
                ],
                "code": [
                  "fun DoubleArray.sortDescending()",
                  "fun DoubleArray.sortDescending(fromIndex: Int, toIndex: Int)"
                ]
              },
              {
                "name": "sorted",
                "description": [
                  "Returns a list of all elements sorted according to their natural sort order."
                ],
                "code": ["fun DoubleArray.sorted(): List<Double>"]
              },
              {
                "name": "sortedArray",
                "description": [
                  "Returns an array with all elements of this array sorted according to their natural sort order."
                ],
                "code": ["fun DoubleArray.sortedArray(): DoubleArray"]
              },
              {
                "name": "sortedArrayDescending",
                "description": [
                  "Returns an array with all elements of this array sorted descending according to their natural sort order."
                ],
                "code": ["fun DoubleArray.sortedArrayDescending(): DoubleArray"]
              },
              {
                "name": "sortedBy",
                "description": [
                  "Returns a list of all elements sorted according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <R : Comparable<R>> DoubleArray.sortedBy(    selector: (Double) -> R?): List<Double>"
                ]
              },
              {
                "name": "sortedByDescending",
                "description": [
                  "Returns a list of all elements sorted descending according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <R : Comparable<R>> DoubleArray.sortedByDescending(    selector: (Double) -> R?): List<Double>"
                ]
              },
              {
                "name": "sortedDescending",
                "description": [
                  "Returns a list of all elements sorted descending according to their natural sort order."
                ],
                "code": ["fun DoubleArray.sortedDescending(): List<Double>"]
              },
              {
                "name": "sortedWith",
                "description": [
                  "Returns a list of all elements sorted according to the specified comparator."
                ],
                "code": [
                  "fun DoubleArray.sortedWith(    comparator: Comparator<in Double>): List<Double>"
                ]
              },
              {
                "name": "subtract",
                "description": [
                  "Returns a set containing all elements that are contained by this array and not contained by the specified collection."
                ],
                "code": [
                  "infix fun DoubleArray.subtract(    other: Iterable<Double>): Set<Double>"
                ]
              },
              {
                "name": "sum",
                "description": [
                  "Returns the sum of all elements in the array."
                ],
                "code": ["fun DoubleArray.sum(): Double"]
              },
              {
                "name": "sumBy",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun DoubleArray.sumBy(selector: (Double) -> Int): Int"
                ]
              },
              {
                "name": "sumByDouble",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun DoubleArray.sumByDouble(    selector: (Double) -> Double): Double"
                ]
              },
              {
                "name": "sumOf",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun DoubleArray.sumOf(selector: (Double) -> Double): Double",
                  "fun DoubleArray.sumOf(selector: (Double) -> Int): Int",
                  "fun DoubleArray.sumOf(selector: (Double) -> Long): Long",
                  "fun DoubleArray.sumOf(selector: (Double) -> UInt): UInt",
                  "fun DoubleArray.sumOf(selector: (Double) -> ULong): ULong",
                  "fun DoubleArray.sumOf(    selector: (Double) -> BigDecimal): BigDecimal",
                  "fun DoubleArray.sumOf(    selector: (Double) -> BigInteger): BigInteger"
                ]
              },
              {
                "name": "take",
                "description": ["Returns a list containing first n elements."],
                "code": ["fun DoubleArray.take(n: Int): List<Double>"]
              },
              {
                "name": "takeLast",
                "description": ["Returns a list containing last n elements."],
                "code": ["fun DoubleArray.takeLast(n: Int): List<Double>"]
              },
              {
                "name": "takeLastWhile",
                "description": [
                  "Returns a list containing last elements satisfying the given predicate."
                ],
                "code": [
                  "fun DoubleArray.takeLastWhile(    predicate: (Double) -> Boolean): List<Double>"
                ]
              },
              {
                "name": "takeWhile",
                "description": [
                  "Returns a list containing first elements satisfying the given predicate."
                ],
                "code": [
                  "fun DoubleArray.takeWhile(    predicate: (Double) -> Boolean): List<Double>"
                ]
              },
              {
                "name": "toCollection",
                "description": [
                  "Appends all elements to the given destination collection."
                ],
                "code": [
                  "fun <C : MutableCollection<in Double>> DoubleArray.toCollection(    destination: C): C"
                ]
              },
              {
                "name": "toCValues",
                "description": [],
                "code": ["fun DoubleArray.toCValues(): CValues<DoubleVar>"]
              },
              {
                "name": "toHashSet",
                "description": ["Returns a new HashSet of all elements."],
                "code": ["fun DoubleArray.toHashSet(): HashSet<Double>"]
              },
              {
                "name": "toList",
                "description": ["Returns a List containing all elements."],
                "code": ["fun DoubleArray.toList(): List<Double>"]
              },
              {
                "name": "toMutableList",
                "description": [
                  "Returns a new MutableList filled with all elements of this array."
                ],
                "code": ["fun DoubleArray.toMutableList(): MutableList<Double>"]
              },
              {
                "name": "toMutableSet",
                "description": [
                  "Returns a new MutableSet containing all distinct elements from the given array."
                ],
                "code": ["fun DoubleArray.toMutableSet(): MutableSet<Double>"]
              },
              {
                "name": "toSet",
                "description": ["Returns a Set of all elements."],
                "code": ["fun DoubleArray.toSet(): Set<Double>"]
              },
              {
                "name": "toSortedSet",
                "description": ["Returns a new SortedSet of all elements."],
                "code": ["fun DoubleArray.toSortedSet(): SortedSet<Double>"]
              },
              {
                "name": "union",
                "description": [
                  "Returns a set containing all distinct elements from both collections."
                ],
                "code": [
                  "infix fun DoubleArray.union(    other: Iterable<Double>): Set<Double>"
                ]
              },
              {
                "name": "withIndex",
                "description": [
                  "Returns a lazy Iterable that wraps each element of the original array\ninto an IndexedValue containing the index of that element and the element itself."
                ],
                "code": [
                  "fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>>"
                ]
              },
              {
                "name": "zip",
                "description": [
                  "Returns a list of pairs built from the elements of this array and the other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of pairs built from the elements of this collection and other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other collection with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest array."
                ],
                "code": [
                  "infix fun <R> any_array<R>.zip(    other: Array<out R>): List<Pair<Double, R>>",
                  "fun <R, V> DoubleArray.zip(    other: Array<out R>,     transform: (a: Double, b: R) -> V): List<V>",
                  "infix fun <R> DoubleArray.zip(    other: Iterable<R>): List<Pair<Double, R>>",
                  "fun <R, V> DoubleArray.zip(    other: Iterable<R>,     transform: (a: Double, b: R) -> V): List<V>",
                  "fun <V> DoubleArray.zip(    other: DoubleArray,     transform: (a: Double, b: Double) -> V): List<V>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "Enum",
        "description": [
          "The common base class of all enum classes.\nSee the Kotlin language documentation for more\ninformation on enum classes."
        ],
        "code": ["abstract class Enum<E : Enum<E>> : Comparable<E>"],
        "url": "-enum/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "The common base class of all enum classes.\nSee the Kotlin language documentation for more\ninformation on enum classes."
                ],
                "code": ["<init>(name: String, ordinal: Int)"]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "name",
                "description": [
                  "Returns the name of this enum constant, exactly as declared in its enum declaration."
                ],
                "code": ["val name: String"]
              },
              {
                "name": "ordinal",
                "description": [
                  "Returns the ordinal of this enumeration constant (its position in its enum declaration, where the initial constant\nis assigned an ordinal of zero)."
                ],
                "code": ["val ordinal: Int"]
              }
            ]
          },
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "clone",
                "description": [
                  "Throws an exception since enum constants cannot be cloned.\nThis method prevents enum classes from inheriting from Cloneable."
                ],
                "code": ["fun clone(): Any"]
              },
              {
                "name": "compareTo",
                "description": [
                  "Compares this object with the specified object for order. Returns zero if this object is equal\nto the specified other object, a negative number if it's less than other, or a positive number\nif it's greater than other."
                ],
                "code": ["fun compareTo(other: E): Int"]
              },
              {
                "name": "equals",
                "description": [
                  "Indicates whether some other object is \"equal to\" this one. Implementations must fulfil the following\nrequirements:"
                ],
                "code": ["fun equals(other: Any?): Boolean"]
              },
              {
                "name": "hashCode",
                "description": [
                  "Returns a hash code value for the object.  The general contract of hashCode is:"
                ],
                "code": ["fun hashCode(): Int"]
              },
              {
                "name": "toString",
                "description": [
                  "Returns a string representation of the object."
                ],
                "code": ["open fun toString(): String"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "declaringJavaClass",
                "description": [
                  "Returns a Java Class instance of the enum the given constant belongs to."
                ],
                "code": [
                  "val <E : Enum<E>> Enum<E>.declaringJavaClass: Class<E>"
                ]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "coerceAtLeast",
                "description": [
                  "Ensures that this value is not less than the specified minimumValue."
                ],
                "code": [
                  "fun <T : Comparable<T>> T.coerceAtLeast(minimumValue: T): T"
                ]
              },
              {
                "name": "coerceAtMost",
                "description": [
                  "Ensures that this value is not greater than the specified maximumValue."
                ],
                "code": [
                  "fun <T : Comparable<T>> T.coerceAtMost(maximumValue: T): T"
                ]
              },
              {
                "name": "coerceIn",
                "description": [
                  "Ensures that this value lies in the specified range minimumValue..maximumValue.",
                  "Ensures that this value lies in the specified range."
                ],
                "code": [
                  "fun <T : Comparable<T>> T.coerceIn(    minimumValue: T?,     maximumValue: T?): T",
                  "fun <T : Comparable<T>> T.coerceIn(    range: ClosedFloatingPointRange<T>): T",
                  "fun <T : Comparable<T>> T.coerceIn(range: ClosedRange<T>): T"
                ]
              },
              {
                "name": "compareTo",
                "description": [
                  "Compares this object with the specified object for order. Returns zero if this object is equal\nto the specified other object, a negative number if it's less than other, or a positive number\nif it's greater than other."
                ],
                "code": ["infix fun <T> Comparable<T>.compareTo(other: T): Int"]
              },
              {
                "name": "rangeTo",
                "description": [
                  "Creates a range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeTo(    that: T): ClosedRange<T>"
                ]
              },
              {
                "name": "rangeUntil",
                "description": [
                  "Creates an open-ended range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeUntil(    that: T): OpenEndRange<T>"
                ]
              }
            ]
          },
          {
            "name": "Inheritors",
            "declarations": [
              {
                "name": "AnnotationRetention",
                "description": [
                  "Contains the list of possible annotation's retentions."
                ],
                "code": ["enum class AnnotationRetention"]
              },
              {
                "name": "AnnotationTarget",
                "description": [
                  "Contains the list of code elements which are the possible annotation targets"
                ],
                "code": ["enum class AnnotationTarget"]
              },
              {
                "name": "CharCategory",
                "description": [
                  "Represents the character general category in the Unicode specification."
                ],
                "code": ["enum class CharCategory"]
              },
              {
                "name": "CharDirectionality",
                "description": [
                  "Represents the Unicode directionality of a character.\nCharacter directionality is used to calculate the\nvisual ordering of text."
                ],
                "code": ["enum class CharDirectionality"]
              },
              {
                "name": "CopyActionResult",
                "description": [
                  "The result of the copyAction function passed to Path.copyToRecursively that specifies further actions when copying an entry."
                ],
                "code": ["enum class CopyActionResult"]
              },
              {
                "name": "CpuArchitecture",
                "description": ["Central Processor Unit architecture."],
                "code": ["enum class CpuArchitecture"]
              },
              {
                "name": "DeprecationLevel",
                "description": [
                  "Possible levels of a deprecation. The level specifies how the deprecated element usages are reported in code."
                ],
                "code": ["enum class DeprecationLevel"]
              },
              {
                "name": "DurationUnit",
                "description": [
                  "The list of possible time measurement units, in which a duration can be expressed."
                ],
                "code": ["enum class DurationUnit"]
              },
              {
                "name": "FileWalkDirection",
                "description": [
                  "An enumeration to describe possible walk directions.\nThere are two of them: beginning from parents, ending with children,\nand beginning from children, ending with parents. Both use depth-first search."
                ],
                "code": ["enum class FileWalkDirection"]
              },
              {
                "name": "FutureState",
                "description": ["State of the future object."],
                "code": ["enum class FutureState"]
              },
              {
                "name": "InvocationKind",
                "description": [
                  "Specifies how many times a function invokes its function parameter in place."
                ],
                "code": ["enum class InvocationKind"]
              },
              {
                "name": "KVariance",
                "description": [
                  "Represents variance applied to a type parameter on the declaration site (declaration-site variance),\nor to a type in a projection (use-site variance)."
                ],
                "code": ["enum class KVariance"]
              },
              {
                "name": "KVisibility",
                "description": [
                  "Visibility is an aspect of a Kotlin declaration regulating where that declaration is accessible in the source code.\nVisibility can be changed with one of the following modifiers: public, protected, internal, private."
                ],
                "code": ["enum class KVisibility"]
              },
              {
                "name": "LazyThreadSafetyMode",
                "description": [
                  "Specifies how a Lazy instance synchronizes initialization among multiple threads."
                ],
                "code": ["enum class LazyThreadSafetyMode"]
              },
              {
                "name": "MemoryModel",
                "description": ["Memory model."],
                "code": ["enum class MemoryModel"]
              },
              {
                "name": "OnErrorAction",
                "description": [
                  "Enum that can be used to specify behaviour of the copyRecursively() function\nin exceptional conditions."
                ],
                "code": ["enum class OnErrorAction"]
              },
              {
                "name": "OnErrorResult",
                "description": [
                  "The result of the onError function passed to Path.copyToRecursively that specifies further actions when an exception occurs."
                ],
                "code": ["enum class OnErrorResult"]
              },
              {
                "name": "OsFamily",
                "description": ["Operating system family."],
                "code": ["enum class OsFamily"]
              },
              {
                "name": "PathWalkOption",
                "description": [
                  "An enumeration to provide walk options for Path.walk function.\nThe options can be combined to form the walk order and behavior needed."
                ],
                "code": ["enum class PathWalkOption"]
              },
              {
                "name": "RegexOption",
                "description": [
                  "Provides enumeration values to use to set regular expression options."
                ],
                "code": [
                  "enum class RegexOption",
                  "enum class RegexOption : FlagEnum"
                ]
              },
              {
                "name": "TransferMode",
                "description": [
                  "Note: modern Kotlin/Native memory manager allows to share objects between threads without additional ceremonies,\nso TransferMode has effect only in legacy memory manager."
                ],
                "code": ["enum class TransferMode"]
              }
            ]
          }
        ]
      },
      {
        "name": "Float",
        "description": [
          "Represents a single-precision 32-bit IEEE 754 floating point number.\nOn the JVM, non-nullable values of this type are represented as values of the primitive type float."
        ],
        "code": ["class Float : Number, Comparable<Float>"],
        "url": "-float/index.html",
        "subcategories": [
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "compareTo",
                "description": [
                  "Compares this value with the specified value for order.\nReturns zero if this value is equal to the specified other value, a negative number if it's less than other,\nor a positive number if it's greater than other."
                ],
                "code": [
                  "operator fun compareTo(other: Byte): Int",
                  "operator fun compareTo(other: Short): Int",
                  "operator fun compareTo(other: Int): Int",
                  "operator fun compareTo(other: Long): Int",
                  "operator fun compareTo(other: Float): Int",
                  "operator fun compareTo(other: Double): Int"
                ]
              },
              {
                "name": "dec",
                "description": ["Returns this value decremented by one."],
                "code": ["operator fun dec(): Float"]
              },
              {
                "name": "div",
                "description": ["Divides this value by the other value."],
                "code": [
                  "operator fun div(other: Byte): Float",
                  "operator fun div(other: Short): Float",
                  "operator fun div(other: Int): Float",
                  "operator fun div(other: Long): Float",
                  "operator fun div(other: Float): Float",
                  "operator fun div(other: Double): Double"
                ]
              },
              {
                "name": "equals",
                "description": [
                  "Indicates whether some other object is \"equal to\" this one. Implementations must fulfil the following\nrequirements:"
                ],
                "code": [
                  "fun equals(other: Float): Boolean",
                  "fun equals(other: Any?): Boolean"
                ]
              },
              {
                "name": "hashCode",
                "description": [
                  "Returns a hash code value for the object.  The general contract of hashCode is:"
                ],
                "code": ["fun hashCode(): Int"]
              },
              {
                "name": "inc",
                "description": ["Returns this value incremented by one."],
                "code": ["operator fun inc(): Float"]
              },
              {
                "name": "minus",
                "description": ["Subtracts the other value from this value."],
                "code": [
                  "operator fun minus(other: Byte): Float",
                  "operator fun minus(other: Short): Float",
                  "operator fun minus(other: Int): Float",
                  "operator fun minus(other: Long): Float",
                  "operator fun minus(other: Float): Float",
                  "operator fun minus(other: Double): Double"
                ]
              },
              {
                "name": "plus",
                "description": ["Adds the other value to this value."],
                "code": [
                  "operator fun plus(other: Byte): Float",
                  "operator fun plus(other: Short): Float",
                  "operator fun plus(other: Int): Float",
                  "operator fun plus(other: Long): Float",
                  "operator fun plus(other: Float): Float",
                  "operator fun plus(other: Double): Double"
                ]
              },
              {
                "name": "rem",
                "description": [
                  "Calculates the remainder of truncating division of this value (dividend) by the other value (divisor)."
                ],
                "code": [
                  "operator fun rem(other: Byte): Float",
                  "operator fun rem(other: Short): Float",
                  "operator fun rem(other: Int): Float",
                  "operator fun rem(other: Long): Float",
                  "operator fun rem(other: Float): Float",
                  "operator fun rem(other: Double): Double"
                ]
              },
              {
                "name": "times",
                "description": ["Multiplies this value by the other value."],
                "code": [
                  "operator fun times(other: Byte): Float",
                  "operator fun times(other: Short): Float",
                  "operator fun times(other: Int): Float",
                  "operator fun times(other: Long): Float",
                  "operator fun times(other: Float): Float",
                  "operator fun times(other: Double): Double"
                ]
              },
              {
                "name": "toByte",
                "description": ["Converts this Float value to Byte."],
                "code": ["fun toByte(): Byte"]
              },
              {
                "name": "toChar",
                "description": ["Converts this Float value to Char."],
                "code": ["fun toChar(): Char"]
              },
              {
                "name": "toDouble",
                "description": ["Converts this Float value to Double."],
                "code": ["fun toDouble(): Double"]
              },
              {
                "name": "toFloat",
                "description": ["Returns this value."],
                "code": ["fun toFloat(): Float"]
              },
              {
                "name": "toInt",
                "description": ["Converts this Float value to Int."],
                "code": ["fun toInt(): Int"]
              },
              {
                "name": "toLong",
                "description": ["Converts this Float value to Long."],
                "code": ["fun toLong(): Long"]
              },
              {
                "name": "toShort",
                "description": ["Converts this Float value to Short."],
                "code": ["fun toShort(): Short"]
              },
              {
                "name": "toString",
                "description": [
                  "Returns a string representation of the object."
                ],
                "code": ["fun toString(): String"]
              },
              {
                "name": "unaryMinus",
                "description": ["Returns the negative of this value."],
                "code": ["operator fun unaryMinus(): Float"]
              },
              {
                "name": "unaryPlus",
                "description": ["Returns this value."],
                "code": ["operator fun unaryPlus(): Float"]
              }
            ]
          },
          {
            "name": "Companion Object Properties",
            "declarations": [
              {
                "name": "MAX_VALUE",
                "description": [
                  "A constant holding the largest positive finite value of Float."
                ],
                "code": ["const val MAX_VALUE: Float"]
              },
              {
                "name": "MIN_VALUE",
                "description": [
                  "A constant holding the smallest positive nonzero value of Float."
                ],
                "code": ["const val MIN_VALUE: Float"]
              },
              {
                "name": "NaN",
                "description": [
                  "A constant holding the \"not a number\" value of Float."
                ],
                "code": ["const val NaN: Float"]
              },
              {
                "name": "NEGATIVE_INFINITY",
                "description": [
                  "A constant holding the negative infinity value of Float."
                ],
                "code": ["const val NEGATIVE_INFINITY: Float"]
              },
              {
                "name": "POSITIVE_INFINITY",
                "description": [
                  "A constant holding the positive infinity value of Float."
                ],
                "code": ["const val POSITIVE_INFINITY: Float"]
              },
              {
                "name": "SIZE_BITS",
                "description": [
                  "The number of bits used to represent an instance of Float in a binary form."
                ],
                "code": ["const val SIZE_BITS: Int"]
              },
              {
                "name": "SIZE_BYTES",
                "description": [
                  "The number of bytes used to represent an instance of Float in a binary form."
                ],
                "code": ["const val SIZE_BYTES: Int"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "coerceAtLeast",
                "description": [
                  "Ensures that this value is not less than the specified minimumValue."
                ],
                "code": [
                  "fun Float.coerceAtLeast(minimumValue: Float): Float",
                  "fun <T : Comparable<T>> T.coerceAtLeast(minimumValue: T): T"
                ]
              },
              {
                "name": "coerceAtMost",
                "description": [
                  "Ensures that this value is not greater than the specified maximumValue."
                ],
                "code": [
                  "fun Float.coerceAtMost(maximumValue: Float): Float",
                  "fun <T : Comparable<T>> T.coerceAtMost(maximumValue: T): T"
                ]
              },
              {
                "name": "coerceIn",
                "description": [
                  "Ensures that this value lies in the specified range minimumValue..maximumValue.",
                  "Ensures that this value lies in the specified range."
                ],
                "code": [
                  "fun Float.coerceIn(    minimumValue: Float,     maximumValue: Float): Float",
                  "fun <T : Comparable<T>> T.coerceIn(    minimumValue: T?,     maximumValue: T?): T",
                  "fun <T : Comparable<T>> T.coerceIn(    range: ClosedFloatingPointRange<T>): T",
                  "fun <T : Comparable<T>> T.coerceIn(range: ClosedRange<T>): T"
                ]
              },
              {
                "name": "compareTo",
                "description": [
                  "Compares this object with the specified object for order. Returns zero if this object is equal\nto the specified other object, a negative number if it's less than other, or a positive number\nif it's greater than other."
                ],
                "code": ["infix fun <T> Comparable<T>.compareTo(other: T): Int"]
              },
              {
                "name": "mod",
                "description": [
                  "Calculates the remainder of flooring division of this value (dividend) by the other value (divisor)."
                ],
                "code": [
                  "fun Float.mod(other: Float): Float",
                  "fun Float.mod(other: Double): Double"
                ]
              },
              {
                "name": "narrow",
                "description": [],
                "code": ["fun <R : Number> Number.narrow(): R"]
              },
              {
                "name": "rangeTo",
                "description": [
                  "Creates a range from this Float value to the specified that value.",
                  "Creates a range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun Float.rangeTo(    that: Float): ClosedFloatingPointRange<Float>",
                  "operator fun <T : Comparable<T>> T.rangeTo(    that: T): ClosedRange<T>"
                ]
              },
              {
                "name": "rangeUntil",
                "description": [
                  "Creates an open-ended range from this Float value to the specified that value.",
                  "Creates an open-ended range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun Float.rangeUntil(    that: Float): OpenEndRange<Float>",
                  "operator fun <T : Comparable<T>> T.rangeUntil(    that: T): OpenEndRange<T>"
                ]
              },
              {
                "name": "signExtend",
                "description": [],
                "code": ["fun <R : Number> Number.signExtend(): R"]
              },
              {
                "name": "toBigDecimal",
                "description": [
                  "Returns the value of this Float number as a BigDecimal."
                ],
                "code": [
                  "fun Float.toBigDecimal(): BigDecimal",
                  "fun Float.toBigDecimal(mathContext: MathContext): BigDecimal"
                ]
              },
              {
                "name": "toUInt",
                "description": ["Converts this Float value to UInt."],
                "code": ["fun Float.toUInt(): UInt"]
              },
              {
                "name": "toULong",
                "description": ["Converts this Float value to ULong."],
                "code": ["fun Float.toULong(): ULong"]
              }
            ]
          }
        ]
      },
      {
        "name": "FloatArray",
        "description": [
          "An array of floats. When targeting the JVM, instances of this class are represented as float[]."
        ],
        "code": ["class FloatArray"],
        "url": "-float-array/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Creates a new array of the specified size, where each element is calculated by calling the specified\ninit function.",
                  "Creates a new array of the specified size, with all elements initialized to zero."
                ],
                "code": [
                  "<init>(size: Int, init: (Int) -> Float)",
                  "<init>(size: Int)"
                ]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "size",
                "description": ["Returns the number of elements in the array."],
                "code": ["val size: Int"]
              }
            ]
          },
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "get",
                "description": [
                  "Returns the array element at the given index.  This method can be called using the index operator."
                ],
                "code": ["operator fun get(index: Int): Float"]
              },
              {
                "name": "iterator",
                "description": [
                  "Creates an iterator over the elements of the array."
                ],
                "code": ["operator fun iterator(): FloatIterator"]
              },
              {
                "name": "set",
                "description": [
                  "Sets the element at the given index to the given value. This method can be called using the index operator."
                ],
                "code": ["operator fun set(index: Int, value: Float)"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "indices",
                "description": [
                  "Returns the range of valid indices for the array."
                ],
                "code": ["val FloatArray.indices: IntRange"]
              },
              {
                "name": "lastIndex",
                "description": ["Returns the last valid index for the array."],
                "code": ["val FloatArray.lastIndex: Int"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "all",
                "description": [
                  "Returns true if all elements match the given predicate."
                ],
                "code": [
                  "fun FloatArray.all(predicate: (Float) -> Boolean): Boolean"
                ]
              },
              {
                "name": "any",
                "description": [
                  "Returns true if array has at least one element.",
                  "Returns true if at least one element matches the given predicate."
                ],
                "code": [
                  "fun FloatArray.any(): Boolean",
                  "fun FloatArray.any(predicate: (Float) -> Boolean): Boolean"
                ]
              },
              {
                "name": "asIterable",
                "description": [
                  "Creates an Iterable instance that wraps the original array returning its elements when being iterated."
                ],
                "code": ["fun FloatArray.asIterable(): Iterable<Float>"]
              },
              {
                "name": "asSequence",
                "description": [
                  "Creates a Sequence instance that wraps the original array returning its elements when being iterated."
                ],
                "code": ["fun FloatArray.asSequence(): Sequence<Float>"]
              },
              {
                "name": "associate",
                "description": [
                  "Returns a Map containing key-value pairs provided by transform function\napplied to elements of the given array."
                ],
                "code": [
                  "fun <K, V> FloatArray.associate(    transform: (Float) -> Pair<K, V>): Map<K, V>"
                ]
              },
              {
                "name": "associateBy",
                "description": [
                  "Returns a Map containing the elements from the given array indexed by the key\nreturned from keySelector function applied to each element.",
                  "Returns a Map containing the values provided by valueTransform and indexed by keySelector functions applied to elements of the given array."
                ],
                "code": [
                  "fun <K> FloatArray.associateBy(    keySelector: (Float) -> K): Map<K, Float>",
                  "fun <K, V> FloatArray.associateBy(    keySelector: (Float) -> K,     valueTransform: (Float) -> V): Map<K, V>"
                ]
              },
              {
                "name": "associateByTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function applied to each element of the given array\nand value is the element itself.",
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function and\nand value is provided by the valueTransform function applied to elements of the given array."
                ],
                "code": [
                  "fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(    destination: M,     keySelector: (Float) -> K): M",
                  "fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(    destination: M,     keySelector: (Float) -> K,     valueTransform: (Float) -> V): M"
                ]
              },
              {
                "name": "associateTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs\nprovided by transform function applied to each element of the given array."
                ],
                "code": [
                  "fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(    destination: M,     transform: (Float) -> Pair<K, V>): M"
                ]
              },
              {
                "name": "associateWith",
                "description": [
                  "Returns a Map where keys are elements from the given array and values are\nproduced by the valueSelector function applied to each element."
                ],
                "code": [
                  "fun <V> FloatArray.associateWith(    valueSelector: (Float) -> V): Map<Float, V>"
                ]
              },
              {
                "name": "associateWithTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs for each element of the given array,\nwhere key is the element itself and value is provided by the valueSelector function applied to that key."
                ],
                "code": [
                  "fun <V, M : MutableMap<in Float, in V>> FloatArray.associateWithTo(    destination: M,     valueSelector: (Float) -> V): M"
                ]
              },
              {
                "name": "average",
                "description": [
                  "Returns an average value of elements in the array."
                ],
                "code": ["fun FloatArray.average(): Double"]
              },
              {
                "name": "binarySearch",
                "description": [
                  "Searches the array or the range of the array for the provided element using the binary search algorithm.\nThe array is expected to be sorted, otherwise the result is undefined."
                ],
                "code": [
                  "fun FloatArray.binarySearch(    element: Float,     fromIndex: Int = 0,     toIndex: Int = size): Int"
                ]
              },
              {
                "name": "component1",
                "description": ["Returns 1st element from the array."],
                "code": ["operator fun FloatArray.component1(): Float"]
              },
              {
                "name": "component2",
                "description": ["Returns 2nd element from the array."],
                "code": ["operator fun FloatArray.component2(): Float"]
              },
              {
                "name": "component3",
                "description": ["Returns 3rd element from the array."],
                "code": ["operator fun FloatArray.component3(): Float"]
              },
              {
                "name": "component4",
                "description": ["Returns 4th element from the array."],
                "code": ["operator fun FloatArray.component4(): Float"]
              },
              {
                "name": "component5",
                "description": ["Returns 5th element from the array."],
                "code": ["operator fun FloatArray.component5(): Float"]
              },
              {
                "name": "contains",
                "description": [
                  "Returns true if element is found in the array."
                ],
                "code": [
                  "operator fun FloatArray.contains(element: Float): Boolean"
                ]
              },
              {
                "name": "contentEquals",
                "description": [
                  "Returns true if the two specified arrays are structurally equal to one another,\ni.e. contain the same number of the same elements in the same order."
                ],
                "code": [
                  "infix fun FloatArray.contentEquals(    other: FloatArray): Boolean"
                ]
              },
              {
                "name": "contentHashCode",
                "description": [
                  "Returns a hash code based on the contents of this array as if it is List."
                ],
                "code": ["fun FloatArray.contentHashCode(): Int"]
              },
              {
                "name": "contentToString",
                "description": [
                  "Returns a string representation of the contents of the specified array as if it is List."
                ],
                "code": ["fun FloatArray.contentToString(): String"]
              },
              {
                "name": "count",
                "description": [
                  "Returns the number of elements in this array.",
                  "Returns the number of elements matching the given predicate."
                ],
                "code": [
                  "fun FloatArray.count(): Int",
                  "fun FloatArray.count(predicate: (Float) -> Boolean): Int"
                ]
              },
              {
                "name": "distinct",
                "description": [
                  "Returns a list containing only distinct elements from the given array."
                ],
                "code": ["fun FloatArray.distinct(): List<Float>"]
              },
              {
                "name": "distinctBy",
                "description": [
                  "Returns a list containing only elements from the given array\nhaving distinct keys returned by the given selector function."
                ],
                "code": [
                  "fun <K> FloatArray.distinctBy(    selector: (Float) -> K): List<Float>"
                ]
              },
              {
                "name": "drop",
                "description": [
                  "Returns a list containing all elements except first n elements."
                ],
                "code": ["fun FloatArray.drop(n: Int): List<Float>"]
              },
              {
                "name": "dropLast",
                "description": [
                  "Returns a list containing all elements except last n elements."
                ],
                "code": ["fun FloatArray.dropLast(n: Int): List<Float>"]
              },
              {
                "name": "dropLastWhile",
                "description": [
                  "Returns a list containing all elements except last elements that satisfy the given predicate."
                ],
                "code": [
                  "fun FloatArray.dropLastWhile(    predicate: (Float) -> Boolean): List<Float>"
                ]
              },
              {
                "name": "dropWhile",
                "description": [
                  "Returns a list containing all elements except first elements that satisfy the given predicate."
                ],
                "code": [
                  "fun FloatArray.dropWhile(    predicate: (Float) -> Boolean): List<Float>"
                ]
              },
              {
                "name": "elementAtOrElse",
                "description": [
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
                ],
                "code": [
                  "fun FloatArray.elementAtOrElse(    index: Int,     defaultValue: (Int) -> Float): Float"
                ]
              },
              {
                "name": "elementAtOrNull",
                "description": [
                  "Returns an element at the given index or null if the index is out of bounds of this array."
                ],
                "code": ["fun FloatArray.elementAtOrNull(index: Int): Float?"]
              },
              {
                "name": "filter",
                "description": [
                  "Returns a list containing only elements matching the given predicate."
                ],
                "code": [
                  "fun FloatArray.filter(    predicate: (Float) -> Boolean): List<Float>"
                ]
              },
              {
                "name": "filterIndexed",
                "description": [
                  "Returns a list containing only elements matching the given predicate."
                ],
                "code": [
                  "fun FloatArray.filterIndexed(    predicate: (index: Int, Float) -> Boolean): List<Float>"
                ]
              },
              {
                "name": "filterIndexedTo",
                "description": [
                  "Appends all elements matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(    destination: C,     predicate: (index: Int, Float) -> Boolean): C"
                ]
              },
              {
                "name": "filterNot",
                "description": [
                  "Returns a list containing all elements not matching the given predicate."
                ],
                "code": [
                  "fun FloatArray.filterNot(    predicate: (Float) -> Boolean): List<Float>"
                ]
              },
              {
                "name": "filterNotTo",
                "description": [
                  "Appends all elements not matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(    destination: C,     predicate: (Float) -> Boolean): C"
                ]
              },
              {
                "name": "filterTo",
                "description": [
                  "Appends all elements matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in Float>> FloatArray.filterTo(    destination: C,     predicate: (Float) -> Boolean): C"
                ]
              },
              {
                "name": "find",
                "description": [
                  "Returns the first element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun FloatArray.find(predicate: (Float) -> Boolean): Float?"
                ]
              },
              {
                "name": "findLast",
                "description": [
                  "Returns the last element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun FloatArray.findLast(    predicate: (Float) -> Boolean): Float?"
                ]
              },
              {
                "name": "first",
                "description": [
                  "Returns the first element.",
                  "Returns the first element matching the given predicate."
                ],
                "code": [
                  "fun FloatArray.first(): Float",
                  "fun FloatArray.first(predicate: (Float) -> Boolean): Float"
                ]
              },
              {
                "name": "firstOrNull",
                "description": [
                  "Returns the first element, or null if the array is empty.",
                  "Returns the first element matching the given predicate, or null if element was not found."
                ],
                "code": [
                  "fun FloatArray.firstOrNull(): Float?",
                  "fun FloatArray.firstOrNull(    predicate: (Float) -> Boolean): Float?"
                ]
              },
              {
                "name": "flatMap",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element of original array."
                ],
                "code": [
                  "fun <R> FloatArray.flatMap(    transform: (Float) -> Iterable<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexed",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element\nand its index in the original array."
                ],
                "code": [
                  "fun <R> FloatArray.flatMapIndexed(    transform: (index: Int, Float) -> Iterable<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexedTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each element\nand its index in the original array, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> FloatArray.flatMapIndexedTo(    destination: C,     transform: (index: Int, Float) -> Iterable<R>): C"
                ]
              },
              {
                "name": "flatMapTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each element of original array, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(    destination: C,     transform: (Float) -> Iterable<R>): C"
                ]
              },
              {
                "name": "fold",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun <R> FloatArray.fold(    initial: R,     operation: (acc: R, Float) -> R): R"
                ]
              },
              {
                "name": "foldIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element with its index in the original array."
                ],
                "code": [
                  "fun <R> FloatArray.foldIndexed(    initial: R,     operation: (index: Int, acc: R, Float) -> R): R"
                ]
              },
              {
                "name": "foldRight",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun <R> FloatArray.foldRight(    initial: R,     operation: (Float, acc: R) -> R): R"
                ]
              },
              {
                "name": "foldRightIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun <R> FloatArray.foldRightIndexed(    initial: R,     operation: (index: Int, Float, acc: R) -> R): R"
                ]
              },
              {
                "name": "forEach",
                "description": ["Performs the given action on each element."],
                "code": ["fun FloatArray.forEach(action: (Float) -> Unit)"]
              },
              {
                "name": "forEachIndexed",
                "description": [
                  "Performs the given action on each element, providing sequential index with the element."
                ],
                "code": [
                  "fun FloatArray.forEachIndexed(    action: (index: Int, Float) -> Unit)"
                ]
              },
              {
                "name": "getOrElse",
                "description": [
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
                ],
                "code": [
                  "fun FloatArray.getOrElse(    index: Int,     defaultValue: (Int) -> Float): Float"
                ]
              },
              {
                "name": "getOrNull",
                "description": [
                  "Returns an element at the given index or null if the index is out of bounds of this array."
                ],
                "code": ["fun FloatArray.getOrNull(index: Int): Float?"]
              },
              {
                "name": "groupBy",
                "description": [
                  "Groups elements of the original array by the key returned by the given keySelector function\napplied to each element and returns a map where each group key is associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original array\nby the key returned by the given keySelector function applied to the element\nand returns a map where each group key is associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K> FloatArray.groupBy(    keySelector: (Float) -> K): Map<K, List<Float>>",
                  "fun <K, V> FloatArray.groupBy(    keySelector: (Float) -> K,     valueTransform: (Float) -> V): Map<K, List<V>>"
                ]
              },
              {
                "name": "groupByTo",
                "description": [
                  "Groups elements of the original array by the key returned by the given keySelector function\napplied to each element and puts to the destination map each group key associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original array\nby the key returned by the given keySelector function applied to the element\nand puts to the destination map each group key associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(    destination: M,     keySelector: (Float) -> K): M",
                  "fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(    destination: M,     keySelector: (Float) -> K,     valueTransform: (Float) -> V): M"
                ]
              },
              {
                "name": "indexOf",
                "description": [
                  "Returns first index of element, or -1 if the array does not contain element."
                ],
                "code": ["fun FloatArray.indexOf(element: Float): Int"]
              },
              {
                "name": "indexOfFirst",
                "description": [
                  "Returns index of the first element matching the given predicate, or -1 if the array does not contain such element."
                ],
                "code": [
                  "fun FloatArray.indexOfFirst(    predicate: (Float) -> Boolean): Int"
                ]
              },
              {
                "name": "indexOfLast",
                "description": [
                  "Returns index of the last element matching the given predicate, or -1 if the array does not contain such element."
                ],
                "code": [
                  "fun FloatArray.indexOfLast(    predicate: (Float) -> Boolean): Int"
                ]
              },
              {
                "name": "intersect",
                "description": [
                  "Returns a set containing all elements that are contained by both this array and the specified collection."
                ],
                "code": [
                  "infix fun FloatArray.intersect(    other: Iterable<Float>): Set<Float>"
                ]
              },
              {
                "name": "isEmpty",
                "description": ["Returns true if the array is empty."],
                "code": ["fun FloatArray.isEmpty(): Boolean"]
              },
              {
                "name": "isNotEmpty",
                "description": ["Returns true if the array is not empty."],
                "code": ["fun FloatArray.isNotEmpty(): Boolean"]
              },
              {
                "name": "joinTo",
                "description": [
                  "Appends the string from all the elements separated using separator and using the given prefix and postfix if supplied."
                ],
                "code": [
                  "fun <A : Appendable> FloatArray.joinTo(    buffer: A,     separator: CharSequence = \", \",     prefix: CharSequence = \"\",     postfix: CharSequence = \"\",     limit: Int = -1,     truncated: CharSequence = \"...\",     transform: ((Float) -> CharSequence)? = null): A"
                ]
              },
              {
                "name": "joinToString",
                "description": [
                  "Creates a string from all the elements separated using separator and using the given prefix and postfix if supplied."
                ],
                "code": [
                  "fun FloatArray.joinToString(    separator: CharSequence = \", \",     prefix: CharSequence = \"\",     postfix: CharSequence = \"\",     limit: Int = -1,     truncated: CharSequence = \"...\",     transform: ((Float) -> CharSequence)? = null): String"
                ]
              },
              {
                "name": "last",
                "description": [
                  "Returns the last element.",
                  "Returns the last element matching the given predicate."
                ],
                "code": [
                  "fun FloatArray.last(): Float",
                  "fun FloatArray.last(predicate: (Float) -> Boolean): Float"
                ]
              },
              {
                "name": "lastIndexOf",
                "description": [
                  "Returns last index of element, or -1 if the array does not contain element."
                ],
                "code": ["fun FloatArray.lastIndexOf(element: Float): Int"]
              },
              {
                "name": "lastOrNull",
                "description": [
                  "Returns the last element, or null if the array is empty.",
                  "Returns the last element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun FloatArray.lastOrNull(): Float?",
                  "fun FloatArray.lastOrNull(    predicate: (Float) -> Boolean): Float?"
                ]
              },
              {
                "name": "map",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each element in the original array."
                ],
                "code": [
                  "fun <R> FloatArray.map(transform: (Float) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexed",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each element and its index in the original array."
                ],
                "code": [
                  "fun <R> FloatArray.mapIndexed(    transform: (index: Int, Float) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexedTo",
                "description": [
                  "Applies the given transform function to each element and its index in the original array\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(    destination: C,     transform: (index: Int, Float) -> R): C"
                ]
              },
              {
                "name": "mapTo",
                "description": [
                  "Applies the given transform function to each element of the original array\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> FloatArray.mapTo(    destination: C,     transform: (Float) -> R): C"
                ]
              },
              {
                "name": "maxByOrNull",
                "description": [
                  "Returns the first element yielding the largest value of the given function or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> FloatArray.maxByOrNull(    selector: (Float) -> R): Float?"
                ]
              },
              {
                "name": "maxOf",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each element in the array."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.maxOf(    selector: (Float) -> R): R"
                ]
              },
              {
                "name": "maxOfOrNull",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.maxOfOrNull(    selector: (Float) -> R): R?"
                ]
              },
              {
                "name": "maxOfWith",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun <R> FloatArray.maxOfWith(    comparator: Comparator<in R>,     selector: (Float) -> R): R"
                ]
              },
              {
                "name": "maxOfWithOrNull",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R> FloatArray.maxOfWithOrNull(    comparator: Comparator<in R>,     selector: (Float) -> R): R?"
                ]
              },
              {
                "name": "maxOrNull",
                "description": [
                  "Returns the largest element or null if there are no elements."
                ],
                "code": ["fun FloatArray.maxOrNull(): Float?"]
              },
              {
                "name": "maxWith",
                "description": [
                  "Returns the first element having the largest value according to the provided comparator."
                ],
                "code": [
                  "fun FloatArray.maxWith(    comparator: Comparator<in Float>): Float",
                  "fun FloatArray.maxWith(    comparator: Comparator<in Float>): Float?"
                ]
              },
              {
                "name": "maxWithOrNull",
                "description": [
                  "Returns the first element having the largest value according to the provided comparator or null if there are no elements."
                ],
                "code": [
                  "fun FloatArray.maxWithOrNull(    comparator: Comparator<in Float>): Float?"
                ]
              },
              {
                "name": "minByOrNull",
                "description": [
                  "Returns the first element yielding the smallest value of the given function or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> FloatArray.minByOrNull(    selector: (Float) -> R): Float?"
                ]
              },
              {
                "name": "minOf",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the array."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.minOf(    selector: (Float) -> R): R"
                ]
              },
              {
                "name": "minOfOrNull",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.minOfOrNull(    selector: (Float) -> R): R?"
                ]
              },
              {
                "name": "minOfWith",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun <R> FloatArray.minOfWith(    comparator: Comparator<in R>,     selector: (Float) -> R): R"
                ]
              },
              {
                "name": "minOfWithOrNull",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R> FloatArray.minOfWithOrNull(    comparator: Comparator<in R>,     selector: (Float) -> R): R?"
                ]
              },
              {
                "name": "minOrNull",
                "description": [
                  "Returns the smallest element or null if there are no elements."
                ],
                "code": ["fun FloatArray.minOrNull(): Float?"]
              },
              {
                "name": "minWith",
                "description": [
                  "Returns the first element having the smallest value according to the provided comparator."
                ],
                "code": [
                  "fun FloatArray.minWith(    comparator: Comparator<in Float>): Float",
                  "fun FloatArray.minWith(    comparator: Comparator<in Float>): Float?"
                ]
              },
              {
                "name": "minWithOrNull",
                "description": [
                  "Returns the first element having the smallest value according to the provided comparator or null if there are no elements."
                ],
                "code": [
                  "fun FloatArray.minWithOrNull(    comparator: Comparator<in Float>): Float?"
                ]
              },
              {
                "name": "none",
                "description": [
                  "Returns true if the array has no elements.",
                  "Returns true if no elements match the given predicate."
                ],
                "code": [
                  "fun FloatArray.none(): Boolean",
                  "fun FloatArray.none(predicate: (Float) -> Boolean): Boolean"
                ]
              },
              {
                "name": "onEach",
                "description": [
                  "Performs the given action on each element and returns the array itself afterwards."
                ],
                "code": [
                  "fun FloatArray.onEach(action: (Float) -> Unit): FloatArray"
                ]
              },
              {
                "name": "onEachIndexed",
                "description": [
                  "Performs the given action on each element, providing sequential index with the element,\nand returns the array itself afterwards."
                ],
                "code": [
                  "fun FloatArray.onEachIndexed(    action: (index: Int, Float) -> Unit): FloatArray"
                ]
              },
              {
                "name": "partition",
                "description": [
                  "Splits the original array into pair of lists,\nwhere first list contains elements for which predicate yielded true,\nwhile second list contains elements for which predicate yielded false."
                ],
                "code": [
                  "fun FloatArray.partition(    predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>>"
                ]
              },
              {
                "name": "random",
                "description": [
                  "Returns a random element from this array.",
                  "Returns a random element from this array using the specified source of randomness."
                ],
                "code": [
                  "fun FloatArray.random(): Float",
                  "fun FloatArray.random(random: Random): Float"
                ]
              },
              {
                "name": "randomOrNull",
                "description": [
                  "Returns a random element from this array, or null if this array is empty.",
                  "Returns a random element from this array using the specified source of randomness, or null if this array is empty."
                ],
                "code": [
                  "fun FloatArray.randomOrNull(): Float?",
                  "fun FloatArray.randomOrNull(random: Random): Float?"
                ]
              },
              {
                "name": "reduce",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun FloatArray.reduce(    operation: (acc: Float, Float) -> Float): Float"
                ]
              },
              {
                "name": "reduceIndexed",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original array."
                ],
                "code": [
                  "fun FloatArray.reduceIndexed(    operation: (index: Int, acc: Float, Float) -> Float): Float"
                ]
              },
              {
                "name": "reduceIndexedOrNull",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original array."
                ],
                "code": [
                  "fun FloatArray.reduceIndexedOrNull(    operation: (index: Int, acc: Float, Float) -> Float): Float?"
                ]
              },
              {
                "name": "reduceOrNull",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun FloatArray.reduceOrNull(    operation: (acc: Float, Float) -> Float): Float?"
                ]
              },
              {
                "name": "reduceRight",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun FloatArray.reduceRight(    operation: (Float, acc: Float) -> Float): Float"
                ]
              },
              {
                "name": "reduceRightIndexed",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun FloatArray.reduceRightIndexed(    operation: (index: Int, Float, acc: Float) -> Float): Float"
                ]
              },
              {
                "name": "reduceRightIndexedOrNull",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun FloatArray.reduceRightIndexedOrNull(    operation: (index: Int, Float, acc: Float) -> Float): Float?"
                ]
              },
              {
                "name": "reduceRightOrNull",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun FloatArray.reduceRightOrNull(    operation: (Float, acc: Float) -> Float): Float?"
                ]
              },
              {
                "name": "refTo",
                "description": [],
                "code": [
                  "fun FloatArray.refTo(index: Int): CValuesRef<FloatVar>"
                ]
              },
              {
                "name": "reverse",
                "description": [
                  "Reverses elements in the array in-place.",
                  "Reverses elements of the array in the specified range in-place."
                ],
                "code": [
                  "fun FloatArray.reverse()",
                  "fun FloatArray.reverse(fromIndex: Int, toIndex: Int)"
                ]
              },
              {
                "name": "reversed",
                "description": [
                  "Returns a list with elements in reversed order."
                ],
                "code": ["fun FloatArray.reversed(): List<Float>"]
              },
              {
                "name": "reversedArray",
                "description": [
                  "Returns an array with elements of this array in reversed order."
                ],
                "code": ["fun FloatArray.reversedArray(): FloatArray"]
              },
              {
                "name": "runningFold",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> FloatArray.runningFold(    initial: R,     operation: (acc: R, Float) -> R): List<R>"
                ]
              },
              {
                "name": "runningFoldIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> FloatArray.runningFoldIndexed(    initial: R,     operation: (index: Int, acc: R, Float) -> R): List<R>"
                ]
              },
              {
                "name": "runningReduce",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with the first element of this array."
                ],
                "code": [
                  "fun FloatArray.runningReduce(    operation: (acc: Float, Float) -> Float): List<Float>"
                ]
              },
              {
                "name": "runningReduceIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with the first element of this array."
                ],
                "code": [
                  "fun FloatArray.runningReduceIndexed(    operation: (index: Int, acc: Float, Float) -> Float): List<Float>"
                ]
              },
              {
                "name": "scan",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> FloatArray.scan(    initial: R,     operation: (acc: R, Float) -> R): List<R>"
                ]
              },
              {
                "name": "scanIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> FloatArray.scanIndexed(    initial: R,     operation: (index: Int, acc: R, Float) -> R): List<R>"
                ]
              },
              {
                "name": "shuffle",
                "description": [
                  "Randomly shuffles elements in this array in-place.",
                  "Randomly shuffles elements in this array in-place using the specified random instance as the source of randomness."
                ],
                "code": [
                  "fun FloatArray.shuffle()",
                  "fun FloatArray.shuffle(random: Random)"
                ]
              },
              {
                "name": "single",
                "description": [
                  "Returns the single element, or throws an exception if the array is empty or has more than one element.",
                  "Returns the single element matching the given predicate, or throws exception if there is no or more than one matching element."
                ],
                "code": [
                  "fun FloatArray.single(): Float",
                  "fun FloatArray.single(predicate: (Float) -> Boolean): Float"
                ]
              },
              {
                "name": "singleOrNull",
                "description": [
                  "Returns single element, or null if the array is empty or has more than one element.",
                  "Returns the single element matching the given predicate, or null if element was not found or more than one element was found."
                ],
                "code": [
                  "fun FloatArray.singleOrNull(): Float?",
                  "fun FloatArray.singleOrNull(    predicate: (Float) -> Boolean): Float?"
                ]
              },
              {
                "name": "slice",
                "description": [
                  "Returns a list containing elements at indices in the specified indices range.",
                  "Returns a list containing elements at specified indices."
                ],
                "code": [
                  "fun FloatArray.slice(indices: IntRange): List<Float>",
                  "fun FloatArray.slice(indices: Iterable<Int>): List<Float>"
                ]
              },
              {
                "name": "sliceArray",
                "description": [
                  "Returns an array containing elements of this array at specified indices.",
                  "Returns an array containing elements at indices in the specified indices range."
                ],
                "code": [
                  "fun FloatArray.sliceArray(    indices: Collection<Int>): FloatArray",
                  "fun FloatArray.sliceArray(indices: IntRange): FloatArray"
                ]
              },
              {
                "name": "sort",
                "description": [
                  "Sorts the array in-place according to the order specified by the given comparison function."
                ],
                "code": [
                  "fun FloatArray.sort(comparison: (a: Float, b: Float) -> Int)"
                ]
              },
              {
                "name": "sortDescending",
                "description": [
                  "Sorts elements in the array in-place descending according to their natural sort order.",
                  "Sorts elements of the array in the specified range in-place.\nThe elements are sorted descending according to their natural sort order."
                ],
                "code": [
                  "fun FloatArray.sortDescending()",
                  "fun FloatArray.sortDescending(fromIndex: Int, toIndex: Int)"
                ]
              },
              {
                "name": "sorted",
                "description": [
                  "Returns a list of all elements sorted according to their natural sort order."
                ],
                "code": ["fun FloatArray.sorted(): List<Float>"]
              },
              {
                "name": "sortedArray",
                "description": [
                  "Returns an array with all elements of this array sorted according to their natural sort order."
                ],
                "code": ["fun FloatArray.sortedArray(): FloatArray"]
              },
              {
                "name": "sortedArrayDescending",
                "description": [
                  "Returns an array with all elements of this array sorted descending according to their natural sort order."
                ],
                "code": ["fun FloatArray.sortedArrayDescending(): FloatArray"]
              },
              {
                "name": "sortedBy",
                "description": [
                  "Returns a list of all elements sorted according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <R : Comparable<R>> FloatArray.sortedBy(    selector: (Float) -> R?): List<Float>"
                ]
              },
              {
                "name": "sortedByDescending",
                "description": [
                  "Returns a list of all elements sorted descending according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <R : Comparable<R>> FloatArray.sortedByDescending(    selector: (Float) -> R?): List<Float>"
                ]
              },
              {
                "name": "sortedDescending",
                "description": [
                  "Returns a list of all elements sorted descending according to their natural sort order."
                ],
                "code": ["fun FloatArray.sortedDescending(): List<Float>"]
              },
              {
                "name": "sortedWith",
                "description": [
                  "Returns a list of all elements sorted according to the specified comparator."
                ],
                "code": [
                  "fun FloatArray.sortedWith(    comparator: Comparator<in Float>): List<Float>"
                ]
              },
              {
                "name": "subtract",
                "description": [
                  "Returns a set containing all elements that are contained by this array and not contained by the specified collection."
                ],
                "code": [
                  "infix fun FloatArray.subtract(    other: Iterable<Float>): Set<Float>"
                ]
              },
              {
                "name": "sum",
                "description": [
                  "Returns the sum of all elements in the array."
                ],
                "code": ["fun FloatArray.sum(): Float"]
              },
              {
                "name": "sumBy",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array."
                ],
                "code": ["fun FloatArray.sumBy(selector: (Float) -> Int): Int"]
              },
              {
                "name": "sumByDouble",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun FloatArray.sumByDouble(    selector: (Float) -> Double): Double"
                ]
              },
              {
                "name": "sumOf",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun FloatArray.sumOf(selector: (Float) -> Double): Double",
                  "fun FloatArray.sumOf(selector: (Float) -> Int): Int",
                  "fun FloatArray.sumOf(selector: (Float) -> Long): Long",
                  "fun FloatArray.sumOf(selector: (Float) -> UInt): UInt",
                  "fun FloatArray.sumOf(selector: (Float) -> ULong): ULong",
                  "fun FloatArray.sumOf(    selector: (Float) -> BigDecimal): BigDecimal",
                  "fun FloatArray.sumOf(    selector: (Float) -> BigInteger): BigInteger"
                ]
              },
              {
                "name": "take",
                "description": ["Returns a list containing first n elements."],
                "code": ["fun FloatArray.take(n: Int): List<Float>"]
              },
              {
                "name": "takeLast",
                "description": ["Returns a list containing last n elements."],
                "code": ["fun FloatArray.takeLast(n: Int): List<Float>"]
              },
              {
                "name": "takeLastWhile",
                "description": [
                  "Returns a list containing last elements satisfying the given predicate."
                ],
                "code": [
                  "fun FloatArray.takeLastWhile(    predicate: (Float) -> Boolean): List<Float>"
                ]
              },
              {
                "name": "takeWhile",
                "description": [
                  "Returns a list containing first elements satisfying the given predicate."
                ],
                "code": [
                  "fun FloatArray.takeWhile(    predicate: (Float) -> Boolean): List<Float>"
                ]
              },
              {
                "name": "toCollection",
                "description": [
                  "Appends all elements to the given destination collection."
                ],
                "code": [
                  "fun <C : MutableCollection<in Float>> FloatArray.toCollection(    destination: C): C"
                ]
              },
              {
                "name": "toCValues",
                "description": [],
                "code": ["fun FloatArray.toCValues(): CValues<FloatVar>"]
              },
              {
                "name": "toHashSet",
                "description": ["Returns a new HashSet of all elements."],
                "code": ["fun FloatArray.toHashSet(): HashSet<Float>"]
              },
              {
                "name": "toList",
                "description": ["Returns a List containing all elements."],
                "code": ["fun FloatArray.toList(): List<Float>"]
              },
              {
                "name": "toMutableList",
                "description": [
                  "Returns a new MutableList filled with all elements of this array."
                ],
                "code": ["fun FloatArray.toMutableList(): MutableList<Float>"]
              },
              {
                "name": "toMutableSet",
                "description": [
                  "Returns a new MutableSet containing all distinct elements from the given array."
                ],
                "code": ["fun FloatArray.toMutableSet(): MutableSet<Float>"]
              },
              {
                "name": "toSet",
                "description": ["Returns a Set of all elements."],
                "code": ["fun FloatArray.toSet(): Set<Float>"]
              },
              {
                "name": "toSortedSet",
                "description": ["Returns a new SortedSet of all elements."],
                "code": ["fun FloatArray.toSortedSet(): SortedSet<Float>"]
              },
              {
                "name": "union",
                "description": [
                  "Returns a set containing all distinct elements from both collections."
                ],
                "code": [
                  "infix fun FloatArray.union(    other: Iterable<Float>): Set<Float>"
                ]
              },
              {
                "name": "withIndex",
                "description": [
                  "Returns a lazy Iterable that wraps each element of the original array\ninto an IndexedValue containing the index of that element and the element itself."
                ],
                "code": [
                  "fun FloatArray.withIndex(): Iterable<IndexedValue<Float>>"
                ]
              },
              {
                "name": "zip",
                "description": [
                  "Returns a list of pairs built from the elements of this array and the other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of pairs built from the elements of this collection and other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other collection with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest array."
                ],
                "code": [
                  "infix fun <R> any_array<R>.zip(    other: Array<out R>): List<Pair<Float, R>>",
                  "fun <R, V> FloatArray.zip(    other: Array<out R>,     transform: (a: Float, b: R) -> V): List<V>",
                  "infix fun <R> FloatArray.zip(    other: Iterable<R>): List<Pair<Float, R>>",
                  "fun <R, V> FloatArray.zip(    other: Iterable<R>,     transform: (a: Float, b: R) -> V): List<V>",
                  "fun <V> FloatArray.zip(    other: FloatArray,     transform: (a: Float, b: Float) -> V): List<V>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "Function",
        "description": [
          "Represents a value of a functional type, such as a lambda, an anonymous function or a function reference."
        ],
        "code": ["interface Function<out R>"],
        "url": "-function.html",
        "subcategories": [
          {
            "name": "Parameters",
            "declarations": [
              {
                "name": "reflect",
                "description": [
                  "This is an experimental API. Given a class for a compiled Kotlin lambda or a function expression,\nreturns a KFunction instance providing introspection capabilities for that lambda or function expression and its parameters.\nNot all features are currently supported, in particular KCallable.call and KCallable.callBy will fail at the moment."
                ],
                "code": ["fun <R> Function<R>.reflect(): KFunction<R>?"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "KFunction",
                "description": [
                  "Represents a function with introspection capabilities."
                ],
                "code": [
                  "interface KFunction<out R> : KCallable<R>, Function<R>"
                ]
              }
            ]
          },
          { "name": "Inheritors", "declarations": [] }
        ]
      },
      {
        "name": "Int",
        "description": [
          "Represents a 32-bit signed integer.\nOn the JVM, non-nullable values of this type are represented as values of the primitive type int."
        ],
        "code": ["class Int : Number, Comparable<Int>"],
        "url": "-int/index.html",
        "subcategories": [
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "and",
                "description": [
                  "Performs a bitwise AND operation between the two values."
                ],
                "code": ["infix fun and(other: Int): Int"]
              },
              {
                "name": "compareTo",
                "description": [
                  "Compares this value with the specified value for order.\nReturns zero if this value is equal to the specified other value, a negative number if it's less than other,\nor a positive number if it's greater than other."
                ],
                "code": [
                  "operator fun compareTo(other: Byte): Int",
                  "operator fun compareTo(other: Short): Int",
                  "operator fun compareTo(other: Int): Int",
                  "operator fun compareTo(other: Long): Int",
                  "operator fun compareTo(other: Float): Int",
                  "operator fun compareTo(other: Double): Int"
                ]
              },
              {
                "name": "dec",
                "description": ["Returns this value decremented by one."],
                "code": ["operator fun dec(): Int"]
              },
              {
                "name": "div",
                "description": [
                  "Divides this value by the other value, truncating the result to an integer that is closer to zero.",
                  "Divides this value by the other value."
                ],
                "code": [
                  "operator fun div(other: Byte): Int",
                  "operator fun div(other: Short): Int",
                  "operator fun div(other: Int): Int",
                  "operator fun div(other: Long): Long",
                  "operator fun div(other: Float): Float",
                  "operator fun div(other: Double): Double"
                ]
              },
              {
                "name": "equals",
                "description": [
                  "Indicates whether some other object is \"equal to\" this one. Implementations must fulfil the following\nrequirements:"
                ],
                "code": [
                  "fun equals(other: Int): Boolean",
                  "fun equals(other: Any?): Boolean"
                ]
              },
              {
                "name": "hashCode",
                "description": [
                  "Returns a hash code value for the object.  The general contract of hashCode is:"
                ],
                "code": ["fun hashCode(): Int"]
              },
              {
                "name": "inc",
                "description": ["Returns this value incremented by one."],
                "code": ["operator fun inc(): Int"]
              },
              {
                "name": "inv",
                "description": ["Inverts the bits in this value."],
                "code": ["fun inv(): Int"]
              },
              {
                "name": "minus",
                "description": ["Subtracts the other value from this value."],
                "code": [
                  "operator fun minus(other: Byte): Int",
                  "operator fun minus(other: Short): Int",
                  "operator fun minus(other: Int): Int",
                  "operator fun minus(other: Long): Long",
                  "operator fun minus(other: Float): Float",
                  "operator fun minus(other: Double): Double"
                ]
              },
              {
                "name": "or",
                "description": [
                  "Performs a bitwise OR operation between the two values."
                ],
                "code": ["infix fun or(other: Int): Int"]
              },
              {
                "name": "plus",
                "description": ["Adds the other value to this value."],
                "code": [
                  "operator fun plus(other: Byte): Int",
                  "operator fun plus(other: Short): Int",
                  "operator fun plus(other: Int): Int",
                  "operator fun plus(other: Long): Long",
                  "operator fun plus(other: Float): Float",
                  "operator fun plus(other: Double): Double"
                ]
              },
              {
                "name": "rangeTo",
                "description": [
                  "Creates a range from this value to the specified other value."
                ],
                "code": [
                  "operator fun rangeTo(other: Byte): IntRange",
                  "operator fun rangeTo(other: Short): IntRange",
                  "operator fun rangeTo(other: Int): IntRange",
                  "operator fun rangeTo(other: Long): LongRange"
                ]
              },
              {
                "name": "rangeUntil",
                "description": [
                  "Creates a range from this value up to but excluding the specified other value."
                ],
                "code": [
                  "operator fun rangeUntil(other: Byte): IntRange",
                  "operator fun rangeUntil(other: Short): IntRange",
                  "operator fun rangeUntil(other: Int): IntRange",
                  "operator fun rangeUntil(other: Long): LongRange"
                ]
              },
              {
                "name": "rem",
                "description": [
                  "Calculates the remainder of truncating division of this value (dividend) by the other value (divisor)."
                ],
                "code": [
                  "operator fun rem(other: Byte): Int",
                  "operator fun rem(other: Short): Int",
                  "operator fun rem(other: Int): Int",
                  "operator fun rem(other: Long): Long",
                  "operator fun rem(other: Float): Float",
                  "operator fun rem(other: Double): Double"
                ]
              },
              {
                "name": "shl",
                "description": [
                  "Shifts this value left by the bitCount number of bits."
                ],
                "code": ["infix fun shl(bitCount: Int): Int"]
              },
              {
                "name": "shr",
                "description": [
                  "Shifts this value right by the bitCount number of bits, filling the leftmost bits with copies of the sign bit."
                ],
                "code": ["infix fun shr(bitCount: Int): Int"]
              },
              {
                "name": "times",
                "description": ["Multiplies this value by the other value."],
                "code": [
                  "operator fun times(other: Byte): Int",
                  "operator fun times(other: Short): Int",
                  "operator fun times(other: Int): Int",
                  "operator fun times(other: Long): Long",
                  "operator fun times(other: Float): Float",
                  "operator fun times(other: Double): Double"
                ]
              },
              {
                "name": "toByte",
                "description": ["Converts this Int value to Byte."],
                "code": ["fun toByte(): Byte"]
              },
              {
                "name": "toChar",
                "description": ["Converts this Int value to Char."],
                "code": ["fun toChar(): Char"]
              },
              {
                "name": "toDouble",
                "description": ["Converts this Int value to Double."],
                "code": ["fun toDouble(): Double"]
              },
              {
                "name": "toFloat",
                "description": ["Converts this Int value to Float."],
                "code": ["fun toFloat(): Float"]
              },
              {
                "name": "toInt",
                "description": ["Returns this value."],
                "code": ["fun toInt(): Int"]
              },
              {
                "name": "toLong",
                "description": ["Converts this Int value to Long."],
                "code": ["fun toLong(): Long"]
              },
              {
                "name": "toShort",
                "description": ["Converts this Int value to Short."],
                "code": ["fun toShort(): Short"]
              },
              {
                "name": "toString",
                "description": [
                  "Returns a string representation of the object."
                ],
                "code": ["fun toString(): String"]
              },
              {
                "name": "unaryMinus",
                "description": ["Returns the negative of this value."],
                "code": ["operator fun unaryMinus(): Int"]
              },
              {
                "name": "unaryPlus",
                "description": ["Returns this value."],
                "code": ["operator fun unaryPlus(): Int"]
              },
              {
                "name": "ushr",
                "description": [
                  "Shifts this value right by the bitCount number of bits, filling the leftmost bits with zeros."
                ],
                "code": ["infix fun ushr(bitCount: Int): Int"]
              },
              {
                "name": "xor",
                "description": [
                  "Performs a bitwise XOR operation between the two values."
                ],
                "code": ["infix fun xor(other: Int): Int"]
              }
            ]
          },
          {
            "name": "Companion Object Properties",
            "declarations": [
              {
                "name": "MAX_VALUE",
                "description": [
                  "A constant holding the maximum value an instance of Int can have."
                ],
                "code": ["const val MAX_VALUE: Int"]
              },
              {
                "name": "MIN_VALUE",
                "description": [
                  "A constant holding the minimum value an instance of Int can have."
                ],
                "code": ["const val MIN_VALUE: Int"]
              },
              {
                "name": "SIZE_BITS",
                "description": [
                  "The number of bits used to represent an instance of Int in a binary form."
                ],
                "code": ["const val SIZE_BITS: Int"]
              },
              {
                "name": "SIZE_BYTES",
                "description": [
                  "The number of bytes used to represent an instance of Int in a binary form."
                ],
                "code": ["const val SIZE_BYTES: Int"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "days",
                "description": [
                  "Returns a Duration equal to this Int number of days."
                ],
                "code": ["val Int.days: Duration"]
              },
              {
                "name": "hours",
                "description": [
                  "Returns a Duration equal to this Int number of hours."
                ],
                "code": ["val Int.hours: Duration"]
              },
              {
                "name": "microseconds",
                "description": [
                  "Returns a Duration equal to this Int number of microseconds."
                ],
                "code": ["val Int.microseconds: Duration"]
              },
              {
                "name": "milliseconds",
                "description": [
                  "Returns a Duration equal to this Int number of milliseconds."
                ],
                "code": ["val Int.milliseconds: Duration"]
              },
              {
                "name": "minutes",
                "description": [
                  "Returns a Duration equal to this Int number of minutes."
                ],
                "code": ["val Int.minutes: Duration"]
              },
              {
                "name": "nanoseconds",
                "description": [
                  "Returns a Duration equal to this Int number of nanoseconds."
                ],
                "code": ["val Int.nanoseconds: Duration"]
              },
              {
                "name": "seconds",
                "description": [
                  "Returns a Duration equal to this Int number of seconds."
                ],
                "code": ["val Int.seconds: Duration"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "coerceAtLeast",
                "description": [
                  "Ensures that this value is not less than the specified minimumValue."
                ],
                "code": [
                  "fun Int.coerceAtLeast(minimumValue: Int): Int",
                  "fun <T : Comparable<T>> T.coerceAtLeast(minimumValue: T): T"
                ]
              },
              {
                "name": "coerceAtMost",
                "description": [
                  "Ensures that this value is not greater than the specified maximumValue."
                ],
                "code": [
                  "fun Int.coerceAtMost(maximumValue: Int): Int",
                  "fun <T : Comparable<T>> T.coerceAtMost(maximumValue: T): T"
                ]
              },
              {
                "name": "coerceIn",
                "description": [
                  "Ensures that this value lies in the specified range minimumValue..maximumValue.",
                  "Ensures that this value lies in the specified range."
                ],
                "code": [
                  "fun Int.coerceIn(minimumValue: Int, maximumValue: Int): Int",
                  "fun <T : Comparable<T>> T.coerceIn(    minimumValue: T?,     maximumValue: T?): T",
                  "fun Int.coerceIn(range: ClosedRange<Int>): Int",
                  "fun <T : Comparable<T>> T.coerceIn(    range: ClosedFloatingPointRange<T>): T",
                  "fun <T : Comparable<T>> T.coerceIn(range: ClosedRange<T>): T"
                ]
              },
              {
                "name": "compareTo",
                "description": [
                  "Compares this object with the specified object for order. Returns zero if this object is equal\nto the specified other object, a negative number if it's less than other, or a positive number\nif it's greater than other."
                ],
                "code": ["infix fun <T> Comparable<T>.compareTo(other: T): Int"]
              },
              {
                "name": "convert",
                "description": [],
                "code": ["fun <R : Any> Int.convert(): R"]
              },
              {
                "name": "digitToChar",
                "description": [
                  "Returns the Char that represents this decimal digit.\nThrows an exception if this value is not in the range 0..9.",
                  "Returns the Char that represents this numeric digit value in the specified radix.\nThrows an exception if the radix is not in the range 2..36 or if this value is not in the range 0 until radix."
                ],
                "code": [
                  "fun Int.digitToChar(): Char",
                  "fun Int.digitToChar(radix: Int): Char"
                ]
              },
              {
                "name": "downTo",
                "description": [
                  "Returns a progression from this value down to the specified to value with the step -1."
                ],
                "code": [
                  "infix fun Int.downTo(to: Byte): IntProgression",
                  "infix fun Int.downTo(to: Int): IntProgression",
                  "infix fun Int.downTo(to: Long): LongProgression",
                  "infix fun Int.downTo(to: Short): IntProgression"
                ]
              },
              {
                "name": "floorDiv",
                "description": [
                  "Divides this value by the other value, flooring the result to an integer that is closer to negative infinity."
                ],
                "code": [
                  "fun Int.floorDiv(other: Byte): Int",
                  "fun Int.floorDiv(other: Short): Int",
                  "fun Int.floorDiv(other: Int): Int",
                  "fun Int.floorDiv(other: Long): Long"
                ]
              },
              {
                "name": "mod",
                "description": [
                  "Calculates the remainder of flooring division of this value (dividend) by the other value (divisor)."
                ],
                "code": [
                  "fun Int.mod(other: Byte): Byte",
                  "fun Int.mod(other: Short): Short",
                  "fun Int.mod(other: Int): Int",
                  "fun Int.mod(other: Long): Long"
                ]
              },
              {
                "name": "narrow",
                "description": [],
                "code": ["fun <R : Number> Number.narrow(): R"]
              },
              {
                "name": "rangeTo",
                "description": [
                  "Creates a range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeTo(    that: T): ClosedRange<T>"
                ]
              },
              {
                "name": "rangeUntil",
                "description": [
                  "Creates an open-ended range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeUntil(    that: T): OpenEndRange<T>"
                ]
              },
              {
                "name": "signExtend",
                "description": [],
                "code": ["fun <R : Number> Number.signExtend(): R"]
              },
              {
                "name": "times",
                "description": [
                  "Returns a duration whose value is the specified duration value multiplied by this number."
                ],
                "code": ["operator fun Int.times(duration: Duration): Duration"]
              },
              {
                "name": "toBigDecimal",
                "description": [
                  "Returns the value of this Int number as a BigDecimal."
                ],
                "code": [
                  "fun Int.toBigDecimal(): BigDecimal",
                  "fun Int.toBigDecimal(mathContext: MathContext): BigDecimal"
                ]
              },
              {
                "name": "toBigInteger",
                "description": [
                  "Returns the value of this Int number as a BigInteger."
                ],
                "code": ["fun Int.toBigInteger(): BigInteger"]
              },
              {
                "name": "toDuration",
                "description": [
                  "Returns a Duration equal to this Int number of the specified unit."
                ],
                "code": ["fun Int.toDuration(unit: DurationUnit): Duration"]
              },
              {
                "name": "toHexString",
                "description": [
                  "Formats this Int value using the specified format."
                ],
                "code": [
                  "fun Int.toHexString(    format: HexFormat = HexFormat.Default): String"
                ]
              },
              {
                "name": "toUByte",
                "description": ["Converts this Int value to UByte."],
                "code": ["fun Int.toUByte(): UByte"]
              },
              {
                "name": "toUInt",
                "description": ["Converts this Int value to UInt."],
                "code": ["fun Int.toUInt(): UInt"]
              },
              {
                "name": "toULong",
                "description": ["Converts this Int value to ULong."],
                "code": ["fun Int.toULong(): ULong"]
              },
              {
                "name": "toUShort",
                "description": ["Converts this Int value to UShort."],
                "code": ["fun Int.toUShort(): UShort"]
              },
              {
                "name": "until",
                "description": [
                  "Returns a range from this value up to but excluding the specified to value."
                ],
                "code": [
                  "infix fun Int.until(to: Byte): IntRange",
                  "infix fun Int.until(to: Int): IntRange",
                  "infix fun Int.until(to: Long): LongRange",
                  "infix fun Int.until(to: Short): IntRange"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "IntArray",
        "description": [
          "An array of ints. When targeting the JVM, instances of this class are represented as int[]."
        ],
        "code": ["class IntArray"],
        "url": "-int-array/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Creates a new array of the specified size, where each element is calculated by calling the specified\ninit function.",
                  "Creates a new array of the specified size, with all elements initialized to zero."
                ],
                "code": [
                  "<init>(size: Int, init: (Int) -> Int)",
                  "<init>(size: Int)"
                ]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "size",
                "description": ["Returns the number of elements in the array."],
                "code": ["val size: Int"]
              }
            ]
          },
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "get",
                "description": [
                  "Returns the array element at the given index.  This method can be called using the index operator."
                ],
                "code": ["operator fun get(index: Int): Int"]
              },
              {
                "name": "iterator",
                "description": [
                  "Creates an iterator over the elements of the array."
                ],
                "code": ["operator fun iterator(): IntIterator"]
              },
              {
                "name": "set",
                "description": [
                  "Sets the element at the given index to the given value. This method can be called using the index operator."
                ],
                "code": ["operator fun set(index: Int, value: Int)"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "indices",
                "description": [
                  "Returns the range of valid indices for the array."
                ],
                "code": ["val IntArray.indices: IntRange"]
              },
              {
                "name": "lastIndex",
                "description": ["Returns the last valid index for the array."],
                "code": ["val IntArray.lastIndex: Int"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "all",
                "description": [
                  "Returns true if all elements match the given predicate."
                ],
                "code": [
                  "fun IntArray.all(predicate: (Int) -> Boolean): Boolean"
                ]
              },
              {
                "name": "any",
                "description": [
                  "Returns true if array has at least one element.",
                  "Returns true if at least one element matches the given predicate."
                ],
                "code": [
                  "fun IntArray.any(): Boolean",
                  "fun IntArray.any(predicate: (Int) -> Boolean): Boolean"
                ]
              },
              {
                "name": "asIterable",
                "description": [
                  "Creates an Iterable instance that wraps the original array returning its elements when being iterated."
                ],
                "code": ["fun IntArray.asIterable(): Iterable<Int>"]
              },
              {
                "name": "asSequence",
                "description": [
                  "Creates a Sequence instance that wraps the original array returning its elements when being iterated."
                ],
                "code": ["fun IntArray.asSequence(): Sequence<Int>"]
              },
              {
                "name": "associate",
                "description": [
                  "Returns a Map containing key-value pairs provided by transform function\napplied to elements of the given array."
                ],
                "code": [
                  "fun <K, V> IntArray.associate(    transform: (Int) -> Pair<K, V>): Map<K, V>"
                ]
              },
              {
                "name": "associateBy",
                "description": [
                  "Returns a Map containing the elements from the given array indexed by the key\nreturned from keySelector function applied to each element.",
                  "Returns a Map containing the values provided by valueTransform and indexed by keySelector functions applied to elements of the given array."
                ],
                "code": [
                  "fun <K> IntArray.associateBy(    keySelector: (Int) -> K): Map<K, Int>",
                  "fun <K, V> IntArray.associateBy(    keySelector: (Int) -> K,     valueTransform: (Int) -> V): Map<K, V>"
                ]
              },
              {
                "name": "associateByTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function applied to each element of the given array\nand value is the element itself.",
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function and\nand value is provided by the valueTransform function applied to elements of the given array."
                ],
                "code": [
                  "fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(    destination: M,     keySelector: (Int) -> K): M",
                  "fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(    destination: M,     keySelector: (Int) -> K,     valueTransform: (Int) -> V): M"
                ]
              },
              {
                "name": "associateTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs\nprovided by transform function applied to each element of the given array."
                ],
                "code": [
                  "fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(    destination: M,     transform: (Int) -> Pair<K, V>): M"
                ]
              },
              {
                "name": "associateWith",
                "description": [
                  "Returns a Map where keys are elements from the given array and values are\nproduced by the valueSelector function applied to each element."
                ],
                "code": [
                  "fun <V> IntArray.associateWith(    valueSelector: (Int) -> V): Map<Int, V>"
                ]
              },
              {
                "name": "associateWithTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs for each element of the given array,\nwhere key is the element itself and value is provided by the valueSelector function applied to that key."
                ],
                "code": [
                  "fun <V, M : MutableMap<in Int, in V>> IntArray.associateWithTo(    destination: M,     valueSelector: (Int) -> V): M"
                ]
              },
              {
                "name": "asUIntArray",
                "description": [
                  "Returns an array of type UIntArray, which is a view of this array where each element is an unsigned reinterpretation\nof the corresponding element of this array."
                ],
                "code": ["fun IntArray.asUIntArray(): UIntArray"]
              },
              {
                "name": "average",
                "description": [
                  "Returns an average value of elements in the array."
                ],
                "code": ["fun IntArray.average(): Double"]
              },
              {
                "name": "binarySearch",
                "description": [
                  "Searches the array or the range of the array for the provided element using the binary search algorithm.\nThe array is expected to be sorted, otherwise the result is undefined."
                ],
                "code": [
                  "fun IntArray.binarySearch(    element: Int,     fromIndex: Int = 0,     toIndex: Int = size): Int"
                ]
              },
              {
                "name": "component1",
                "description": ["Returns 1st element from the array."],
                "code": ["operator fun IntArray.component1(): Int"]
              },
              {
                "name": "component2",
                "description": ["Returns 2nd element from the array."],
                "code": ["operator fun IntArray.component2(): Int"]
              },
              {
                "name": "component3",
                "description": ["Returns 3rd element from the array."],
                "code": ["operator fun IntArray.component3(): Int"]
              },
              {
                "name": "component4",
                "description": ["Returns 4th element from the array."],
                "code": ["operator fun IntArray.component4(): Int"]
              },
              {
                "name": "component5",
                "description": ["Returns 5th element from the array."],
                "code": ["operator fun IntArray.component5(): Int"]
              },
              {
                "name": "contains",
                "description": [
                  "Returns true if element is found in the array."
                ],
                "code": [
                  "operator fun IntArray.contains(element: Int): Boolean"
                ]
              },
              {
                "name": "contentEquals",
                "description": [
                  "Returns true if the two specified arrays are structurally equal to one another,\ni.e. contain the same number of the same elements in the same order."
                ],
                "code": [
                  "infix fun IntArray.contentEquals(other: IntArray): Boolean"
                ]
              },
              {
                "name": "contentHashCode",
                "description": [
                  "Returns a hash code based on the contents of this array as if it is List."
                ],
                "code": ["fun IntArray.contentHashCode(): Int"]
              },
              {
                "name": "contentToString",
                "description": [
                  "Returns a string representation of the contents of the specified array as if it is List."
                ],
                "code": ["fun IntArray.contentToString(): String"]
              },
              {
                "name": "count",
                "description": [
                  "Returns the number of elements in this array.",
                  "Returns the number of elements matching the given predicate."
                ],
                "code": [
                  "fun IntArray.count(): Int",
                  "fun IntArray.count(predicate: (Int) -> Boolean): Int"
                ]
              },
              {
                "name": "distinct",
                "description": [
                  "Returns a list containing only distinct elements from the given array."
                ],
                "code": ["fun IntArray.distinct(): List<Int>"]
              },
              {
                "name": "distinctBy",
                "description": [
                  "Returns a list containing only elements from the given array\nhaving distinct keys returned by the given selector function."
                ],
                "code": [
                  "fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int>"
                ]
              },
              {
                "name": "drop",
                "description": [
                  "Returns a list containing all elements except first n elements."
                ],
                "code": ["fun IntArray.drop(n: Int): List<Int>"]
              },
              {
                "name": "dropLast",
                "description": [
                  "Returns a list containing all elements except last n elements."
                ],
                "code": ["fun IntArray.dropLast(n: Int): List<Int>"]
              },
              {
                "name": "dropLastWhile",
                "description": [
                  "Returns a list containing all elements except last elements that satisfy the given predicate."
                ],
                "code": [
                  "fun IntArray.dropLastWhile(    predicate: (Int) -> Boolean): List<Int>"
                ]
              },
              {
                "name": "dropWhile",
                "description": [
                  "Returns a list containing all elements except first elements that satisfy the given predicate."
                ],
                "code": [
                  "fun IntArray.dropWhile(    predicate: (Int) -> Boolean): List<Int>"
                ]
              },
              {
                "name": "elementAtOrElse",
                "description": [
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
                ],
                "code": [
                  "fun IntArray.elementAtOrElse(    index: Int,     defaultValue: (Int) -> Int): Int"
                ]
              },
              {
                "name": "elementAtOrNull",
                "description": [
                  "Returns an element at the given index or null if the index is out of bounds of this array."
                ],
                "code": ["fun IntArray.elementAtOrNull(index: Int): Int?"]
              },
              {
                "name": "filter",
                "description": [
                  "Returns a list containing only elements matching the given predicate."
                ],
                "code": [
                  "fun IntArray.filter(predicate: (Int) -> Boolean): List<Int>"
                ]
              },
              {
                "name": "filterIndexed",
                "description": [
                  "Returns a list containing only elements matching the given predicate."
                ],
                "code": [
                  "fun IntArray.filterIndexed(    predicate: (index: Int, Int) -> Boolean): List<Int>"
                ]
              },
              {
                "name": "filterIndexedTo",
                "description": [
                  "Appends all elements matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(    destination: C,     predicate: (index: Int, Int) -> Boolean): C"
                ]
              },
              {
                "name": "filterNot",
                "description": [
                  "Returns a list containing all elements not matching the given predicate."
                ],
                "code": [
                  "fun IntArray.filterNot(    predicate: (Int) -> Boolean): List<Int>"
                ]
              },
              {
                "name": "filterNotTo",
                "description": [
                  "Appends all elements not matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in Int>> IntArray.filterNotTo(    destination: C,     predicate: (Int) -> Boolean): C"
                ]
              },
              {
                "name": "filterTo",
                "description": [
                  "Appends all elements matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in Int>> IntArray.filterTo(    destination: C,     predicate: (Int) -> Boolean): C"
                ]
              },
              {
                "name": "find",
                "description": [
                  "Returns the first element matching the given predicate, or null if no such element was found."
                ],
                "code": ["fun IntArray.find(predicate: (Int) -> Boolean): Int?"]
              },
              {
                "name": "findLast",
                "description": [
                  "Returns the last element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun IntArray.findLast(predicate: (Int) -> Boolean): Int?"
                ]
              },
              {
                "name": "first",
                "description": [
                  "Returns the first element.",
                  "Returns the first element matching the given predicate."
                ],
                "code": [
                  "fun IntArray.first(): Int",
                  "fun IntArray.first(predicate: (Int) -> Boolean): Int"
                ]
              },
              {
                "name": "firstOrNull",
                "description": [
                  "Returns the first element, or null if the array is empty.",
                  "Returns the first element matching the given predicate, or null if element was not found."
                ],
                "code": [
                  "fun IntArray.firstOrNull(): Int?",
                  "fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int?"
                ]
              },
              {
                "name": "flatMap",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element of original array."
                ],
                "code": [
                  "fun <R> IntArray.flatMap(    transform: (Int) -> Iterable<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexed",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element\nand its index in the original array."
                ],
                "code": [
                  "fun <R> IntArray.flatMapIndexed(    transform: (index: Int, Int) -> Iterable<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexedTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each element\nand its index in the original array, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> IntArray.flatMapIndexedTo(    destination: C,     transform: (index: Int, Int) -> Iterable<R>): C"
                ]
              },
              {
                "name": "flatMapTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each element of original array, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(    destination: C,     transform: (Int) -> Iterable<R>): C"
                ]
              },
              {
                "name": "fold",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun <R> IntArray.fold(    initial: R,     operation: (acc: R, Int) -> R): R"
                ]
              },
              {
                "name": "foldIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element with its index in the original array."
                ],
                "code": [
                  "fun <R> IntArray.foldIndexed(    initial: R,     operation: (index: Int, acc: R, Int) -> R): R"
                ]
              },
              {
                "name": "foldRight",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun <R> IntArray.foldRight(    initial: R,     operation: (Int, acc: R) -> R): R"
                ]
              },
              {
                "name": "foldRightIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun <R> IntArray.foldRightIndexed(    initial: R,     operation: (index: Int, Int, acc: R) -> R): R"
                ]
              },
              {
                "name": "forEach",
                "description": ["Performs the given action on each element."],
                "code": ["fun IntArray.forEach(action: (Int) -> Unit)"]
              },
              {
                "name": "forEachIndexed",
                "description": [
                  "Performs the given action on each element, providing sequential index with the element."
                ],
                "code": [
                  "fun IntArray.forEachIndexed(    action: (index: Int, Int) -> Unit)"
                ]
              },
              {
                "name": "getOrElse",
                "description": [
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
                ],
                "code": [
                  "fun IntArray.getOrElse(    index: Int,     defaultValue: (Int) -> Int): Int"
                ]
              },
              {
                "name": "getOrNull",
                "description": [
                  "Returns an element at the given index or null if the index is out of bounds of this array."
                ],
                "code": ["fun IntArray.getOrNull(index: Int): Int?"]
              },
              {
                "name": "groupBy",
                "description": [
                  "Groups elements of the original array by the key returned by the given keySelector function\napplied to each element and returns a map where each group key is associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original array\nby the key returned by the given keySelector function applied to the element\nand returns a map where each group key is associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K> IntArray.groupBy(    keySelector: (Int) -> K): Map<K, List<Int>>",
                  "fun <K, V> IntArray.groupBy(    keySelector: (Int) -> K,     valueTransform: (Int) -> V): Map<K, List<V>>"
                ]
              },
              {
                "name": "groupByTo",
                "description": [
                  "Groups elements of the original array by the key returned by the given keySelector function\napplied to each element and puts to the destination map each group key associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original array\nby the key returned by the given keySelector function applied to the element\nand puts to the destination map each group key associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(    destination: M,     keySelector: (Int) -> K): M",
                  "fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(    destination: M,     keySelector: (Int) -> K,     valueTransform: (Int) -> V): M"
                ]
              },
              {
                "name": "indexOf",
                "description": [
                  "Returns first index of element, or -1 if the array does not contain element."
                ],
                "code": ["fun IntArray.indexOf(element: Int): Int"]
              },
              {
                "name": "indexOfFirst",
                "description": [
                  "Returns index of the first element matching the given predicate, or -1 if the array does not contain such element."
                ],
                "code": [
                  "fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int"
                ]
              },
              {
                "name": "indexOfLast",
                "description": [
                  "Returns index of the last element matching the given predicate, or -1 if the array does not contain such element."
                ],
                "code": [
                  "fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int"
                ]
              },
              {
                "name": "intersect",
                "description": [
                  "Returns a set containing all elements that are contained by both this array and the specified collection."
                ],
                "code": [
                  "infix fun IntArray.intersect(other: Iterable<Int>): Set<Int>"
                ]
              },
              {
                "name": "isEmpty",
                "description": ["Returns true if the array is empty."],
                "code": ["fun IntArray.isEmpty(): Boolean"]
              },
              {
                "name": "isNotEmpty",
                "description": ["Returns true if the array is not empty."],
                "code": ["fun IntArray.isNotEmpty(): Boolean"]
              },
              {
                "name": "joinTo",
                "description": [
                  "Appends the string from all the elements separated using separator and using the given prefix and postfix if supplied."
                ],
                "code": [
                  "fun <A : Appendable> IntArray.joinTo(    buffer: A,     separator: CharSequence = \", \",     prefix: CharSequence = \"\",     postfix: CharSequence = \"\",     limit: Int = -1,     truncated: CharSequence = \"...\",     transform: ((Int) -> CharSequence)? = null): A"
                ]
              },
              {
                "name": "joinToString",
                "description": [
                  "Creates a string from all the elements separated using separator and using the given prefix and postfix if supplied."
                ],
                "code": [
                  "fun IntArray.joinToString(    separator: CharSequence = \", \",     prefix: CharSequence = \"\",     postfix: CharSequence = \"\",     limit: Int = -1,     truncated: CharSequence = \"...\",     transform: ((Int) -> CharSequence)? = null): String"
                ]
              },
              {
                "name": "last",
                "description": [
                  "Returns the last element.",
                  "Returns the last element matching the given predicate."
                ],
                "code": [
                  "fun IntArray.last(): Int",
                  "fun IntArray.last(predicate: (Int) -> Boolean): Int"
                ]
              },
              {
                "name": "lastIndexOf",
                "description": [
                  "Returns last index of element, or -1 if the array does not contain element."
                ],
                "code": ["fun IntArray.lastIndexOf(element: Int): Int"]
              },
              {
                "name": "lastOrNull",
                "description": [
                  "Returns the last element, or null if the array is empty.",
                  "Returns the last element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun IntArray.lastOrNull(): Int?",
                  "fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int?"
                ]
              },
              {
                "name": "map",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each element in the original array."
                ],
                "code": ["fun <R> IntArray.map(transform: (Int) -> R): List<R>"]
              },
              {
                "name": "mapIndexed",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each element and its index in the original array."
                ],
                "code": [
                  "fun <R> IntArray.mapIndexed(    transform: (index: Int, Int) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexedTo",
                "description": [
                  "Applies the given transform function to each element and its index in the original array\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(    destination: C,     transform: (index: Int, Int) -> R): C"
                ]
              },
              {
                "name": "mapTo",
                "description": [
                  "Applies the given transform function to each element of the original array\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> IntArray.mapTo(    destination: C,     transform: (Int) -> R): C"
                ]
              },
              {
                "name": "maxByOrNull",
                "description": [
                  "Returns the first element yielding the largest value of the given function or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> IntArray.maxByOrNull(    selector: (Int) -> R): Int?"
                ]
              },
              {
                "name": "maxOf",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each element in the array."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.maxOf(    selector: (Int) -> R): R"
                ]
              },
              {
                "name": "maxOfOrNull",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.maxOfOrNull(    selector: (Int) -> R): R?"
                ]
              },
              {
                "name": "maxOfWith",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun <R> IntArray.maxOfWith(    comparator: Comparator<in R>,     selector: (Int) -> R): R"
                ]
              },
              {
                "name": "maxOfWithOrNull",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R> IntArray.maxOfWithOrNull(    comparator: Comparator<in R>,     selector: (Int) -> R): R?"
                ]
              },
              {
                "name": "maxOrNull",
                "description": [
                  "Returns the largest element or null if there are no elements."
                ],
                "code": ["fun IntArray.maxOrNull(): Int?"]
              },
              {
                "name": "maxWith",
                "description": [
                  "Returns the first element having the largest value according to the provided comparator."
                ],
                "code": [
                  "fun IntArray.maxWith(comparator: Comparator<in Int>): Int",
                  "fun IntArray.maxWith(comparator: Comparator<in Int>): Int?"
                ]
              },
              {
                "name": "maxWithOrNull",
                "description": [
                  "Returns the first element having the largest value according to the provided comparator or null if there are no elements."
                ],
                "code": [
                  "fun IntArray.maxWithOrNull(    comparator: Comparator<in Int>): Int?"
                ]
              },
              {
                "name": "minByOrNull",
                "description": [
                  "Returns the first element yielding the smallest value of the given function or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> IntArray.minByOrNull(    selector: (Int) -> R): Int?"
                ]
              },
              {
                "name": "minOf",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the array."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.minOf(    selector: (Int) -> R): R"
                ]
              },
              {
                "name": "minOfOrNull",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.minOfOrNull(    selector: (Int) -> R): R?"
                ]
              },
              {
                "name": "minOfWith",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun <R> IntArray.minOfWith(    comparator: Comparator<in R>,     selector: (Int) -> R): R"
                ]
              },
              {
                "name": "minOfWithOrNull",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R> IntArray.minOfWithOrNull(    comparator: Comparator<in R>,     selector: (Int) -> R): R?"
                ]
              },
              {
                "name": "minOrNull",
                "description": [
                  "Returns the smallest element or null if there are no elements."
                ],
                "code": ["fun IntArray.minOrNull(): Int?"]
              },
              {
                "name": "minWith",
                "description": [
                  "Returns the first element having the smallest value according to the provided comparator."
                ],
                "code": [
                  "fun IntArray.minWith(comparator: Comparator<in Int>): Int",
                  "fun IntArray.minWith(comparator: Comparator<in Int>): Int?"
                ]
              },
              {
                "name": "minWithOrNull",
                "description": [
                  "Returns the first element having the smallest value according to the provided comparator or null if there are no elements."
                ],
                "code": [
                  "fun IntArray.minWithOrNull(    comparator: Comparator<in Int>): Int?"
                ]
              },
              {
                "name": "none",
                "description": [
                  "Returns true if the array has no elements.",
                  "Returns true if no elements match the given predicate."
                ],
                "code": [
                  "fun IntArray.none(): Boolean",
                  "fun IntArray.none(predicate: (Int) -> Boolean): Boolean"
                ]
              },
              {
                "name": "onEach",
                "description": [
                  "Performs the given action on each element and returns the array itself afterwards."
                ],
                "code": ["fun IntArray.onEach(action: (Int) -> Unit): IntArray"]
              },
              {
                "name": "onEachIndexed",
                "description": [
                  "Performs the given action on each element, providing sequential index with the element,\nand returns the array itself afterwards."
                ],
                "code": [
                  "fun IntArray.onEachIndexed(    action: (index: Int, Int) -> Unit): IntArray"
                ]
              },
              {
                "name": "partition",
                "description": [
                  "Splits the original array into pair of lists,\nwhere first list contains elements for which predicate yielded true,\nwhile second list contains elements for which predicate yielded false."
                ],
                "code": [
                  "fun IntArray.partition(    predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>>"
                ]
              },
              {
                "name": "random",
                "description": [
                  "Returns a random element from this array.",
                  "Returns a random element from this array using the specified source of randomness."
                ],
                "code": [
                  "fun IntArray.random(): Int",
                  "fun IntArray.random(random: Random): Int"
                ]
              },
              {
                "name": "randomOrNull",
                "description": [
                  "Returns a random element from this array, or null if this array is empty.",
                  "Returns a random element from this array using the specified source of randomness, or null if this array is empty."
                ],
                "code": [
                  "fun IntArray.randomOrNull(): Int?",
                  "fun IntArray.randomOrNull(random: Random): Int?"
                ]
              },
              {
                "name": "reduce",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int"
                ]
              },
              {
                "name": "reduceIndexed",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original array."
                ],
                "code": [
                  "fun IntArray.reduceIndexed(    operation: (index: Int, acc: Int, Int) -> Int): Int"
                ]
              },
              {
                "name": "reduceIndexedOrNull",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original array."
                ],
                "code": [
                  "fun IntArray.reduceIndexedOrNull(    operation: (index: Int, acc: Int, Int) -> Int): Int?"
                ]
              },
              {
                "name": "reduceOrNull",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun IntArray.reduceOrNull(    operation: (acc: Int, Int) -> Int): Int?"
                ]
              },
              {
                "name": "reduceRight",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun IntArray.reduceRight(    operation: (Int, acc: Int) -> Int): Int"
                ]
              },
              {
                "name": "reduceRightIndexed",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun IntArray.reduceRightIndexed(    operation: (index: Int, Int, acc: Int) -> Int): Int"
                ]
              },
              {
                "name": "reduceRightIndexedOrNull",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun IntArray.reduceRightIndexedOrNull(    operation: (index: Int, Int, acc: Int) -> Int): Int?"
                ]
              },
              {
                "name": "reduceRightOrNull",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun IntArray.reduceRightOrNull(    operation: (Int, acc: Int) -> Int): Int?"
                ]
              },
              {
                "name": "refTo",
                "description": [],
                "code": ["fun IntArray.refTo(index: Int): CValuesRef<IntVar>"]
              },
              {
                "name": "reverse",
                "description": [
                  "Reverses elements in the array in-place.",
                  "Reverses elements of the array in the specified range in-place."
                ],
                "code": [
                  "fun IntArray.reverse()",
                  "fun IntArray.reverse(fromIndex: Int, toIndex: Int)"
                ]
              },
              {
                "name": "reversed",
                "description": [
                  "Returns a list with elements in reversed order."
                ],
                "code": ["fun IntArray.reversed(): List<Int>"]
              },
              {
                "name": "reversedArray",
                "description": [
                  "Returns an array with elements of this array in reversed order."
                ],
                "code": ["fun IntArray.reversedArray(): IntArray"]
              },
              {
                "name": "runningFold",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> IntArray.runningFold(    initial: R,     operation: (acc: R, Int) -> R): List<R>"
                ]
              },
              {
                "name": "runningFoldIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> IntArray.runningFoldIndexed(    initial: R,     operation: (index: Int, acc: R, Int) -> R): List<R>"
                ]
              },
              {
                "name": "runningReduce",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with the first element of this array."
                ],
                "code": [
                  "fun IntArray.runningReduce(    operation: (acc: Int, Int) -> Int): List<Int>"
                ]
              },
              {
                "name": "runningReduceIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with the first element of this array."
                ],
                "code": [
                  "fun IntArray.runningReduceIndexed(    operation: (index: Int, acc: Int, Int) -> Int): List<Int>"
                ]
              },
              {
                "name": "scan",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> IntArray.scan(    initial: R,     operation: (acc: R, Int) -> R): List<R>"
                ]
              },
              {
                "name": "scanIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> IntArray.scanIndexed(    initial: R,     operation: (index: Int, acc: R, Int) -> R): List<R>"
                ]
              },
              {
                "name": "shuffle",
                "description": [
                  "Randomly shuffles elements in this array in-place.",
                  "Randomly shuffles elements in this array in-place using the specified random instance as the source of randomness."
                ],
                "code": [
                  "fun IntArray.shuffle()",
                  "fun IntArray.shuffle(random: Random)"
                ]
              },
              {
                "name": "single",
                "description": [
                  "Returns the single element, or throws an exception if the array is empty or has more than one element.",
                  "Returns the single element matching the given predicate, or throws exception if there is no or more than one matching element."
                ],
                "code": [
                  "fun IntArray.single(): Int",
                  "fun IntArray.single(predicate: (Int) -> Boolean): Int"
                ]
              },
              {
                "name": "singleOrNull",
                "description": [
                  "Returns single element, or null if the array is empty or has more than one element.",
                  "Returns the single element matching the given predicate, or null if element was not found or more than one element was found."
                ],
                "code": [
                  "fun IntArray.singleOrNull(): Int?",
                  "fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int?"
                ]
              },
              {
                "name": "slice",
                "description": [
                  "Returns a list containing elements at indices in the specified indices range.",
                  "Returns a list containing elements at specified indices."
                ],
                "code": [
                  "fun IntArray.slice(indices: IntRange): List<Int>",
                  "fun IntArray.slice(indices: Iterable<Int>): List<Int>"
                ]
              },
              {
                "name": "sliceArray",
                "description": [
                  "Returns an array containing elements of this array at specified indices.",
                  "Returns an array containing elements at indices in the specified indices range."
                ],
                "code": [
                  "fun IntArray.sliceArray(indices: Collection<Int>): IntArray",
                  "fun IntArray.sliceArray(indices: IntRange): IntArray"
                ]
              },
              {
                "name": "sort",
                "description": [
                  "Sorts the array in-place according to the order specified by the given comparison function."
                ],
                "code": [
                  "fun IntArray.sort(comparison: (a: Int, b: Int) -> Int)"
                ]
              },
              {
                "name": "sortDescending",
                "description": [
                  "Sorts elements in the array in-place descending according to their natural sort order.",
                  "Sorts elements of the array in the specified range in-place.\nThe elements are sorted descending according to their natural sort order."
                ],
                "code": [
                  "fun IntArray.sortDescending()",
                  "fun IntArray.sortDescending(fromIndex: Int, toIndex: Int)"
                ]
              },
              {
                "name": "sorted",
                "description": [
                  "Returns a list of all elements sorted according to their natural sort order."
                ],
                "code": ["fun IntArray.sorted(): List<Int>"]
              },
              {
                "name": "sortedArray",
                "description": [
                  "Returns an array with all elements of this array sorted according to their natural sort order."
                ],
                "code": ["fun IntArray.sortedArray(): IntArray"]
              },
              {
                "name": "sortedArrayDescending",
                "description": [
                  "Returns an array with all elements of this array sorted descending according to their natural sort order."
                ],
                "code": ["fun IntArray.sortedArrayDescending(): IntArray"]
              },
              {
                "name": "sortedBy",
                "description": [
                  "Returns a list of all elements sorted according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <R : Comparable<R>> IntArray.sortedBy(    selector: (Int) -> R?): List<Int>"
                ]
              },
              {
                "name": "sortedByDescending",
                "description": [
                  "Returns a list of all elements sorted descending according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <R : Comparable<R>> IntArray.sortedByDescending(    selector: (Int) -> R?): List<Int>"
                ]
              },
              {
                "name": "sortedDescending",
                "description": [
                  "Returns a list of all elements sorted descending according to their natural sort order."
                ],
                "code": ["fun IntArray.sortedDescending(): List<Int>"]
              },
              {
                "name": "sortedWith",
                "description": [
                  "Returns a list of all elements sorted according to the specified comparator."
                ],
                "code": [
                  "fun IntArray.sortedWith(    comparator: Comparator<in Int>): List<Int>"
                ]
              },
              {
                "name": "subtract",
                "description": [
                  "Returns a set containing all elements that are contained by this array and not contained by the specified collection."
                ],
                "code": [
                  "infix fun IntArray.subtract(other: Iterable<Int>): Set<Int>"
                ]
              },
              {
                "name": "sum",
                "description": [
                  "Returns the sum of all elements in the array."
                ],
                "code": ["fun IntArray.sum(): Int"]
              },
              {
                "name": "sumBy",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array."
                ],
                "code": ["fun IntArray.sumBy(selector: (Int) -> Int): Int"]
              },
              {
                "name": "sumByDouble",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun IntArray.sumByDouble(selector: (Int) -> Double): Double"
                ]
              },
              {
                "name": "sumOf",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun IntArray.sumOf(selector: (Int) -> Double): Double",
                  "fun IntArray.sumOf(selector: (Int) -> Int): Int",
                  "fun IntArray.sumOf(selector: (Int) -> Long): Long",
                  "fun IntArray.sumOf(selector: (Int) -> UInt): UInt",
                  "fun IntArray.sumOf(selector: (Int) -> ULong): ULong",
                  "fun IntArray.sumOf(selector: (Int) -> BigDecimal): BigDecimal",
                  "fun IntArray.sumOf(selector: (Int) -> BigInteger): BigInteger"
                ]
              },
              {
                "name": "take",
                "description": ["Returns a list containing first n elements."],
                "code": ["fun IntArray.take(n: Int): List<Int>"]
              },
              {
                "name": "takeLast",
                "description": ["Returns a list containing last n elements."],
                "code": ["fun IntArray.takeLast(n: Int): List<Int>"]
              },
              {
                "name": "takeLastWhile",
                "description": [
                  "Returns a list containing last elements satisfying the given predicate."
                ],
                "code": [
                  "fun IntArray.takeLastWhile(    predicate: (Int) -> Boolean): List<Int>"
                ]
              },
              {
                "name": "takeWhile",
                "description": [
                  "Returns a list containing first elements satisfying the given predicate."
                ],
                "code": [
                  "fun IntArray.takeWhile(    predicate: (Int) -> Boolean): List<Int>"
                ]
              },
              {
                "name": "toCollection",
                "description": [
                  "Appends all elements to the given destination collection."
                ],
                "code": [
                  "fun <C : MutableCollection<in Int>> IntArray.toCollection(    destination: C): C"
                ]
              },
              {
                "name": "toCValues",
                "description": [],
                "code": ["fun IntArray.toCValues(): CValues<IntVar>"]
              },
              {
                "name": "toHashSet",
                "description": ["Returns a new HashSet of all elements."],
                "code": ["fun IntArray.toHashSet(): HashSet<Int>"]
              },
              {
                "name": "toList",
                "description": ["Returns a List containing all elements."],
                "code": ["fun IntArray.toList(): List<Int>"]
              },
              {
                "name": "toMutableList",
                "description": [
                  "Returns a new MutableList filled with all elements of this array."
                ],
                "code": ["fun IntArray.toMutableList(): MutableList<Int>"]
              },
              {
                "name": "toMutableSet",
                "description": [
                  "Returns a new MutableSet containing all distinct elements from the given array."
                ],
                "code": ["fun IntArray.toMutableSet(): MutableSet<Int>"]
              },
              {
                "name": "toSet",
                "description": ["Returns a Set of all elements."],
                "code": ["fun IntArray.toSet(): Set<Int>"]
              },
              {
                "name": "toSortedSet",
                "description": ["Returns a new SortedSet of all elements."],
                "code": ["fun IntArray.toSortedSet(): SortedSet<Int>"]
              },
              {
                "name": "toUIntArray",
                "description": [
                  "Returns an array of type UIntArray, which is a copy of this array where each element is an unsigned reinterpretation\nof the corresponding element of this array."
                ],
                "code": ["fun IntArray.toUIntArray(): UIntArray"]
              },
              {
                "name": "union",
                "description": [
                  "Returns a set containing all distinct elements from both collections."
                ],
                "code": [
                  "infix fun IntArray.union(other: Iterable<Int>): Set<Int>"
                ]
              },
              {
                "name": "withIndex",
                "description": [
                  "Returns a lazy Iterable that wraps each element of the original array\ninto an IndexedValue containing the index of that element and the element itself."
                ],
                "code": [
                  "fun IntArray.withIndex(): Iterable<IndexedValue<Int>>"
                ]
              },
              {
                "name": "zip",
                "description": [
                  "Returns a list of pairs built from the elements of this array and the other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of pairs built from the elements of this collection and other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other collection with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest array."
                ],
                "code": [
                  "infix fun <R> any_array<R>.zip(    other: Array<out R>): List<Pair<Int, R>>",
                  "fun <R, V> IntArray.zip(    other: Array<out R>,     transform: (a: Int, b: R) -> V): List<V>",
                  "infix fun <R> IntArray.zip(    other: Iterable<R>): List<Pair<Int, R>>",
                  "fun <R, V> IntArray.zip(    other: Iterable<R>,     transform: (a: Int, b: R) -> V): List<V>",
                  "fun <V> IntArray.zip(    other: IntArray,     transform: (a: Int, b: Int) -> V): List<V>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "KotlinVersion",
        "description": ["Represents a version of the Kotlin standard library."],
        "code": ["class KotlinVersion : Comparable<KotlinVersion>"],
        "url": "-kotlin-version/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Creates a version from major and minor components, leaving patch component zero.",
                  "Creates a version from all three components."
                ],
                "code": [
                  "KotlinVersion(major: Int, minor: Int)",
                  "KotlinVersion(major: Int, minor: Int, patch: Int)"
                ]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "major",
                "description": [],
                "code": ["val major: Int"]
              },
              {
                "name": "minor",
                "description": [],
                "code": ["val minor: Int"]
              },
              { "name": "patch", "description": [], "code": ["val patch: Int"] }
            ]
          },
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "compareTo",
                "description": [],
                "code": ["fun compareTo(other: KotlinVersion): Int"]
              },
              {
                "name": "equals",
                "description": [
                  "Indicates whether some other object is \"equal to\" this one. Implementations must fulfil the following\nrequirements:"
                ],
                "code": ["fun equals(other: Any?): Boolean"]
              },
              {
                "name": "hashCode",
                "description": [
                  "Returns a hash code value for the object.  The general contract of hashCode is:"
                ],
                "code": ["fun hashCode(): Int"]
              },
              {
                "name": "isAtLeast",
                "description": [
                  "Returns true if this version is not less than the version specified\nwith the provided major and minor components.",
                  "Returns true if this version is not less than the version specified\nwith the provided major, minor and patch components."
                ],
                "code": [
                  "fun isAtLeast(major: Int, minor: Int): Boolean",
                  "fun isAtLeast(major: Int, minor: Int, patch: Int): Boolean"
                ]
              },
              {
                "name": "toString",
                "description": [
                  "Returns the string representation of this version"
                ],
                "code": ["fun toString(): String"]
              }
            ]
          },
          {
            "name": "Companion Object Properties",
            "declarations": [
              {
                "name": "CURRENT",
                "description": [
                  "Returns the current version of the Kotlin standard library."
                ],
                "code": ["val CURRENT: KotlinVersion"]
              },
              {
                "name": "MAX_COMPONENT_VALUE",
                "description": [
                  "Maximum value a version component can have, a constant value 255."
                ],
                "code": ["const val MAX_COMPONENT_VALUE: Int"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "coerceAtLeast",
                "description": [
                  "Ensures that this value is not less than the specified minimumValue."
                ],
                "code": [
                  "fun <T : Comparable<T>> T.coerceAtLeast(minimumValue: T): T"
                ]
              },
              {
                "name": "coerceAtMost",
                "description": [
                  "Ensures that this value is not greater than the specified maximumValue."
                ],
                "code": [
                  "fun <T : Comparable<T>> T.coerceAtMost(maximumValue: T): T"
                ]
              },
              {
                "name": "coerceIn",
                "description": [
                  "Ensures that this value lies in the specified range minimumValue..maximumValue.",
                  "Ensures that this value lies in the specified range."
                ],
                "code": [
                  "fun <T : Comparable<T>> T.coerceIn(    minimumValue: T?,     maximumValue: T?): T",
                  "fun <T : Comparable<T>> T.coerceIn(    range: ClosedFloatingPointRange<T>): T",
                  "fun <T : Comparable<T>> T.coerceIn(range: ClosedRange<T>): T"
                ]
              },
              {
                "name": "compareTo",
                "description": [
                  "Compares this object with the specified object for order. Returns zero if this object is equal\nto the specified other object, a negative number if it's less than other, or a positive number\nif it's greater than other."
                ],
                "code": ["infix fun <T> Comparable<T>.compareTo(other: T): Int"]
              },
              {
                "name": "rangeTo",
                "description": [
                  "Creates a range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeTo(    that: T): ClosedRange<T>"
                ]
              },
              {
                "name": "rangeUntil",
                "description": [
                  "Creates an open-ended range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeUntil(    that: T): OpenEndRange<T>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "Lazy",
        "description": ["Represents a value with lazy initialization."],
        "code": ["interface Lazy<out T>"],
        "url": "-lazy/index.html",
        "subcategories": [
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "value",
                "description": [
                  "Gets the lazily initialized value of the current Lazy instance.\nOnce the value was initialized it must not change during the rest of lifetime of this Lazy instance."
                ],
                "code": ["abstract val value: T"]
              }
            ]
          },
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "isInitialized",
                "description": [
                  "Returns true if a value for this Lazy instance has been already initialized, and false otherwise.\nOnce this function has returned true it stays true for the rest of lifetime of this Lazy instance."
                ],
                "code": ["abstract fun isInitialized(): Boolean"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "getValue",
                "description": [
                  "An extension to delegate a read-only property of type T to an instance of Lazy."
                ],
                "code": [
                  "operator fun <T> Lazy<T>.getValue(    thisRef: Any?,     property: KProperty<*>): T"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "LazyThreadSafetyMode",
        "description": [
          "Specifies how a Lazy instance synchronizes initialization among multiple threads."
        ],
        "code": ["enum class LazyThreadSafetyMode"],
        "url": "-lazy-thread-safety-mode/index.html",
        "subcategories": [
          {
            "name": "Enum Values",
            "declarations": [
              {
                "name": "SYNCHRONIZED",
                "description": [
                  "Locks are used to ensure that only a single thread can initialize the Lazy instance."
                ],
                "code": []
              },
              {
                "name": "PUBLICATION",
                "description": [
                  "Initializer function can be called several times on concurrent access to uninitialized Lazy instance value,\nbut only the first returned value will be used as the value of Lazy instance."
                ],
                "code": []
              },
              {
                "name": "NONE",
                "description": [
                  "No locks are used to synchronize an access to the Lazy instance value; if the instance is accessed from multiple threads, its behavior is undefined."
                ],
                "code": []
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "coerceAtLeast",
                "description": [
                  "Ensures that this value is not less than the specified minimumValue."
                ],
                "code": [
                  "fun <T : Comparable<T>> T.coerceAtLeast(minimumValue: T): T"
                ]
              },
              {
                "name": "coerceAtMost",
                "description": [
                  "Ensures that this value is not greater than the specified maximumValue."
                ],
                "code": [
                  "fun <T : Comparable<T>> T.coerceAtMost(maximumValue: T): T"
                ]
              },
              {
                "name": "coerceIn",
                "description": [
                  "Ensures that this value lies in the specified range minimumValue..maximumValue.",
                  "Ensures that this value lies in the specified range."
                ],
                "code": [
                  "fun <T : Comparable<T>> T.coerceIn(    minimumValue: T?,     maximumValue: T?): T",
                  "fun <T : Comparable<T>> T.coerceIn(    range: ClosedFloatingPointRange<T>): T",
                  "fun <T : Comparable<T>> T.coerceIn(range: ClosedRange<T>): T"
                ]
              },
              {
                "name": "compareTo",
                "description": [
                  "Compares this object with the specified object for order. Returns zero if this object is equal\nto the specified other object, a negative number if it's less than other, or a positive number\nif it's greater than other."
                ],
                "code": ["infix fun <T> Comparable<T>.compareTo(other: T): Int"]
              },
              {
                "name": "rangeTo",
                "description": [
                  "Creates a range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeTo(    that: T): ClosedRange<T>"
                ]
              },
              {
                "name": "rangeUntil",
                "description": [
                  "Creates an open-ended range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeUntil(    that: T): OpenEndRange<T>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "Long",
        "description": [
          "Represents a 64-bit signed integer.\nOn the JVM, non-nullable values of this type are represented as values of the primitive type long."
        ],
        "code": ["class Long : Number, Comparable<Long>"],
        "url": "-long/index.html",
        "subcategories": [
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "and",
                "description": [
                  "Performs a bitwise AND operation between the two values."
                ],
                "code": ["infix fun and(other: Long): Long"]
              },
              {
                "name": "compareTo",
                "description": [
                  "Compares this value with the specified value for order.\nReturns zero if this value is equal to the specified other value, a negative number if it's less than other,\nor a positive number if it's greater than other."
                ],
                "code": [
                  "operator fun compareTo(other: Byte): Int",
                  "operator fun compareTo(other: Short): Int",
                  "operator fun compareTo(other: Int): Int",
                  "operator fun compareTo(other: Long): Int",
                  "operator fun compareTo(other: Float): Int",
                  "operator fun compareTo(other: Double): Int"
                ]
              },
              {
                "name": "dec",
                "description": ["Returns this value decremented by one."],
                "code": ["operator fun dec(): Long"]
              },
              {
                "name": "div",
                "description": [
                  "Divides this value by the other value, truncating the result to an integer that is closer to zero.",
                  "Divides this value by the other value."
                ],
                "code": [
                  "operator fun div(other: Byte): Long",
                  "operator fun div(other: Short): Long",
                  "operator fun div(other: Int): Long",
                  "operator fun div(other: Long): Long",
                  "operator fun div(other: Float): Float",
                  "operator fun div(other: Double): Double"
                ]
              },
              {
                "name": "equals",
                "description": [
                  "Indicates whether some other object is \"equal to\" this one. Implementations must fulfil the following\nrequirements:"
                ],
                "code": [
                  "fun equals(other: Long): Boolean",
                  "fun equals(other: Any?): Boolean"
                ]
              },
              {
                "name": "hashCode",
                "description": [
                  "Returns a hash code value for the object.  The general contract of hashCode is:"
                ],
                "code": ["fun hashCode(): Int"]
              },
              {
                "name": "inc",
                "description": ["Returns this value incremented by one."],
                "code": ["operator fun inc(): Long"]
              },
              {
                "name": "inv",
                "description": ["Inverts the bits in this value."],
                "code": ["fun inv(): Long"]
              },
              {
                "name": "minus",
                "description": ["Subtracts the other value from this value."],
                "code": [
                  "operator fun minus(other: Byte): Long",
                  "operator fun minus(other: Short): Long",
                  "operator fun minus(other: Int): Long",
                  "operator fun minus(other: Long): Long",
                  "operator fun minus(other: Float): Float",
                  "operator fun minus(other: Double): Double"
                ]
              },
              {
                "name": "or",
                "description": [
                  "Performs a bitwise OR operation between the two values."
                ],
                "code": ["infix fun or(other: Long): Long"]
              },
              {
                "name": "plus",
                "description": ["Adds the other value to this value."],
                "code": [
                  "operator fun plus(other: Byte): Long",
                  "operator fun plus(other: Short): Long",
                  "operator fun plus(other: Int): Long",
                  "operator fun plus(other: Long): Long",
                  "operator fun plus(other: Float): Float",
                  "operator fun plus(other: Double): Double"
                ]
              },
              {
                "name": "rangeTo",
                "description": [
                  "Creates a range from this value to the specified other value."
                ],
                "code": [
                  "operator fun rangeTo(other: Byte): LongRange",
                  "operator fun rangeTo(other: Short): LongRange",
                  "operator fun rangeTo(other: Int): LongRange",
                  "operator fun rangeTo(other: Long): LongRange"
                ]
              },
              {
                "name": "rangeUntil",
                "description": [
                  "Creates a range from this value up to but excluding the specified other value."
                ],
                "code": [
                  "operator fun rangeUntil(other: Byte): LongRange",
                  "operator fun rangeUntil(other: Short): LongRange",
                  "operator fun rangeUntil(other: Int): LongRange",
                  "operator fun rangeUntil(other: Long): LongRange"
                ]
              },
              {
                "name": "rem",
                "description": [
                  "Calculates the remainder of truncating division of this value (dividend) by the other value (divisor)."
                ],
                "code": [
                  "operator fun rem(other: Byte): Long",
                  "operator fun rem(other: Short): Long",
                  "operator fun rem(other: Int): Long",
                  "operator fun rem(other: Long): Long",
                  "operator fun rem(other: Float): Float",
                  "operator fun rem(other: Double): Double"
                ]
              },
              {
                "name": "shl",
                "description": [
                  "Shifts this value left by the bitCount number of bits."
                ],
                "code": ["infix fun shl(bitCount: Int): Long"]
              },
              {
                "name": "shr",
                "description": [
                  "Shifts this value right by the bitCount number of bits, filling the leftmost bits with copies of the sign bit."
                ],
                "code": ["infix fun shr(bitCount: Int): Long"]
              },
              {
                "name": "times",
                "description": ["Multiplies this value by the other value."],
                "code": [
                  "operator fun times(other: Byte): Long",
                  "operator fun times(other: Short): Long",
                  "operator fun times(other: Int): Long",
                  "operator fun times(other: Long): Long",
                  "operator fun times(other: Float): Float",
                  "operator fun times(other: Double): Double"
                ]
              },
              {
                "name": "toByte",
                "description": ["Converts this Long value to Byte."],
                "code": ["fun toByte(): Byte"]
              },
              {
                "name": "toChar",
                "description": ["Converts this Long value to Char."],
                "code": ["fun toChar(): Char"]
              },
              {
                "name": "toDouble",
                "description": ["Converts this Long value to Double."],
                "code": ["fun toDouble(): Double"]
              },
              {
                "name": "toFloat",
                "description": ["Converts this Long value to Float."],
                "code": ["fun toFloat(): Float"]
              },
              {
                "name": "toInt",
                "description": ["Converts this Long value to Int."],
                "code": ["fun toInt(): Int"]
              },
              {
                "name": "toLong",
                "description": ["Returns this value."],
                "code": ["fun toLong(): Long"]
              },
              {
                "name": "toShort",
                "description": ["Converts this Long value to Short."],
                "code": ["fun toShort(): Short"]
              },
              {
                "name": "toString",
                "description": [
                  "Returns a string representation of the object."
                ],
                "code": ["fun toString(): String"]
              },
              {
                "name": "unaryMinus",
                "description": ["Returns the negative of this value."],
                "code": ["operator fun unaryMinus(): Long"]
              },
              {
                "name": "unaryPlus",
                "description": ["Returns this value."],
                "code": ["operator fun unaryPlus(): Long"]
              },
              {
                "name": "ushr",
                "description": [
                  "Shifts this value right by the bitCount number of bits, filling the leftmost bits with zeros."
                ],
                "code": ["infix fun ushr(bitCount: Int): Long"]
              },
              {
                "name": "xor",
                "description": [
                  "Performs a bitwise XOR operation between the two values."
                ],
                "code": ["infix fun xor(other: Long): Long"]
              }
            ]
          },
          {
            "name": "Companion Object Properties",
            "declarations": [
              {
                "name": "MAX_VALUE",
                "description": [
                  "A constant holding the maximum value an instance of Long can have."
                ],
                "code": ["const val MAX_VALUE: Long"]
              },
              {
                "name": "MIN_VALUE",
                "description": [
                  "A constant holding the minimum value an instance of Long can have."
                ],
                "code": ["const val MIN_VALUE: Long"]
              },
              {
                "name": "SIZE_BITS",
                "description": [
                  "The number of bits used to represent an instance of Long in a binary form."
                ],
                "code": ["const val SIZE_BITS: Int"]
              },
              {
                "name": "SIZE_BYTES",
                "description": [
                  "The number of bytes used to represent an instance of Long in a binary form."
                ],
                "code": ["const val SIZE_BYTES: Int"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "days",
                "description": [
                  "Returns a Duration equal to this Long number of days."
                ],
                "code": ["val Long.days: Duration"]
              },
              {
                "name": "hours",
                "description": [
                  "Returns a Duration equal to this Long number of hours."
                ],
                "code": ["val Long.hours: Duration"]
              },
              {
                "name": "microseconds",
                "description": [
                  "Returns a Duration equal to this Long number of microseconds."
                ],
                "code": ["val Long.microseconds: Duration"]
              },
              {
                "name": "milliseconds",
                "description": [
                  "Returns a Duration equal to this Long number of milliseconds."
                ],
                "code": ["val Long.milliseconds: Duration"]
              },
              {
                "name": "minutes",
                "description": [
                  "Returns a Duration equal to this Long number of minutes."
                ],
                "code": ["val Long.minutes: Duration"]
              },
              {
                "name": "nanoseconds",
                "description": [
                  "Returns a Duration equal to this Long number of nanoseconds."
                ],
                "code": ["val Long.nanoseconds: Duration"]
              },
              {
                "name": "seconds",
                "description": [
                  "Returns a Duration equal to this Long number of seconds."
                ],
                "code": ["val Long.seconds: Duration"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "coerceAtLeast",
                "description": [
                  "Ensures that this value is not less than the specified minimumValue."
                ],
                "code": [
                  "fun Long.coerceAtLeast(minimumValue: Long): Long",
                  "fun <T : Comparable<T>> T.coerceAtLeast(minimumValue: T): T"
                ]
              },
              {
                "name": "coerceAtMost",
                "description": [
                  "Ensures that this value is not greater than the specified maximumValue."
                ],
                "code": [
                  "fun Long.coerceAtMost(maximumValue: Long): Long",
                  "fun <T : Comparable<T>> T.coerceAtMost(maximumValue: T): T"
                ]
              },
              {
                "name": "coerceIn",
                "description": [
                  "Ensures that this value lies in the specified range minimumValue..maximumValue.",
                  "Ensures that this value lies in the specified range."
                ],
                "code": [
                  "fun Long.coerceIn(    minimumValue: Long,     maximumValue: Long): Long",
                  "fun <T : Comparable<T>> T.coerceIn(    minimumValue: T?,     maximumValue: T?): T",
                  "fun Long.coerceIn(range: ClosedRange<Long>): Long",
                  "fun <T : Comparable<T>> T.coerceIn(    range: ClosedFloatingPointRange<T>): T",
                  "fun <T : Comparable<T>> T.coerceIn(range: ClosedRange<T>): T"
                ]
              },
              {
                "name": "compareTo",
                "description": [
                  "Compares this object with the specified object for order. Returns zero if this object is equal\nto the specified other object, a negative number if it's less than other, or a positive number\nif it's greater than other."
                ],
                "code": ["infix fun <T> Comparable<T>.compareTo(other: T): Int"]
              },
              {
                "name": "convert",
                "description": [],
                "code": ["fun <R : Any> Long.convert(): R"]
              },
              {
                "name": "downTo",
                "description": [
                  "Returns a progression from this value down to the specified to value with the step -1."
                ],
                "code": [
                  "infix fun Long.downTo(to: Byte): LongProgression",
                  "infix fun Long.downTo(to: Int): LongProgression",
                  "infix fun Long.downTo(to: Long): LongProgression",
                  "infix fun Long.downTo(to: Short): LongProgression"
                ]
              },
              {
                "name": "floorDiv",
                "description": [
                  "Divides this value by the other value, flooring the result to an integer that is closer to negative infinity."
                ],
                "code": [
                  "fun Long.floorDiv(other: Byte): Long",
                  "fun Long.floorDiv(other: Short): Long",
                  "fun Long.floorDiv(other: Int): Long",
                  "fun Long.floorDiv(other: Long): Long"
                ]
              },
              {
                "name": "mod",
                "description": [
                  "Calculates the remainder of flooring division of this value (dividend) by the other value (divisor)."
                ],
                "code": [
                  "fun Long.mod(other: Byte): Byte",
                  "fun Long.mod(other: Short): Short",
                  "fun Long.mod(other: Int): Int",
                  "fun Long.mod(other: Long): Long"
                ]
              },
              {
                "name": "narrow",
                "description": [],
                "code": ["fun <R : Number> Number.narrow(): R"]
              },
              {
                "name": "rangeTo",
                "description": [
                  "Creates a range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeTo(    that: T): ClosedRange<T>"
                ]
              },
              {
                "name": "rangeUntil",
                "description": [
                  "Creates an open-ended range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeUntil(    that: T): OpenEndRange<T>"
                ]
              },
              {
                "name": "signExtend",
                "description": [],
                "code": ["fun <R : Number> Number.signExtend(): R"]
              },
              {
                "name": "toBigDecimal",
                "description": [
                  "Returns the value of this Long number as a BigDecimal."
                ],
                "code": [
                  "fun Long.toBigDecimal(): BigDecimal",
                  "fun Long.toBigDecimal(mathContext: MathContext): BigDecimal"
                ]
              },
              {
                "name": "toBigInteger",
                "description": [
                  "Returns the value of this Long number as a BigInteger."
                ],
                "code": ["fun Long.toBigInteger(): BigInteger"]
              },
              {
                "name": "toCPointer",
                "description": [],
                "code": ["fun <T : CPointed> Long.toCPointer(): CPointer<T>?"]
              },
              {
                "name": "toDuration",
                "description": [
                  "Returns a Duration equal to this Long number of the specified unit."
                ],
                "code": ["fun Long.toDuration(unit: DurationUnit): Duration"]
              },
              {
                "name": "toHexString",
                "description": [
                  "Formats this Long value using the specified format."
                ],
                "code": [
                  "fun Long.toHexString(    format: HexFormat = HexFormat.Default): String"
                ]
              },
              {
                "name": "toUByte",
                "description": ["Converts this Long value to UByte."],
                "code": ["fun Long.toUByte(): UByte"]
              },
              {
                "name": "toUInt",
                "description": ["Converts this Long value to UInt."],
                "code": ["fun Long.toUInt(): UInt"]
              },
              {
                "name": "toULong",
                "description": ["Converts this Long value to ULong."],
                "code": ["fun Long.toULong(): ULong"]
              },
              {
                "name": "toUShort",
                "description": ["Converts this Long value to UShort."],
                "code": ["fun Long.toUShort(): UShort"]
              },
              {
                "name": "until",
                "description": [
                  "Returns a range from this value up to but excluding the specified to value."
                ],
                "code": [
                  "infix fun Long.until(to: Byte): LongRange",
                  "infix fun Long.until(to: Int): LongRange",
                  "infix fun Long.until(to: Long): LongRange",
                  "infix fun Long.until(to: Short): LongRange"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "LongArray",
        "description": [
          "An array of longs. When targeting the JVM, instances of this class are represented as long[]."
        ],
        "code": ["class LongArray"],
        "url": "-long-array/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Creates a new array of the specified size, where each element is calculated by calling the specified\ninit function.",
                  "Creates a new array of the specified size, with all elements initialized to zero."
                ],
                "code": [
                  "<init>(size: Int, init: (Int) -> Long)",
                  "<init>(size: Int)"
                ]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "size",
                "description": ["Returns the number of elements in the array."],
                "code": ["val size: Int"]
              }
            ]
          },
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "get",
                "description": [
                  "Returns the array element at the given index.  This method can be called using the index operator."
                ],
                "code": ["operator fun get(index: Int): Long"]
              },
              {
                "name": "iterator",
                "description": [
                  "Creates an iterator over the elements of the array."
                ],
                "code": ["operator fun iterator(): LongIterator"]
              },
              {
                "name": "set",
                "description": [
                  "Sets the element at the given index to the given value. This method can be called using the index operator."
                ],
                "code": ["operator fun set(index: Int, value: Long)"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "indices",
                "description": [
                  "Returns the range of valid indices for the array."
                ],
                "code": ["val LongArray.indices: IntRange"]
              },
              {
                "name": "lastIndex",
                "description": ["Returns the last valid index for the array."],
                "code": ["val LongArray.lastIndex: Int"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "all",
                "description": [
                  "Returns true if all elements match the given predicate."
                ],
                "code": [
                  "fun LongArray.all(predicate: (Long) -> Boolean): Boolean"
                ]
              },
              {
                "name": "any",
                "description": [
                  "Returns true if array has at least one element.",
                  "Returns true if at least one element matches the given predicate."
                ],
                "code": [
                  "fun LongArray.any(): Boolean",
                  "fun LongArray.any(predicate: (Long) -> Boolean): Boolean"
                ]
              },
              {
                "name": "asIterable",
                "description": [
                  "Creates an Iterable instance that wraps the original array returning its elements when being iterated."
                ],
                "code": ["fun LongArray.asIterable(): Iterable<Long>"]
              },
              {
                "name": "asSequence",
                "description": [
                  "Creates a Sequence instance that wraps the original array returning its elements when being iterated."
                ],
                "code": ["fun LongArray.asSequence(): Sequence<Long>"]
              },
              {
                "name": "associate",
                "description": [
                  "Returns a Map containing key-value pairs provided by transform function\napplied to elements of the given array."
                ],
                "code": [
                  "fun <K, V> LongArray.associate(    transform: (Long) -> Pair<K, V>): Map<K, V>"
                ]
              },
              {
                "name": "associateBy",
                "description": [
                  "Returns a Map containing the elements from the given array indexed by the key\nreturned from keySelector function applied to each element.",
                  "Returns a Map containing the values provided by valueTransform and indexed by keySelector functions applied to elements of the given array."
                ],
                "code": [
                  "fun <K> LongArray.associateBy(    keySelector: (Long) -> K): Map<K, Long>",
                  "fun <K, V> LongArray.associateBy(    keySelector: (Long) -> K,     valueTransform: (Long) -> V): Map<K, V>"
                ]
              },
              {
                "name": "associateByTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function applied to each element of the given array\nand value is the element itself.",
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function and\nand value is provided by the valueTransform function applied to elements of the given array."
                ],
                "code": [
                  "fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(    destination: M,     keySelector: (Long) -> K): M",
                  "fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(    destination: M,     keySelector: (Long) -> K,     valueTransform: (Long) -> V): M"
                ]
              },
              {
                "name": "associateTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs\nprovided by transform function applied to each element of the given array."
                ],
                "code": [
                  "fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(    destination: M,     transform: (Long) -> Pair<K, V>): M"
                ]
              },
              {
                "name": "associateWith",
                "description": [
                  "Returns a Map where keys are elements from the given array and values are\nproduced by the valueSelector function applied to each element."
                ],
                "code": [
                  "fun <V> LongArray.associateWith(    valueSelector: (Long) -> V): Map<Long, V>"
                ]
              },
              {
                "name": "associateWithTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs for each element of the given array,\nwhere key is the element itself and value is provided by the valueSelector function applied to that key."
                ],
                "code": [
                  "fun <V, M : MutableMap<in Long, in V>> LongArray.associateWithTo(    destination: M,     valueSelector: (Long) -> V): M"
                ]
              },
              {
                "name": "asULongArray",
                "description": [
                  "Returns an array of type ULongArray, which is a view of this array where each element is an unsigned reinterpretation\nof the corresponding element of this array."
                ],
                "code": ["fun LongArray.asULongArray(): ULongArray"]
              },
              {
                "name": "average",
                "description": [
                  "Returns an average value of elements in the array."
                ],
                "code": ["fun LongArray.average(): Double"]
              },
              {
                "name": "binarySearch",
                "description": [
                  "Searches the array or the range of the array for the provided element using the binary search algorithm.\nThe array is expected to be sorted, otherwise the result is undefined."
                ],
                "code": [
                  "fun LongArray.binarySearch(    element: Long,     fromIndex: Int = 0,     toIndex: Int = size): Int"
                ]
              },
              {
                "name": "component1",
                "description": ["Returns 1st element from the array."],
                "code": ["operator fun LongArray.component1(): Long"]
              },
              {
                "name": "component2",
                "description": ["Returns 2nd element from the array."],
                "code": ["operator fun LongArray.component2(): Long"]
              },
              {
                "name": "component3",
                "description": ["Returns 3rd element from the array."],
                "code": ["operator fun LongArray.component3(): Long"]
              },
              {
                "name": "component4",
                "description": ["Returns 4th element from the array."],
                "code": ["operator fun LongArray.component4(): Long"]
              },
              {
                "name": "component5",
                "description": ["Returns 5th element from the array."],
                "code": ["operator fun LongArray.component5(): Long"]
              },
              {
                "name": "contains",
                "description": [
                  "Returns true if element is found in the array."
                ],
                "code": [
                  "operator fun LongArray.contains(element: Long): Boolean"
                ]
              },
              {
                "name": "contentEquals",
                "description": [
                  "Returns true if the two specified arrays are structurally equal to one another,\ni.e. contain the same number of the same elements in the same order."
                ],
                "code": [
                  "infix fun LongArray.contentEquals(other: LongArray): Boolean"
                ]
              },
              {
                "name": "contentHashCode",
                "description": [
                  "Returns a hash code based on the contents of this array as if it is List."
                ],
                "code": ["fun LongArray.contentHashCode(): Int"]
              },
              {
                "name": "contentToString",
                "description": [
                  "Returns a string representation of the contents of the specified array as if it is List."
                ],
                "code": ["fun LongArray.contentToString(): String"]
              },
              {
                "name": "count",
                "description": [
                  "Returns the number of elements in this array.",
                  "Returns the number of elements matching the given predicate."
                ],
                "code": [
                  "fun LongArray.count(): Int",
                  "fun LongArray.count(predicate: (Long) -> Boolean): Int"
                ]
              },
              {
                "name": "distinct",
                "description": [
                  "Returns a list containing only distinct elements from the given array."
                ],
                "code": ["fun LongArray.distinct(): List<Long>"]
              },
              {
                "name": "distinctBy",
                "description": [
                  "Returns a list containing only elements from the given array\nhaving distinct keys returned by the given selector function."
                ],
                "code": [
                  "fun <K> LongArray.distinctBy(    selector: (Long) -> K): List<Long>"
                ]
              },
              {
                "name": "drop",
                "description": [
                  "Returns a list containing all elements except first n elements."
                ],
                "code": ["fun LongArray.drop(n: Int): List<Long>"]
              },
              {
                "name": "dropLast",
                "description": [
                  "Returns a list containing all elements except last n elements."
                ],
                "code": ["fun LongArray.dropLast(n: Int): List<Long>"]
              },
              {
                "name": "dropLastWhile",
                "description": [
                  "Returns a list containing all elements except last elements that satisfy the given predicate."
                ],
                "code": [
                  "fun LongArray.dropLastWhile(    predicate: (Long) -> Boolean): List<Long>"
                ]
              },
              {
                "name": "dropWhile",
                "description": [
                  "Returns a list containing all elements except first elements that satisfy the given predicate."
                ],
                "code": [
                  "fun LongArray.dropWhile(    predicate: (Long) -> Boolean): List<Long>"
                ]
              },
              {
                "name": "elementAtOrElse",
                "description": [
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
                ],
                "code": [
                  "fun LongArray.elementAtOrElse(    index: Int,     defaultValue: (Int) -> Long): Long"
                ]
              },
              {
                "name": "elementAtOrNull",
                "description": [
                  "Returns an element at the given index or null if the index is out of bounds of this array."
                ],
                "code": ["fun LongArray.elementAtOrNull(index: Int): Long?"]
              },
              {
                "name": "filter",
                "description": [
                  "Returns a list containing only elements matching the given predicate."
                ],
                "code": [
                  "fun LongArray.filter(    predicate: (Long) -> Boolean): List<Long>"
                ]
              },
              {
                "name": "filterIndexed",
                "description": [
                  "Returns a list containing only elements matching the given predicate."
                ],
                "code": [
                  "fun LongArray.filterIndexed(    predicate: (index: Int, Long) -> Boolean): List<Long>"
                ]
              },
              {
                "name": "filterIndexedTo",
                "description": [
                  "Appends all elements matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(    destination: C,     predicate: (index: Int, Long) -> Boolean): C"
                ]
              },
              {
                "name": "filterNot",
                "description": [
                  "Returns a list containing all elements not matching the given predicate."
                ],
                "code": [
                  "fun LongArray.filterNot(    predicate: (Long) -> Boolean): List<Long>"
                ]
              },
              {
                "name": "filterNotTo",
                "description": [
                  "Appends all elements not matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in Long>> LongArray.filterNotTo(    destination: C,     predicate: (Long) -> Boolean): C"
                ]
              },
              {
                "name": "filterTo",
                "description": [
                  "Appends all elements matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in Long>> LongArray.filterTo(    destination: C,     predicate: (Long) -> Boolean): C"
                ]
              },
              {
                "name": "find",
                "description": [
                  "Returns the first element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun LongArray.find(predicate: (Long) -> Boolean): Long?"
                ]
              },
              {
                "name": "findLast",
                "description": [
                  "Returns the last element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun LongArray.findLast(predicate: (Long) -> Boolean): Long?"
                ]
              },
              {
                "name": "first",
                "description": [
                  "Returns the first element.",
                  "Returns the first element matching the given predicate."
                ],
                "code": [
                  "fun LongArray.first(): Long",
                  "fun LongArray.first(predicate: (Long) -> Boolean): Long"
                ]
              },
              {
                "name": "firstOrNull",
                "description": [
                  "Returns the first element, or null if the array is empty.",
                  "Returns the first element matching the given predicate, or null if element was not found."
                ],
                "code": [
                  "fun LongArray.firstOrNull(): Long?",
                  "fun LongArray.firstOrNull(    predicate: (Long) -> Boolean): Long?"
                ]
              },
              {
                "name": "flatMap",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element of original array."
                ],
                "code": [
                  "fun <R> LongArray.flatMap(    transform: (Long) -> Iterable<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexed",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element\nand its index in the original array."
                ],
                "code": [
                  "fun <R> LongArray.flatMapIndexed(    transform: (index: Int, Long) -> Iterable<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexedTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each element\nand its index in the original array, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> LongArray.flatMapIndexedTo(    destination: C,     transform: (index: Int, Long) -> Iterable<R>): C"
                ]
              },
              {
                "name": "flatMapTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each element of original array, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(    destination: C,     transform: (Long) -> Iterable<R>): C"
                ]
              },
              {
                "name": "fold",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun <R> LongArray.fold(    initial: R,     operation: (acc: R, Long) -> R): R"
                ]
              },
              {
                "name": "foldIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element with its index in the original array."
                ],
                "code": [
                  "fun <R> LongArray.foldIndexed(    initial: R,     operation: (index: Int, acc: R, Long) -> R): R"
                ]
              },
              {
                "name": "foldRight",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun <R> LongArray.foldRight(    initial: R,     operation: (Long, acc: R) -> R): R"
                ]
              },
              {
                "name": "foldRightIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun <R> LongArray.foldRightIndexed(    initial: R,     operation: (index: Int, Long, acc: R) -> R): R"
                ]
              },
              {
                "name": "forEach",
                "description": ["Performs the given action on each element."],
                "code": ["fun LongArray.forEach(action: (Long) -> Unit)"]
              },
              {
                "name": "forEachIndexed",
                "description": [
                  "Performs the given action on each element, providing sequential index with the element."
                ],
                "code": [
                  "fun LongArray.forEachIndexed(    action: (index: Int, Long) -> Unit)"
                ]
              },
              {
                "name": "getOrElse",
                "description": [
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
                ],
                "code": [
                  "fun LongArray.getOrElse(    index: Int,     defaultValue: (Int) -> Long): Long"
                ]
              },
              {
                "name": "getOrNull",
                "description": [
                  "Returns an element at the given index or null if the index is out of bounds of this array."
                ],
                "code": ["fun LongArray.getOrNull(index: Int): Long?"]
              },
              {
                "name": "groupBy",
                "description": [
                  "Groups elements of the original array by the key returned by the given keySelector function\napplied to each element and returns a map where each group key is associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original array\nby the key returned by the given keySelector function applied to the element\nand returns a map where each group key is associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K> LongArray.groupBy(    keySelector: (Long) -> K): Map<K, List<Long>>",
                  "fun <K, V> LongArray.groupBy(    keySelector: (Long) -> K,     valueTransform: (Long) -> V): Map<K, List<V>>"
                ]
              },
              {
                "name": "groupByTo",
                "description": [
                  "Groups elements of the original array by the key returned by the given keySelector function\napplied to each element and puts to the destination map each group key associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original array\nby the key returned by the given keySelector function applied to the element\nand puts to the destination map each group key associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(    destination: M,     keySelector: (Long) -> K): M",
                  "fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(    destination: M,     keySelector: (Long) -> K,     valueTransform: (Long) -> V): M"
                ]
              },
              {
                "name": "indexOf",
                "description": [
                  "Returns first index of element, or -1 if the array does not contain element."
                ],
                "code": ["fun LongArray.indexOf(element: Long): Int"]
              },
              {
                "name": "indexOfFirst",
                "description": [
                  "Returns index of the first element matching the given predicate, or -1 if the array does not contain such element."
                ],
                "code": [
                  "fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int"
                ]
              },
              {
                "name": "indexOfLast",
                "description": [
                  "Returns index of the last element matching the given predicate, or -1 if the array does not contain such element."
                ],
                "code": [
                  "fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int"
                ]
              },
              {
                "name": "intersect",
                "description": [
                  "Returns a set containing all elements that are contained by both this array and the specified collection."
                ],
                "code": [
                  "infix fun LongArray.intersect(    other: Iterable<Long>): Set<Long>"
                ]
              },
              {
                "name": "isEmpty",
                "description": ["Returns true if the array is empty."],
                "code": ["fun LongArray.isEmpty(): Boolean"]
              },
              {
                "name": "isNotEmpty",
                "description": ["Returns true if the array is not empty."],
                "code": ["fun LongArray.isNotEmpty(): Boolean"]
              },
              {
                "name": "joinTo",
                "description": [
                  "Appends the string from all the elements separated using separator and using the given prefix and postfix if supplied."
                ],
                "code": [
                  "fun <A : Appendable> LongArray.joinTo(    buffer: A,     separator: CharSequence = \", \",     prefix: CharSequence = \"\",     postfix: CharSequence = \"\",     limit: Int = -1,     truncated: CharSequence = \"...\",     transform: ((Long) -> CharSequence)? = null): A"
                ]
              },
              {
                "name": "joinToString",
                "description": [
                  "Creates a string from all the elements separated using separator and using the given prefix and postfix if supplied."
                ],
                "code": [
                  "fun LongArray.joinToString(    separator: CharSequence = \", \",     prefix: CharSequence = \"\",     postfix: CharSequence = \"\",     limit: Int = -1,     truncated: CharSequence = \"...\",     transform: ((Long) -> CharSequence)? = null): String"
                ]
              },
              {
                "name": "last",
                "description": [
                  "Returns the last element.",
                  "Returns the last element matching the given predicate."
                ],
                "code": [
                  "fun LongArray.last(): Long",
                  "fun LongArray.last(predicate: (Long) -> Boolean): Long"
                ]
              },
              {
                "name": "lastIndexOf",
                "description": [
                  "Returns last index of element, or -1 if the array does not contain element."
                ],
                "code": ["fun LongArray.lastIndexOf(element: Long): Int"]
              },
              {
                "name": "lastOrNull",
                "description": [
                  "Returns the last element, or null if the array is empty.",
                  "Returns the last element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun LongArray.lastOrNull(): Long?",
                  "fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long?"
                ]
              },
              {
                "name": "map",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each element in the original array."
                ],
                "code": [
                  "fun <R> LongArray.map(transform: (Long) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexed",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each element and its index in the original array."
                ],
                "code": [
                  "fun <R> LongArray.mapIndexed(    transform: (index: Int, Long) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexedTo",
                "description": [
                  "Applies the given transform function to each element and its index in the original array\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(    destination: C,     transform: (index: Int, Long) -> R): C"
                ]
              },
              {
                "name": "mapTo",
                "description": [
                  "Applies the given transform function to each element of the original array\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> LongArray.mapTo(    destination: C,     transform: (Long) -> R): C"
                ]
              },
              {
                "name": "maxByOrNull",
                "description": [
                  "Returns the first element yielding the largest value of the given function or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> LongArray.maxByOrNull(    selector: (Long) -> R): Long?"
                ]
              },
              {
                "name": "maxOf",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each element in the array."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.maxOf(    selector: (Long) -> R): R"
                ]
              },
              {
                "name": "maxOfOrNull",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.maxOfOrNull(    selector: (Long) -> R): R?"
                ]
              },
              {
                "name": "maxOfWith",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun <R> LongArray.maxOfWith(    comparator: Comparator<in R>,     selector: (Long) -> R): R"
                ]
              },
              {
                "name": "maxOfWithOrNull",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R> LongArray.maxOfWithOrNull(    comparator: Comparator<in R>,     selector: (Long) -> R): R?"
                ]
              },
              {
                "name": "maxOrNull",
                "description": [
                  "Returns the largest element or null if there are no elements."
                ],
                "code": ["fun LongArray.maxOrNull(): Long?"]
              },
              {
                "name": "maxWith",
                "description": [
                  "Returns the first element having the largest value according to the provided comparator."
                ],
                "code": [
                  "fun LongArray.maxWith(comparator: Comparator<in Long>): Long",
                  "fun LongArray.maxWith(comparator: Comparator<in Long>): Long?"
                ]
              },
              {
                "name": "maxWithOrNull",
                "description": [
                  "Returns the first element having the largest value according to the provided comparator or null if there are no elements."
                ],
                "code": [
                  "fun LongArray.maxWithOrNull(    comparator: Comparator<in Long>): Long?"
                ]
              },
              {
                "name": "minByOrNull",
                "description": [
                  "Returns the first element yielding the smallest value of the given function or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> LongArray.minByOrNull(    selector: (Long) -> R): Long?"
                ]
              },
              {
                "name": "minOf",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the array."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.minOf(    selector: (Long) -> R): R"
                ]
              },
              {
                "name": "minOfOrNull",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.minOfOrNull(    selector: (Long) -> R): R?"
                ]
              },
              {
                "name": "minOfWith",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun <R> LongArray.minOfWith(    comparator: Comparator<in R>,     selector: (Long) -> R): R"
                ]
              },
              {
                "name": "minOfWithOrNull",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R> LongArray.minOfWithOrNull(    comparator: Comparator<in R>,     selector: (Long) -> R): R?"
                ]
              },
              {
                "name": "minOrNull",
                "description": [
                  "Returns the smallest element or null if there are no elements."
                ],
                "code": ["fun LongArray.minOrNull(): Long?"]
              },
              {
                "name": "minWith",
                "description": [
                  "Returns the first element having the smallest value according to the provided comparator."
                ],
                "code": [
                  "fun LongArray.minWith(comparator: Comparator<in Long>): Long",
                  "fun LongArray.minWith(comparator: Comparator<in Long>): Long?"
                ]
              },
              {
                "name": "minWithOrNull",
                "description": [
                  "Returns the first element having the smallest value according to the provided comparator or null if there are no elements."
                ],
                "code": [
                  "fun LongArray.minWithOrNull(    comparator: Comparator<in Long>): Long?"
                ]
              },
              {
                "name": "none",
                "description": [
                  "Returns true if the array has no elements.",
                  "Returns true if no elements match the given predicate."
                ],
                "code": [
                  "fun LongArray.none(): Boolean",
                  "fun LongArray.none(predicate: (Long) -> Boolean): Boolean"
                ]
              },
              {
                "name": "onEach",
                "description": [
                  "Performs the given action on each element and returns the array itself afterwards."
                ],
                "code": [
                  "fun LongArray.onEach(action: (Long) -> Unit): LongArray"
                ]
              },
              {
                "name": "onEachIndexed",
                "description": [
                  "Performs the given action on each element, providing sequential index with the element,\nand returns the array itself afterwards."
                ],
                "code": [
                  "fun LongArray.onEachIndexed(    action: (index: Int, Long) -> Unit): LongArray"
                ]
              },
              {
                "name": "partition",
                "description": [
                  "Splits the original array into pair of lists,\nwhere first list contains elements for which predicate yielded true,\nwhile second list contains elements for which predicate yielded false."
                ],
                "code": [
                  "fun LongArray.partition(    predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>>"
                ]
              },
              {
                "name": "random",
                "description": [
                  "Returns a random element from this array.",
                  "Returns a random element from this array using the specified source of randomness."
                ],
                "code": [
                  "fun LongArray.random(): Long",
                  "fun LongArray.random(random: Random): Long"
                ]
              },
              {
                "name": "randomOrNull",
                "description": [
                  "Returns a random element from this array, or null if this array is empty.",
                  "Returns a random element from this array using the specified source of randomness, or null if this array is empty."
                ],
                "code": [
                  "fun LongArray.randomOrNull(): Long?",
                  "fun LongArray.randomOrNull(random: Random): Long?"
                ]
              },
              {
                "name": "reduce",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun LongArray.reduce(    operation: (acc: Long, Long) -> Long): Long"
                ]
              },
              {
                "name": "reduceIndexed",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original array."
                ],
                "code": [
                  "fun LongArray.reduceIndexed(    operation: (index: Int, acc: Long, Long) -> Long): Long"
                ]
              },
              {
                "name": "reduceIndexedOrNull",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original array."
                ],
                "code": [
                  "fun LongArray.reduceIndexedOrNull(    operation: (index: Int, acc: Long, Long) -> Long): Long?"
                ]
              },
              {
                "name": "reduceOrNull",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun LongArray.reduceOrNull(    operation: (acc: Long, Long) -> Long): Long?"
                ]
              },
              {
                "name": "reduceRight",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun LongArray.reduceRight(    operation: (Long, acc: Long) -> Long): Long"
                ]
              },
              {
                "name": "reduceRightIndexed",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun LongArray.reduceRightIndexed(    operation: (index: Int, Long, acc: Long) -> Long): Long"
                ]
              },
              {
                "name": "reduceRightIndexedOrNull",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun LongArray.reduceRightIndexedOrNull(    operation: (index: Int, Long, acc: Long) -> Long): Long?"
                ]
              },
              {
                "name": "reduceRightOrNull",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun LongArray.reduceRightOrNull(    operation: (Long, acc: Long) -> Long): Long?"
                ]
              },
              {
                "name": "refTo",
                "description": [],
                "code": ["fun LongArray.refTo(index: Int): CValuesRef<LongVar>"]
              },
              {
                "name": "reverse",
                "description": [
                  "Reverses elements in the array in-place.",
                  "Reverses elements of the array in the specified range in-place."
                ],
                "code": [
                  "fun LongArray.reverse()",
                  "fun LongArray.reverse(fromIndex: Int, toIndex: Int)"
                ]
              },
              {
                "name": "reversed",
                "description": [
                  "Returns a list with elements in reversed order."
                ],
                "code": ["fun LongArray.reversed(): List<Long>"]
              },
              {
                "name": "reversedArray",
                "description": [
                  "Returns an array with elements of this array in reversed order."
                ],
                "code": ["fun LongArray.reversedArray(): LongArray"]
              },
              {
                "name": "runningFold",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> LongArray.runningFold(    initial: R,     operation: (acc: R, Long) -> R): List<R>"
                ]
              },
              {
                "name": "runningFoldIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> LongArray.runningFoldIndexed(    initial: R,     operation: (index: Int, acc: R, Long) -> R): List<R>"
                ]
              },
              {
                "name": "runningReduce",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with the first element of this array."
                ],
                "code": [
                  "fun LongArray.runningReduce(    operation: (acc: Long, Long) -> Long): List<Long>"
                ]
              },
              {
                "name": "runningReduceIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with the first element of this array."
                ],
                "code": [
                  "fun LongArray.runningReduceIndexed(    operation: (index: Int, acc: Long, Long) -> Long): List<Long>"
                ]
              },
              {
                "name": "scan",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> LongArray.scan(    initial: R,     operation: (acc: R, Long) -> R): List<R>"
                ]
              },
              {
                "name": "scanIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> LongArray.scanIndexed(    initial: R,     operation: (index: Int, acc: R, Long) -> R): List<R>"
                ]
              },
              {
                "name": "shuffle",
                "description": [
                  "Randomly shuffles elements in this array in-place.",
                  "Randomly shuffles elements in this array in-place using the specified random instance as the source of randomness."
                ],
                "code": [
                  "fun LongArray.shuffle()",
                  "fun LongArray.shuffle(random: Random)"
                ]
              },
              {
                "name": "single",
                "description": [
                  "Returns the single element, or throws an exception if the array is empty or has more than one element.",
                  "Returns the single element matching the given predicate, or throws exception if there is no or more than one matching element."
                ],
                "code": [
                  "fun LongArray.single(): Long",
                  "fun LongArray.single(predicate: (Long) -> Boolean): Long"
                ]
              },
              {
                "name": "singleOrNull",
                "description": [
                  "Returns single element, or null if the array is empty or has more than one element.",
                  "Returns the single element matching the given predicate, or null if element was not found or more than one element was found."
                ],
                "code": [
                  "fun LongArray.singleOrNull(): Long?",
                  "fun LongArray.singleOrNull(    predicate: (Long) -> Boolean): Long?"
                ]
              },
              {
                "name": "slice",
                "description": [
                  "Returns a list containing elements at indices in the specified indices range.",
                  "Returns a list containing elements at specified indices."
                ],
                "code": [
                  "fun LongArray.slice(indices: IntRange): List<Long>",
                  "fun LongArray.slice(indices: Iterable<Int>): List<Long>"
                ]
              },
              {
                "name": "sliceArray",
                "description": [
                  "Returns an array containing elements of this array at specified indices.",
                  "Returns an array containing elements at indices in the specified indices range."
                ],
                "code": [
                  "fun LongArray.sliceArray(indices: Collection<Int>): LongArray",
                  "fun LongArray.sliceArray(indices: IntRange): LongArray"
                ]
              },
              {
                "name": "sort",
                "description": [
                  "Sorts the array in-place according to the order specified by the given comparison function."
                ],
                "code": [
                  "fun LongArray.sort(comparison: (a: Long, b: Long) -> Int)"
                ]
              },
              {
                "name": "sortDescending",
                "description": [
                  "Sorts elements in the array in-place descending according to their natural sort order.",
                  "Sorts elements of the array in the specified range in-place.\nThe elements are sorted descending according to their natural sort order."
                ],
                "code": [
                  "fun LongArray.sortDescending()",
                  "fun LongArray.sortDescending(fromIndex: Int, toIndex: Int)"
                ]
              },
              {
                "name": "sorted",
                "description": [
                  "Returns a list of all elements sorted according to their natural sort order."
                ],
                "code": ["fun LongArray.sorted(): List<Long>"]
              },
              {
                "name": "sortedArray",
                "description": [
                  "Returns an array with all elements of this array sorted according to their natural sort order."
                ],
                "code": ["fun LongArray.sortedArray(): LongArray"]
              },
              {
                "name": "sortedArrayDescending",
                "description": [
                  "Returns an array with all elements of this array sorted descending according to their natural sort order."
                ],
                "code": ["fun LongArray.sortedArrayDescending(): LongArray"]
              },
              {
                "name": "sortedBy",
                "description": [
                  "Returns a list of all elements sorted according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <R : Comparable<R>> LongArray.sortedBy(    selector: (Long) -> R?): List<Long>"
                ]
              },
              {
                "name": "sortedByDescending",
                "description": [
                  "Returns a list of all elements sorted descending according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <R : Comparable<R>> LongArray.sortedByDescending(    selector: (Long) -> R?): List<Long>"
                ]
              },
              {
                "name": "sortedDescending",
                "description": [
                  "Returns a list of all elements sorted descending according to their natural sort order."
                ],
                "code": ["fun LongArray.sortedDescending(): List<Long>"]
              },
              {
                "name": "sortedWith",
                "description": [
                  "Returns a list of all elements sorted according to the specified comparator."
                ],
                "code": [
                  "fun LongArray.sortedWith(    comparator: Comparator<in Long>): List<Long>"
                ]
              },
              {
                "name": "subtract",
                "description": [
                  "Returns a set containing all elements that are contained by this array and not contained by the specified collection."
                ],
                "code": [
                  "infix fun LongArray.subtract(    other: Iterable<Long>): Set<Long>"
                ]
              },
              {
                "name": "sum",
                "description": [
                  "Returns the sum of all elements in the array."
                ],
                "code": ["fun LongArray.sum(): Long"]
              },
              {
                "name": "sumBy",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array."
                ],
                "code": ["fun LongArray.sumBy(selector: (Long) -> Int): Int"]
              },
              {
                "name": "sumByDouble",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun LongArray.sumByDouble(selector: (Long) -> Double): Double"
                ]
              },
              {
                "name": "sumOf",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun LongArray.sumOf(selector: (Long) -> Double): Double",
                  "fun LongArray.sumOf(selector: (Long) -> Int): Int",
                  "fun LongArray.sumOf(selector: (Long) -> Long): Long",
                  "fun LongArray.sumOf(selector: (Long) -> UInt): UInt",
                  "fun LongArray.sumOf(selector: (Long) -> ULong): ULong",
                  "fun LongArray.sumOf(    selector: (Long) -> BigDecimal): BigDecimal",
                  "fun LongArray.sumOf(    selector: (Long) -> BigInteger): BigInteger"
                ]
              },
              {
                "name": "take",
                "description": ["Returns a list containing first n elements."],
                "code": ["fun LongArray.take(n: Int): List<Long>"]
              },
              {
                "name": "takeLast",
                "description": ["Returns a list containing last n elements."],
                "code": ["fun LongArray.takeLast(n: Int): List<Long>"]
              },
              {
                "name": "takeLastWhile",
                "description": [
                  "Returns a list containing last elements satisfying the given predicate."
                ],
                "code": [
                  "fun LongArray.takeLastWhile(    predicate: (Long) -> Boolean): List<Long>"
                ]
              },
              {
                "name": "takeWhile",
                "description": [
                  "Returns a list containing first elements satisfying the given predicate."
                ],
                "code": [
                  "fun LongArray.takeWhile(    predicate: (Long) -> Boolean): List<Long>"
                ]
              },
              {
                "name": "toCollection",
                "description": [
                  "Appends all elements to the given destination collection."
                ],
                "code": [
                  "fun <C : MutableCollection<in Long>> LongArray.toCollection(    destination: C): C"
                ]
              },
              {
                "name": "toCValues",
                "description": [],
                "code": ["fun LongArray.toCValues(): CValues<LongVar>"]
              },
              {
                "name": "toHashSet",
                "description": ["Returns a new HashSet of all elements."],
                "code": ["fun LongArray.toHashSet(): HashSet<Long>"]
              },
              {
                "name": "toList",
                "description": ["Returns a List containing all elements."],
                "code": ["fun LongArray.toList(): List<Long>"]
              },
              {
                "name": "toMutableList",
                "description": [
                  "Returns a new MutableList filled with all elements of this array."
                ],
                "code": ["fun LongArray.toMutableList(): MutableList<Long>"]
              },
              {
                "name": "toMutableSet",
                "description": [
                  "Returns a new MutableSet containing all distinct elements from the given array."
                ],
                "code": ["fun LongArray.toMutableSet(): MutableSet<Long>"]
              },
              {
                "name": "toSet",
                "description": ["Returns a Set of all elements."],
                "code": ["fun LongArray.toSet(): Set<Long>"]
              },
              {
                "name": "toSortedSet",
                "description": ["Returns a new SortedSet of all elements."],
                "code": ["fun LongArray.toSortedSet(): SortedSet<Long>"]
              },
              {
                "name": "toULongArray",
                "description": [
                  "Returns an array of type ULongArray, which is a copy of this array where each element is an unsigned reinterpretation\nof the corresponding element of this array."
                ],
                "code": ["fun LongArray.toULongArray(): ULongArray"]
              },
              {
                "name": "union",
                "description": [
                  "Returns a set containing all distinct elements from both collections."
                ],
                "code": [
                  "infix fun LongArray.union(other: Iterable<Long>): Set<Long>"
                ]
              },
              {
                "name": "withIndex",
                "description": [
                  "Returns a lazy Iterable that wraps each element of the original array\ninto an IndexedValue containing the index of that element and the element itself."
                ],
                "code": [
                  "fun LongArray.withIndex(): Iterable<IndexedValue<Long>>"
                ]
              },
              {
                "name": "zip",
                "description": [
                  "Returns a list of pairs built from the elements of this array and the other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of pairs built from the elements of this collection and other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other collection with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest array."
                ],
                "code": [
                  "infix fun <R> any_array<R>.zip(    other: Array<out R>): List<Pair<Long, R>>",
                  "fun <R, V> LongArray.zip(    other: Array<out R>,     transform: (a: Long, b: R) -> V): List<V>",
                  "infix fun <R> LongArray.zip(    other: Iterable<R>): List<Pair<Long, R>>",
                  "fun <R, V> LongArray.zip(    other: Iterable<R>,     transform: (a: Long, b: R) -> V): List<V>",
                  "fun <V> LongArray.zip(    other: LongArray,     transform: (a: Long, b: Long) -> V): List<V>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "Nothing",
        "description": [
          "Nothing has no instances. You can use Nothing to represent \"a value that never exists\": for example,\nif a function has the return type of Nothing, it means that it never returns (always throws an exception)."
        ],
        "code": ["class Nothing"],
        "url": "-nothing.html",
        "subcategories": []
      },
      {
        "name": "Number",
        "description": [
          "Superclass for all platform classes representing numeric values."
        ],
        "code": ["abstract class Number"],
        "url": "-number/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Superclass for all platform classes representing numeric values."
                ],
                "code": ["<init>()"]
              }
            ]
          },
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "toByte",
                "description": [
                  "Returns the value of this number as a Byte, which may involve rounding or truncation."
                ],
                "code": ["abstract fun toByte(): Byte"]
              },
              {
                "name": "toChar",
                "description": [
                  "Returns the Char with the numeric value equal to this number, truncated to 16 bits if appropriate."
                ],
                "code": ["open fun toChar(): Char"]
              },
              {
                "name": "toDouble",
                "description": [
                  "Returns the value of this number as a Double, which may involve rounding."
                ],
                "code": ["abstract fun toDouble(): Double"]
              },
              {
                "name": "toFloat",
                "description": [
                  "Returns the value of this number as a Float, which may involve rounding."
                ],
                "code": ["abstract fun toFloat(): Float"]
              },
              {
                "name": "toInt",
                "description": [
                  "Returns the value of this number as an Int, which may involve rounding or truncation."
                ],
                "code": ["abstract fun toInt(): Int"]
              },
              {
                "name": "toLong",
                "description": [
                  "Returns the value of this number as a Long, which may involve rounding or truncation."
                ],
                "code": ["abstract fun toLong(): Long"]
              },
              {
                "name": "toShort",
                "description": [
                  "Returns the value of this number as a Short, which may involve rounding or truncation."
                ],
                "code": ["abstract fun toShort(): Short"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "narrow",
                "description": [],
                "code": ["fun <R : Number> Number.narrow(): R"]
              },
              {
                "name": "signExtend",
                "description": [],
                "code": ["fun <R : Number> Number.signExtend(): R"]
              }
            ]
          },
          {
            "name": "Inheritors",
            "declarations": [
              {
                "name": "Byte",
                "description": [
                  "Represents a 8-bit signed integer.\nOn the JVM, non-nullable values of this type are represented as values of the primitive type byte."
                ],
                "code": ["class Byte : Number, Comparable<Byte>"]
              },
              {
                "name": "Double",
                "description": [
                  "Represents a double-precision 64-bit IEEE 754 floating point number.\nOn the JVM, non-nullable values of this type are represented as values of the primitive type double."
                ],
                "code": ["class Double : Number, Comparable<Double>"]
              },
              {
                "name": "Float",
                "description": [
                  "Represents a single-precision 32-bit IEEE 754 floating point number.\nOn the JVM, non-nullable values of this type are represented as values of the primitive type float."
                ],
                "code": ["class Float : Number, Comparable<Float>"]
              },
              {
                "name": "Int",
                "description": [
                  "Represents a 32-bit signed integer.\nOn the JVM, non-nullable values of this type are represented as values of the primitive type int."
                ],
                "code": ["class Int : Number, Comparable<Int>"]
              },
              {
                "name": "Long",
                "description": [
                  "Represents a 64-bit signed integer.\nOn the JVM, non-nullable values of this type are represented as values of the primitive type long."
                ],
                "code": ["class Long : Number, Comparable<Long>"]
              },
              {
                "name": "Short",
                "description": [
                  "Represents a 16-bit signed integer.\nOn the JVM, non-nullable values of this type are represented as values of the primitive type short."
                ],
                "code": ["class Short : Number, Comparable<Short>"]
              }
            ]
          }
        ]
      },
      {
        "name": "OutOfMemoryError",
        "description": [],
        "code": ["open class OutOfMemoryError : Error"],
        "url": "-out-of-memory-error/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [],
                "code": [
                  "OutOfMemoryError()",
                  "OutOfMemoryError(message: String?)"
                ]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "getStackTraceAddresses",
                "description": [
                  "Returns a list of stack trace addresses representing the stack trace\npertaining to this throwable."
                ],
                "code": ["fun Throwable.getStackTraceAddresses(): List<Long>"]
              }
            ]
          }
        ]
      },
      {
        "name": "Pair",
        "description": ["Represents a generic pair of two values."],
        "code": ["data class Pair<out A, out B> : Serializable"],
        "url": "-pair/index.html",
        "subcategories": [
          {
            "name": "Parameters",
            "declarations": [
              {
                "name": "<init>",
                "description": ["Creates a new instance of Pair."],
                "code": ["Pair(first: A, second: B)"]
              }
            ]
          },
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "first",
                "description": ["First value."],
                "code": ["val first: A"]
              },
              {
                "name": "second",
                "description": ["Second value."],
                "code": ["val second: B"]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "toString",
                "description": [
                  "Returns string representation of the Pair including its first and second values."
                ],
                "code": ["fun toString(): String"]
              }
            ]
          },
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "toList",
                "description": ["Converts this pair into a list."],
                "code": ["fun <T> Pair<T, T>.toList(): List<T>"]
              }
            ]
          },
          { "name": "Extension Functions", "declarations": [] }
        ]
      },
      {
        "name": "Result",
        "description": [
          "A discriminated union that encapsulates a successful outcome with a value of type T\nor a failure with an arbitrary Throwable exception."
        ],
        "code": ["class Result<out T> : Serializable"],
        "url": "-result/index.html",
        "subcategories": [
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "isFailure",
                "description": [
                  "Returns true if this instance represents a failed outcome.\nIn this case isSuccess returns false."
                ],
                "code": ["val isFailure: Boolean"]
              },
              {
                "name": "isSuccess",
                "description": [
                  "Returns true if this instance represents a successful outcome.\nIn this case isFailure returns false."
                ],
                "code": ["val isSuccess: Boolean"]
              }
            ]
          },
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "exceptionOrNull",
                "description": [
                  "Returns the encapsulated Throwable exception if this instance represents failure or null\nif it is success."
                ],
                "code": ["fun exceptionOrNull(): Throwable?"]
              },
              {
                "name": "getOrNull",
                "description": [
                  "Returns the encapsulated value if this instance represents success or null\nif it is failure."
                ],
                "code": ["fun getOrNull(): T?"]
              },
              {
                "name": "toString",
                "description": [
                  "Returns a string Success(v) if this instance represents success\nwhere v is a string representation of the value or a string Failure(x) if\nit is failure where x is a string representation of the exception."
                ],
                "code": ["fun toString(): String"]
              }
            ]
          },
          {
            "name": "Companion Object Functions",
            "declarations": [
              {
                "name": "failure",
                "description": [
                  "Returns an instance that encapsulates the given Throwable as failure."
                ],
                "code": ["fun <T> failure(exception: Throwable): Result<T>"]
              },
              {
                "name": "success",
                "description": [
                  "Returns an instance that encapsulates the given value as successful value."
                ],
                "code": ["fun <T> success(value: T): Result<T>"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "fold",
                "description": [
                  "Returns the result of onSuccess for the encapsulated value if this instance represents success\nor the result of onFailure function for the encapsulated Throwable exception if it is failure."
                ],
                "code": [
                  "fun <R, T> Result<T>.fold(    onSuccess: (value: T) -> R,     onFailure: (exception: Throwable) -> R): R"
                ]
              },
              {
                "name": "getOrDefault",
                "description": [
                  "Returns the encapsulated value if this instance represents success or the\ndefaultValue if it is failure."
                ],
                "code": [
                  "fun <R, T : R> Result<T>.getOrDefault(defaultValue: R): R"
                ]
              },
              {
                "name": "getOrElse",
                "description": [
                  "Returns the encapsulated value if this instance represents success or the\nresult of onFailure function for the encapsulated Throwable exception if it is failure."
                ],
                "code": [
                  "fun <R, T : R> Result<T>.getOrElse(    onFailure: (exception: Throwable) -> R): R"
                ]
              },
              {
                "name": "getOrThrow",
                "description": [
                  "Returns the encapsulated value if this instance represents success or throws the encapsulated Throwable exception\nif it is failure."
                ],
                "code": ["fun <T> Result<T>.getOrThrow(): T"]
              },
              {
                "name": "map",
                "description": [
                  "Returns the encapsulated result of the given transform function applied to the encapsulated value\nif this instance represents success or the\noriginal encapsulated Throwable exception if it is failure."
                ],
                "code": [
                  "fun <R, T> Result<T>.map(    transform: (value: T) -> R): Result<R>"
                ]
              },
              {
                "name": "mapCatching",
                "description": [
                  "Returns the encapsulated result of the given transform function applied to the encapsulated value\nif this instance represents success or the\noriginal encapsulated Throwable exception if it is failure."
                ],
                "code": [
                  "fun <R, T> Result<T>.mapCatching(    transform: (value: T) -> R): Result<R>"
                ]
              },
              {
                "name": "onFailure",
                "description": [
                  "Performs the given action on the encapsulated Throwable exception if this instance represents failure.\nReturns the original Result unchanged."
                ],
                "code": [
                  "fun <T> Result<T>.onFailure(    action: (exception: Throwable) -> Unit): Result<T>"
                ]
              },
              {
                "name": "onSuccess",
                "description": [
                  "Performs the given action on the encapsulated value if this instance represents success.\nReturns the original Result unchanged."
                ],
                "code": [
                  "fun <T> Result<T>.onSuccess(    action: (value: T) -> Unit): Result<T>"
                ]
              },
              {
                "name": "recover",
                "description": [
                  "Returns the encapsulated result of the given transform function applied to the encapsulated Throwable exception\nif this instance represents failure or the\noriginal encapsulated value if it is success."
                ],
                "code": [
                  "fun <R, T : R> Result<T>.recover(    transform: (exception: Throwable) -> R): Result<R>"
                ]
              },
              {
                "name": "recoverCatching",
                "description": [
                  "Returns the encapsulated result of the given transform function applied to the encapsulated Throwable exception\nif this instance represents failure or the\noriginal encapsulated value if it is success."
                ],
                "code": [
                  "fun <R, T : R> Result<T>.recoverCatching(    transform: (exception: Throwable) -> R): Result<R>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "Short",
        "description": [
          "Represents a 16-bit signed integer.\nOn the JVM, non-nullable values of this type are represented as values of the primitive type short."
        ],
        "code": ["class Short : Number, Comparable<Short>"],
        "url": "-short/index.html",
        "subcategories": [
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "compareTo",
                "description": [
                  "Compares this value with the specified value for order.\nReturns zero if this value is equal to the specified other value, a negative number if it's less than other,\nor a positive number if it's greater than other."
                ],
                "code": [
                  "operator fun compareTo(other: Byte): Int",
                  "operator fun compareTo(other: Short): Int",
                  "operator fun compareTo(other: Int): Int",
                  "operator fun compareTo(other: Long): Int",
                  "operator fun compareTo(other: Float): Int",
                  "operator fun compareTo(other: Double): Int"
                ]
              },
              {
                "name": "dec",
                "description": ["Returns this value decremented by one."],
                "code": ["operator fun dec(): Short"]
              },
              {
                "name": "div",
                "description": [
                  "Divides this value by the other value, truncating the result to an integer that is closer to zero.",
                  "Divides this value by the other value."
                ],
                "code": [
                  "operator fun div(other: Byte): Int",
                  "operator fun div(other: Short): Int",
                  "operator fun div(other: Int): Int",
                  "operator fun div(other: Long): Long",
                  "operator fun div(other: Float): Float",
                  "operator fun div(other: Double): Double"
                ]
              },
              {
                "name": "equals",
                "description": [
                  "Indicates whether some other object is \"equal to\" this one. Implementations must fulfil the following\nrequirements:"
                ],
                "code": [
                  "fun equals(other: Short): Boolean",
                  "fun equals(other: Any?): Boolean"
                ]
              },
              {
                "name": "hashCode",
                "description": [
                  "Returns a hash code value for the object.  The general contract of hashCode is:"
                ],
                "code": ["fun hashCode(): Int"]
              },
              {
                "name": "inc",
                "description": ["Returns this value incremented by one."],
                "code": ["operator fun inc(): Short"]
              },
              {
                "name": "minus",
                "description": ["Subtracts the other value from this value."],
                "code": [
                  "operator fun minus(other: Byte): Int",
                  "operator fun minus(other: Short): Int",
                  "operator fun minus(other: Int): Int",
                  "operator fun minus(other: Long): Long",
                  "operator fun minus(other: Float): Float",
                  "operator fun minus(other: Double): Double"
                ]
              },
              {
                "name": "plus",
                "description": ["Adds the other value to this value."],
                "code": [
                  "operator fun plus(other: Byte): Int",
                  "operator fun plus(other: Short): Int",
                  "operator fun plus(other: Int): Int",
                  "operator fun plus(other: Long): Long",
                  "operator fun plus(other: Float): Float",
                  "operator fun plus(other: Double): Double"
                ]
              },
              {
                "name": "rangeTo",
                "description": [
                  "Creates a range from this value to the specified other value."
                ],
                "code": [
                  "operator fun rangeTo(other: Byte): IntRange",
                  "operator fun rangeTo(other: Short): IntRange",
                  "operator fun rangeTo(other: Int): IntRange",
                  "operator fun rangeTo(other: Long): LongRange"
                ]
              },
              {
                "name": "rangeUntil",
                "description": [
                  "Creates a range from this value up to but excluding the specified other value."
                ],
                "code": [
                  "operator fun rangeUntil(other: Byte): IntRange",
                  "operator fun rangeUntil(other: Short): IntRange",
                  "operator fun rangeUntil(other: Int): IntRange",
                  "operator fun rangeUntil(other: Long): LongRange"
                ]
              },
              {
                "name": "rem",
                "description": [
                  "Calculates the remainder of truncating division of this value (dividend) by the other value (divisor)."
                ],
                "code": [
                  "operator fun rem(other: Byte): Int",
                  "operator fun rem(other: Short): Int",
                  "operator fun rem(other: Int): Int",
                  "operator fun rem(other: Long): Long",
                  "operator fun rem(other: Float): Float",
                  "operator fun rem(other: Double): Double"
                ]
              },
              {
                "name": "times",
                "description": ["Multiplies this value by the other value."],
                "code": [
                  "operator fun times(other: Byte): Int",
                  "operator fun times(other: Short): Int",
                  "operator fun times(other: Int): Int",
                  "operator fun times(other: Long): Long",
                  "operator fun times(other: Float): Float",
                  "operator fun times(other: Double): Double"
                ]
              },
              {
                "name": "toByte",
                "description": ["Converts this Short value to Byte."],
                "code": ["fun toByte(): Byte"]
              },
              {
                "name": "toChar",
                "description": ["Converts this Short value to Char."],
                "code": ["fun toChar(): Char"]
              },
              {
                "name": "toDouble",
                "description": ["Converts this Short value to Double."],
                "code": ["fun toDouble(): Double"]
              },
              {
                "name": "toFloat",
                "description": ["Converts this Short value to Float."],
                "code": ["fun toFloat(): Float"]
              },
              {
                "name": "toInt",
                "description": ["Converts this Short value to Int."],
                "code": ["fun toInt(): Int"]
              },
              {
                "name": "toLong",
                "description": ["Converts this Short value to Long."],
                "code": ["fun toLong(): Long"]
              },
              {
                "name": "toShort",
                "description": ["Returns this value."],
                "code": ["fun toShort(): Short"]
              },
              {
                "name": "toString",
                "description": [
                  "Returns a string representation of the object."
                ],
                "code": ["fun toString(): String"]
              },
              {
                "name": "unaryMinus",
                "description": ["Returns the negative of this value."],
                "code": ["operator fun unaryMinus(): Int"]
              },
              {
                "name": "unaryPlus",
                "description": ["Returns this value."],
                "code": ["operator fun unaryPlus(): Int"]
              }
            ]
          },
          {
            "name": "Companion Object Properties",
            "declarations": [
              {
                "name": "MAX_VALUE",
                "description": [
                  "A constant holding the maximum value an instance of Short can have."
                ],
                "code": ["const val MAX_VALUE: Short"]
              },
              {
                "name": "MIN_VALUE",
                "description": [
                  "A constant holding the minimum value an instance of Short can have."
                ],
                "code": ["const val MIN_VALUE: Short"]
              },
              {
                "name": "SIZE_BITS",
                "description": [
                  "The number of bits used to represent an instance of Short in a binary form."
                ],
                "code": ["const val SIZE_BITS: Int"]
              },
              {
                "name": "SIZE_BYTES",
                "description": [
                  "The number of bytes used to represent an instance of Short in a binary form."
                ],
                "code": ["const val SIZE_BYTES: Int"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "and",
                "description": [
                  "Performs a bitwise AND operation between the two values."
                ],
                "code": ["infix fun Short.and(other: Short): Short"]
              },
              {
                "name": "coerceAtLeast",
                "description": [
                  "Ensures that this value is not less than the specified minimumValue."
                ],
                "code": [
                  "fun Short.coerceAtLeast(minimumValue: Short): Short",
                  "fun <T : Comparable<T>> T.coerceAtLeast(minimumValue: T): T"
                ]
              },
              {
                "name": "coerceAtMost",
                "description": [
                  "Ensures that this value is not greater than the specified maximumValue."
                ],
                "code": [
                  "fun Short.coerceAtMost(maximumValue: Short): Short",
                  "fun <T : Comparable<T>> T.coerceAtMost(maximumValue: T): T"
                ]
              },
              {
                "name": "coerceIn",
                "description": [
                  "Ensures that this value lies in the specified range minimumValue..maximumValue.",
                  "Ensures that this value lies in the specified range."
                ],
                "code": [
                  "fun Short.coerceIn(    minimumValue: Short,     maximumValue: Short): Short",
                  "fun <T : Comparable<T>> T.coerceIn(    minimumValue: T?,     maximumValue: T?): T",
                  "fun <T : Comparable<T>> T.coerceIn(    range: ClosedFloatingPointRange<T>): T",
                  "fun <T : Comparable<T>> T.coerceIn(range: ClosedRange<T>): T"
                ]
              },
              {
                "name": "compareTo",
                "description": [
                  "Compares this object with the specified object for order. Returns zero if this object is equal\nto the specified other object, a negative number if it's less than other, or a positive number\nif it's greater than other."
                ],
                "code": ["infix fun <T> Comparable<T>.compareTo(other: T): Int"]
              },
              {
                "name": "convert",
                "description": [],
                "code": ["fun <R : Any> Short.convert(): R"]
              },
              {
                "name": "countLeadingZeroBits",
                "description": [
                  "Counts the number of consecutive most significant bits that are zero in the binary representation of this Short number."
                ],
                "code": ["fun Short.countLeadingZeroBits(): Int"]
              },
              {
                "name": "countOneBits",
                "description": [
                  "Counts the number of set bits in the binary representation of this Short number."
                ],
                "code": ["fun Short.countOneBits(): Int"]
              },
              {
                "name": "countTrailingZeroBits",
                "description": [
                  "Counts the number of consecutive least significant bits that are zero in the binary representation of this Short number."
                ],
                "code": ["fun Short.countTrailingZeroBits(): Int"]
              },
              {
                "name": "downTo",
                "description": [
                  "Returns a progression from this value down to the specified to value with the step -1."
                ],
                "code": [
                  "infix fun Short.downTo(to: Byte): IntProgression",
                  "infix fun Short.downTo(to: Int): IntProgression",
                  "infix fun Short.downTo(to: Long): LongProgression",
                  "infix fun Short.downTo(to: Short): IntProgression"
                ]
              },
              {
                "name": "floorDiv",
                "description": [
                  "Divides this value by the other value, flooring the result to an integer that is closer to negative infinity."
                ],
                "code": [
                  "fun Short.floorDiv(other: Byte): Int",
                  "fun Short.floorDiv(other: Short): Int",
                  "fun Short.floorDiv(other: Int): Int",
                  "fun Short.floorDiv(other: Long): Long"
                ]
              },
              {
                "name": "inv",
                "description": ["Inverts the bits in this value."],
                "code": ["fun Short.inv(): Short"]
              },
              {
                "name": "mod",
                "description": [
                  "Calculates the remainder of flooring division of this value (dividend) by the other value (divisor)."
                ],
                "code": [
                  "fun Short.mod(other: Byte): Byte",
                  "fun Short.mod(other: Short): Short",
                  "fun Short.mod(other: Int): Int",
                  "fun Short.mod(other: Long): Long"
                ]
              },
              {
                "name": "narrow",
                "description": [],
                "code": ["fun <R : Number> Number.narrow(): R"]
              },
              {
                "name": "or",
                "description": [
                  "Performs a bitwise OR operation between the two values."
                ],
                "code": ["infix fun Short.or(other: Short): Short"]
              },
              {
                "name": "rangeTo",
                "description": [
                  "Creates a range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeTo(    that: T): ClosedRange<T>"
                ]
              },
              {
                "name": "rangeUntil",
                "description": [
                  "Creates an open-ended range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeUntil(    that: T): OpenEndRange<T>"
                ]
              },
              {
                "name": "rotateLeft",
                "description": [
                  "Rotates the binary representation of this Short number left by the specified bitCount number of bits.\nThe most significant bits pushed out from the left side reenter the number as the least significant bits on the right side."
                ],
                "code": ["fun Short.rotateLeft(bitCount: Int): Short"]
              },
              {
                "name": "rotateRight",
                "description": [
                  "Rotates the binary representation of this Short number right by the specified bitCount number of bits.\nThe least significant bits pushed out from the right side reenter the number as the most significant bits on the left side."
                ],
                "code": ["fun Short.rotateRight(bitCount: Int): Short"]
              },
              {
                "name": "signExtend",
                "description": [],
                "code": ["fun <R : Number> Number.signExtend(): R"]
              },
              {
                "name": "takeHighestOneBit",
                "description": [
                  "Returns a number having a single bit set in the position of the most significant set bit of this Short number,\nor zero, if this number is zero."
                ],
                "code": ["fun Short.takeHighestOneBit(): Short"]
              },
              {
                "name": "takeLowestOneBit",
                "description": [
                  "Returns a number having a single bit set in the position of the least significant set bit of this Short number,\nor zero, if this number is zero."
                ],
                "code": ["fun Short.takeLowestOneBit(): Short"]
              },
              {
                "name": "toHexString",
                "description": [
                  "Formats this Short value using the specified format."
                ],
                "code": [
                  "fun Short.toHexString(    format: HexFormat = HexFormat.Default): String"
                ]
              },
              {
                "name": "toUByte",
                "description": ["Converts this Short value to UByte."],
                "code": ["fun Short.toUByte(): UByte"]
              },
              {
                "name": "toUInt",
                "description": ["Converts this Short value to UInt."],
                "code": ["fun Short.toUInt(): UInt"]
              },
              {
                "name": "toULong",
                "description": ["Converts this Short value to ULong."],
                "code": ["fun Short.toULong(): ULong"]
              },
              {
                "name": "toUShort",
                "description": ["Converts this Short value to UShort."],
                "code": ["fun Short.toUShort(): UShort"]
              },
              {
                "name": "until",
                "description": [
                  "Returns a range from this value up to but excluding the specified to value."
                ],
                "code": [
                  "infix fun Short.until(to: Byte): IntRange",
                  "infix fun Short.until(to: Int): IntRange",
                  "infix fun Short.until(to: Long): LongRange",
                  "infix fun Short.until(to: Short): IntRange"
                ]
              },
              {
                "name": "xor",
                "description": [
                  "Performs a bitwise XOR operation between the two values."
                ],
                "code": ["infix fun Short.xor(other: Short): Short"]
              }
            ]
          }
        ]
      },
      {
        "name": "ShortArray",
        "description": [
          "An array of shorts. When targeting the JVM, instances of this class are represented as short[]."
        ],
        "code": ["class ShortArray"],
        "url": "-short-array/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Creates a new array of the specified size, where each element is calculated by calling the specified\ninit function.",
                  "Creates a new array of the specified size, with all elements initialized to zero."
                ],
                "code": [
                  "<init>(size: Int, init: (Int) -> Short)",
                  "<init>(size: Int)"
                ]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "size",
                "description": ["Returns the number of elements in the array."],
                "code": ["val size: Int"]
              }
            ]
          },
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "get",
                "description": [
                  "Returns the array element at the given index.  This method can be called using the index operator."
                ],
                "code": ["operator fun get(index: Int): Short"]
              },
              {
                "name": "iterator",
                "description": [
                  "Creates an iterator over the elements of the array."
                ],
                "code": ["operator fun iterator(): ShortIterator"]
              },
              {
                "name": "set",
                "description": [
                  "Sets the element at the given index to the given value. This method can be called using the index operator."
                ],
                "code": ["operator fun set(index: Int, value: Short)"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "indices",
                "description": [
                  "Returns the range of valid indices for the array."
                ],
                "code": ["val ShortArray.indices: IntRange"]
              },
              {
                "name": "lastIndex",
                "description": ["Returns the last valid index for the array."],
                "code": ["val ShortArray.lastIndex: Int"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "all",
                "description": [
                  "Returns true if all elements match the given predicate."
                ],
                "code": [
                  "fun ShortArray.all(predicate: (Short) -> Boolean): Boolean"
                ]
              },
              {
                "name": "any",
                "description": [
                  "Returns true if array has at least one element.",
                  "Returns true if at least one element matches the given predicate."
                ],
                "code": [
                  "fun ShortArray.any(): Boolean",
                  "fun ShortArray.any(predicate: (Short) -> Boolean): Boolean"
                ]
              },
              {
                "name": "asIterable",
                "description": [
                  "Creates an Iterable instance that wraps the original array returning its elements when being iterated."
                ],
                "code": ["fun ShortArray.asIterable(): Iterable<Short>"]
              },
              {
                "name": "asSequence",
                "description": [
                  "Creates a Sequence instance that wraps the original array returning its elements when being iterated."
                ],
                "code": ["fun ShortArray.asSequence(): Sequence<Short>"]
              },
              {
                "name": "associate",
                "description": [
                  "Returns a Map containing key-value pairs provided by transform function\napplied to elements of the given array."
                ],
                "code": [
                  "fun <K, V> ShortArray.associate(    transform: (Short) -> Pair<K, V>): Map<K, V>"
                ]
              },
              {
                "name": "associateBy",
                "description": [
                  "Returns a Map containing the elements from the given array indexed by the key\nreturned from keySelector function applied to each element.",
                  "Returns a Map containing the values provided by valueTransform and indexed by keySelector functions applied to elements of the given array."
                ],
                "code": [
                  "fun <K> ShortArray.associateBy(    keySelector: (Short) -> K): Map<K, Short>",
                  "fun <K, V> ShortArray.associateBy(    keySelector: (Short) -> K,     valueTransform: (Short) -> V): Map<K, V>"
                ]
              },
              {
                "name": "associateByTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function applied to each element of the given array\nand value is the element itself.",
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function and\nand value is provided by the valueTransform function applied to elements of the given array."
                ],
                "code": [
                  "fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(    destination: M,     keySelector: (Short) -> K): M",
                  "fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(    destination: M,     keySelector: (Short) -> K,     valueTransform: (Short) -> V): M"
                ]
              },
              {
                "name": "associateTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs\nprovided by transform function applied to each element of the given array."
                ],
                "code": [
                  "fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(    destination: M,     transform: (Short) -> Pair<K, V>): M"
                ]
              },
              {
                "name": "associateWith",
                "description": [
                  "Returns a Map where keys are elements from the given array and values are\nproduced by the valueSelector function applied to each element."
                ],
                "code": [
                  "fun <V> ShortArray.associateWith(    valueSelector: (Short) -> V): Map<Short, V>"
                ]
              },
              {
                "name": "associateWithTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs for each element of the given array,\nwhere key is the element itself and value is provided by the valueSelector function applied to that key."
                ],
                "code": [
                  "fun <V, M : MutableMap<in Short, in V>> ShortArray.associateWithTo(    destination: M,     valueSelector: (Short) -> V): M"
                ]
              },
              {
                "name": "asUShortArray",
                "description": [
                  "Returns an array of type UShortArray, which is a view of this array where each element is an unsigned reinterpretation\nof the corresponding element of this array."
                ],
                "code": ["fun ShortArray.asUShortArray(): UShortArray"]
              },
              {
                "name": "average",
                "description": [
                  "Returns an average value of elements in the array."
                ],
                "code": ["fun ShortArray.average(): Double"]
              },
              {
                "name": "binarySearch",
                "description": [
                  "Searches the array or the range of the array for the provided element using the binary search algorithm.\nThe array is expected to be sorted, otherwise the result is undefined."
                ],
                "code": [
                  "fun ShortArray.binarySearch(    element: Short,     fromIndex: Int = 0,     toIndex: Int = size): Int"
                ]
              },
              {
                "name": "component1",
                "description": ["Returns 1st element from the array."],
                "code": ["operator fun ShortArray.component1(): Short"]
              },
              {
                "name": "component2",
                "description": ["Returns 2nd element from the array."],
                "code": ["operator fun ShortArray.component2(): Short"]
              },
              {
                "name": "component3",
                "description": ["Returns 3rd element from the array."],
                "code": ["operator fun ShortArray.component3(): Short"]
              },
              {
                "name": "component4",
                "description": ["Returns 4th element from the array."],
                "code": ["operator fun ShortArray.component4(): Short"]
              },
              {
                "name": "component5",
                "description": ["Returns 5th element from the array."],
                "code": ["operator fun ShortArray.component5(): Short"]
              },
              {
                "name": "contains",
                "description": [
                  "Returns true if element is found in the array."
                ],
                "code": [
                  "operator fun ShortArray.contains(element: Short): Boolean"
                ]
              },
              {
                "name": "contentEquals",
                "description": [
                  "Returns true if the two specified arrays are structurally equal to one another,\ni.e. contain the same number of the same elements in the same order."
                ],
                "code": [
                  "infix fun ShortArray.contentEquals(    other: ShortArray): Boolean"
                ]
              },
              {
                "name": "contentHashCode",
                "description": [
                  "Returns a hash code based on the contents of this array as if it is List."
                ],
                "code": ["fun ShortArray.contentHashCode(): Int"]
              },
              {
                "name": "contentToString",
                "description": [
                  "Returns a string representation of the contents of the specified array as if it is List."
                ],
                "code": ["fun ShortArray.contentToString(): String"]
              },
              {
                "name": "count",
                "description": [
                  "Returns the number of elements in this array.",
                  "Returns the number of elements matching the given predicate."
                ],
                "code": [
                  "fun ShortArray.count(): Int",
                  "fun ShortArray.count(predicate: (Short) -> Boolean): Int"
                ]
              },
              {
                "name": "distinct",
                "description": [
                  "Returns a list containing only distinct elements from the given array."
                ],
                "code": ["fun ShortArray.distinct(): List<Short>"]
              },
              {
                "name": "distinctBy",
                "description": [
                  "Returns a list containing only elements from the given array\nhaving distinct keys returned by the given selector function."
                ],
                "code": [
                  "fun <K> ShortArray.distinctBy(    selector: (Short) -> K): List<Short>"
                ]
              },
              {
                "name": "drop",
                "description": [
                  "Returns a list containing all elements except first n elements."
                ],
                "code": ["fun ShortArray.drop(n: Int): List<Short>"]
              },
              {
                "name": "dropLast",
                "description": [
                  "Returns a list containing all elements except last n elements."
                ],
                "code": ["fun ShortArray.dropLast(n: Int): List<Short>"]
              },
              {
                "name": "dropLastWhile",
                "description": [
                  "Returns a list containing all elements except last elements that satisfy the given predicate."
                ],
                "code": [
                  "fun ShortArray.dropLastWhile(    predicate: (Short) -> Boolean): List<Short>"
                ]
              },
              {
                "name": "dropWhile",
                "description": [
                  "Returns a list containing all elements except first elements that satisfy the given predicate."
                ],
                "code": [
                  "fun ShortArray.dropWhile(    predicate: (Short) -> Boolean): List<Short>"
                ]
              },
              {
                "name": "elementAtOrElse",
                "description": [
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
                ],
                "code": [
                  "fun ShortArray.elementAtOrElse(    index: Int,     defaultValue: (Int) -> Short): Short"
                ]
              },
              {
                "name": "elementAtOrNull",
                "description": [
                  "Returns an element at the given index or null if the index is out of bounds of this array."
                ],
                "code": ["fun ShortArray.elementAtOrNull(index: Int): Short?"]
              },
              {
                "name": "filter",
                "description": [
                  "Returns a list containing only elements matching the given predicate."
                ],
                "code": [
                  "fun ShortArray.filter(    predicate: (Short) -> Boolean): List<Short>"
                ]
              },
              {
                "name": "filterIndexed",
                "description": [
                  "Returns a list containing only elements matching the given predicate."
                ],
                "code": [
                  "fun ShortArray.filterIndexed(    predicate: (index: Int, Short) -> Boolean): List<Short>"
                ]
              },
              {
                "name": "filterIndexedTo",
                "description": [
                  "Appends all elements matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(    destination: C,     predicate: (index: Int, Short) -> Boolean): C"
                ]
              },
              {
                "name": "filterNot",
                "description": [
                  "Returns a list containing all elements not matching the given predicate."
                ],
                "code": [
                  "fun ShortArray.filterNot(    predicate: (Short) -> Boolean): List<Short>"
                ]
              },
              {
                "name": "filterNotTo",
                "description": [
                  "Appends all elements not matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(    destination: C,     predicate: (Short) -> Boolean): C"
                ]
              },
              {
                "name": "filterTo",
                "description": [
                  "Appends all elements matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in Short>> ShortArray.filterTo(    destination: C,     predicate: (Short) -> Boolean): C"
                ]
              },
              {
                "name": "find",
                "description": [
                  "Returns the first element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun ShortArray.find(predicate: (Short) -> Boolean): Short?"
                ]
              },
              {
                "name": "findLast",
                "description": [
                  "Returns the last element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun ShortArray.findLast(    predicate: (Short) -> Boolean): Short?"
                ]
              },
              {
                "name": "first",
                "description": [
                  "Returns the first element.",
                  "Returns the first element matching the given predicate."
                ],
                "code": [
                  "fun ShortArray.first(): Short",
                  "fun ShortArray.first(predicate: (Short) -> Boolean): Short"
                ]
              },
              {
                "name": "firstOrNull",
                "description": [
                  "Returns the first element, or null if the array is empty.",
                  "Returns the first element matching the given predicate, or null if element was not found."
                ],
                "code": [
                  "fun ShortArray.firstOrNull(): Short?",
                  "fun ShortArray.firstOrNull(    predicate: (Short) -> Boolean): Short?"
                ]
              },
              {
                "name": "flatMap",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element of original array."
                ],
                "code": [
                  "fun <R> ShortArray.flatMap(    transform: (Short) -> Iterable<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexed",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element\nand its index in the original array."
                ],
                "code": [
                  "fun <R> ShortArray.flatMapIndexed(    transform: (index: Int, Short) -> Iterable<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexedTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each element\nand its index in the original array, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> ShortArray.flatMapIndexedTo(    destination: C,     transform: (index: Int, Short) -> Iterable<R>): C"
                ]
              },
              {
                "name": "flatMapTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each element of original array, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(    destination: C,     transform: (Short) -> Iterable<R>): C"
                ]
              },
              {
                "name": "fold",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun <R> ShortArray.fold(    initial: R,     operation: (acc: R, Short) -> R): R"
                ]
              },
              {
                "name": "foldIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element with its index in the original array."
                ],
                "code": [
                  "fun <R> ShortArray.foldIndexed(    initial: R,     operation: (index: Int, acc: R, Short) -> R): R"
                ]
              },
              {
                "name": "foldRight",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun <R> ShortArray.foldRight(    initial: R,     operation: (Short, acc: R) -> R): R"
                ]
              },
              {
                "name": "foldRightIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun <R> ShortArray.foldRightIndexed(    initial: R,     operation: (index: Int, Short, acc: R) -> R): R"
                ]
              },
              {
                "name": "forEach",
                "description": ["Performs the given action on each element."],
                "code": ["fun ShortArray.forEach(action: (Short) -> Unit)"]
              },
              {
                "name": "forEachIndexed",
                "description": [
                  "Performs the given action on each element, providing sequential index with the element."
                ],
                "code": [
                  "fun ShortArray.forEachIndexed(    action: (index: Int, Short) -> Unit)"
                ]
              },
              {
                "name": "getOrElse",
                "description": [
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
                ],
                "code": [
                  "fun ShortArray.getOrElse(    index: Int,     defaultValue: (Int) -> Short): Short"
                ]
              },
              {
                "name": "getOrNull",
                "description": [
                  "Returns an element at the given index or null if the index is out of bounds of this array."
                ],
                "code": ["fun ShortArray.getOrNull(index: Int): Short?"]
              },
              {
                "name": "groupBy",
                "description": [
                  "Groups elements of the original array by the key returned by the given keySelector function\napplied to each element and returns a map where each group key is associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original array\nby the key returned by the given keySelector function applied to the element\nand returns a map where each group key is associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K> ShortArray.groupBy(    keySelector: (Short) -> K): Map<K, List<Short>>",
                  "fun <K, V> ShortArray.groupBy(    keySelector: (Short) -> K,     valueTransform: (Short) -> V): Map<K, List<V>>"
                ]
              },
              {
                "name": "groupByTo",
                "description": [
                  "Groups elements of the original array by the key returned by the given keySelector function\napplied to each element and puts to the destination map each group key associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original array\nby the key returned by the given keySelector function applied to the element\nand puts to the destination map each group key associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(    destination: M,     keySelector: (Short) -> K): M",
                  "fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(    destination: M,     keySelector: (Short) -> K,     valueTransform: (Short) -> V): M"
                ]
              },
              {
                "name": "indexOf",
                "description": [
                  "Returns first index of element, or -1 if the array does not contain element."
                ],
                "code": ["fun ShortArray.indexOf(element: Short): Int"]
              },
              {
                "name": "indexOfFirst",
                "description": [
                  "Returns index of the first element matching the given predicate, or -1 if the array does not contain such element."
                ],
                "code": [
                  "fun ShortArray.indexOfFirst(    predicate: (Short) -> Boolean): Int"
                ]
              },
              {
                "name": "indexOfLast",
                "description": [
                  "Returns index of the last element matching the given predicate, or -1 if the array does not contain such element."
                ],
                "code": [
                  "fun ShortArray.indexOfLast(    predicate: (Short) -> Boolean): Int"
                ]
              },
              {
                "name": "intersect",
                "description": [
                  "Returns a set containing all elements that are contained by both this array and the specified collection."
                ],
                "code": [
                  "infix fun ShortArray.intersect(    other: Iterable<Short>): Set<Short>"
                ]
              },
              {
                "name": "isEmpty",
                "description": ["Returns true if the array is empty."],
                "code": ["fun ShortArray.isEmpty(): Boolean"]
              },
              {
                "name": "isNotEmpty",
                "description": ["Returns true if the array is not empty."],
                "code": ["fun ShortArray.isNotEmpty(): Boolean"]
              },
              {
                "name": "joinTo",
                "description": [
                  "Appends the string from all the elements separated using separator and using the given prefix and postfix if supplied."
                ],
                "code": [
                  "fun <A : Appendable> ShortArray.joinTo(    buffer: A,     separator: CharSequence = \", \",     prefix: CharSequence = \"\",     postfix: CharSequence = \"\",     limit: Int = -1,     truncated: CharSequence = \"...\",     transform: ((Short) -> CharSequence)? = null): A"
                ]
              },
              {
                "name": "joinToString",
                "description": [
                  "Creates a string from all the elements separated using separator and using the given prefix and postfix if supplied."
                ],
                "code": [
                  "fun ShortArray.joinToString(    separator: CharSequence = \", \",     prefix: CharSequence = \"\",     postfix: CharSequence = \"\",     limit: Int = -1,     truncated: CharSequence = \"...\",     transform: ((Short) -> CharSequence)? = null): String"
                ]
              },
              {
                "name": "last",
                "description": [
                  "Returns the last element.",
                  "Returns the last element matching the given predicate."
                ],
                "code": [
                  "fun ShortArray.last(): Short",
                  "fun ShortArray.last(predicate: (Short) -> Boolean): Short"
                ]
              },
              {
                "name": "lastIndexOf",
                "description": [
                  "Returns last index of element, or -1 if the array does not contain element."
                ],
                "code": ["fun ShortArray.lastIndexOf(element: Short): Int"]
              },
              {
                "name": "lastOrNull",
                "description": [
                  "Returns the last element, or null if the array is empty.",
                  "Returns the last element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun ShortArray.lastOrNull(): Short?",
                  "fun ShortArray.lastOrNull(    predicate: (Short) -> Boolean): Short?"
                ]
              },
              {
                "name": "map",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each element in the original array."
                ],
                "code": [
                  "fun <R> ShortArray.map(transform: (Short) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexed",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each element and its index in the original array."
                ],
                "code": [
                  "fun <R> ShortArray.mapIndexed(    transform: (index: Int, Short) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexedTo",
                "description": [
                  "Applies the given transform function to each element and its index in the original array\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(    destination: C,     transform: (index: Int, Short) -> R): C"
                ]
              },
              {
                "name": "mapTo",
                "description": [
                  "Applies the given transform function to each element of the original array\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> ShortArray.mapTo(    destination: C,     transform: (Short) -> R): C"
                ]
              },
              {
                "name": "maxByOrNull",
                "description": [
                  "Returns the first element yielding the largest value of the given function or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> ShortArray.maxByOrNull(    selector: (Short) -> R): Short?"
                ]
              },
              {
                "name": "maxOf",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each element in the array."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.maxOf(    selector: (Short) -> R): R"
                ]
              },
              {
                "name": "maxOfOrNull",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.maxOfOrNull(    selector: (Short) -> R): R?"
                ]
              },
              {
                "name": "maxOfWith",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun <R> ShortArray.maxOfWith(    comparator: Comparator<in R>,     selector: (Short) -> R): R"
                ]
              },
              {
                "name": "maxOfWithOrNull",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R> ShortArray.maxOfWithOrNull(    comparator: Comparator<in R>,     selector: (Short) -> R): R?"
                ]
              },
              {
                "name": "maxOrNull",
                "description": [
                  "Returns the largest element or null if there are no elements."
                ],
                "code": ["fun ShortArray.maxOrNull(): Short?"]
              },
              {
                "name": "maxWith",
                "description": [
                  "Returns the first element having the largest value according to the provided comparator."
                ],
                "code": [
                  "fun ShortArray.maxWith(    comparator: Comparator<in Short>): Short",
                  "fun ShortArray.maxWith(    comparator: Comparator<in Short>): Short?"
                ]
              },
              {
                "name": "maxWithOrNull",
                "description": [
                  "Returns the first element having the largest value according to the provided comparator or null if there are no elements."
                ],
                "code": [
                  "fun ShortArray.maxWithOrNull(    comparator: Comparator<in Short>): Short?"
                ]
              },
              {
                "name": "minByOrNull",
                "description": [
                  "Returns the first element yielding the smallest value of the given function or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> ShortArray.minByOrNull(    selector: (Short) -> R): Short?"
                ]
              },
              {
                "name": "minOf",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the array."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.minOf(    selector: (Short) -> R): R"
                ]
              },
              {
                "name": "minOfOrNull",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_array<R>.minOfOrNull(    selector: (Short) -> R): R?"
                ]
              },
              {
                "name": "minOfWith",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun <R> ShortArray.minOfWith(    comparator: Comparator<in R>,     selector: (Short) -> R): R"
                ]
              },
              {
                "name": "minOfWithOrNull",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the array or null if there are no elements."
                ],
                "code": [
                  "fun <R> ShortArray.minOfWithOrNull(    comparator: Comparator<in R>,     selector: (Short) -> R): R?"
                ]
              },
              {
                "name": "minOrNull",
                "description": [
                  "Returns the smallest element or null if there are no elements."
                ],
                "code": ["fun ShortArray.minOrNull(): Short?"]
              },
              {
                "name": "minWith",
                "description": [
                  "Returns the first element having the smallest value according to the provided comparator."
                ],
                "code": [
                  "fun ShortArray.minWith(    comparator: Comparator<in Short>): Short",
                  "fun ShortArray.minWith(    comparator: Comparator<in Short>): Short?"
                ]
              },
              {
                "name": "minWithOrNull",
                "description": [
                  "Returns the first element having the smallest value according to the provided comparator or null if there are no elements."
                ],
                "code": [
                  "fun ShortArray.minWithOrNull(    comparator: Comparator<in Short>): Short?"
                ]
              },
              {
                "name": "none",
                "description": [
                  "Returns true if the array has no elements.",
                  "Returns true if no elements match the given predicate."
                ],
                "code": [
                  "fun ShortArray.none(): Boolean",
                  "fun ShortArray.none(predicate: (Short) -> Boolean): Boolean"
                ]
              },
              {
                "name": "onEach",
                "description": [
                  "Performs the given action on each element and returns the array itself afterwards."
                ],
                "code": [
                  "fun ShortArray.onEach(action: (Short) -> Unit): ShortArray"
                ]
              },
              {
                "name": "onEachIndexed",
                "description": [
                  "Performs the given action on each element, providing sequential index with the element,\nand returns the array itself afterwards."
                ],
                "code": [
                  "fun ShortArray.onEachIndexed(    action: (index: Int, Short) -> Unit): ShortArray"
                ]
              },
              {
                "name": "partition",
                "description": [
                  "Splits the original array into pair of lists,\nwhere first list contains elements for which predicate yielded true,\nwhile second list contains elements for which predicate yielded false."
                ],
                "code": [
                  "fun ShortArray.partition(    predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>>"
                ]
              },
              {
                "name": "random",
                "description": [
                  "Returns a random element from this array.",
                  "Returns a random element from this array using the specified source of randomness."
                ],
                "code": [
                  "fun ShortArray.random(): Short",
                  "fun ShortArray.random(random: Random): Short"
                ]
              },
              {
                "name": "randomOrNull",
                "description": [
                  "Returns a random element from this array, or null if this array is empty.",
                  "Returns a random element from this array using the specified source of randomness, or null if this array is empty."
                ],
                "code": [
                  "fun ShortArray.randomOrNull(): Short?",
                  "fun ShortArray.randomOrNull(random: Random): Short?"
                ]
              },
              {
                "name": "reduce",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun ShortArray.reduce(    operation: (acc: Short, Short) -> Short): Short"
                ]
              },
              {
                "name": "reduceIndexed",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original array."
                ],
                "code": [
                  "fun ShortArray.reduceIndexed(    operation: (index: Int, acc: Short, Short) -> Short): Short"
                ]
              },
              {
                "name": "reduceIndexedOrNull",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original array."
                ],
                "code": [
                  "fun ShortArray.reduceIndexedOrNull(    operation: (index: Int, acc: Short, Short) -> Short): Short?"
                ]
              },
              {
                "name": "reduceOrNull",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun ShortArray.reduceOrNull(    operation: (acc: Short, Short) -> Short): Short?"
                ]
              },
              {
                "name": "reduceRight",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun ShortArray.reduceRight(    operation: (Short, acc: Short) -> Short): Short"
                ]
              },
              {
                "name": "reduceRightIndexed",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun ShortArray.reduceRightIndexed(    operation: (index: Int, Short, acc: Short) -> Short): Short"
                ]
              },
              {
                "name": "reduceRightIndexedOrNull",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun ShortArray.reduceRightIndexedOrNull(    operation: (index: Int, Short, acc: Short) -> Short): Short?"
                ]
              },
              {
                "name": "reduceRightOrNull",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun ShortArray.reduceRightOrNull(    operation: (Short, acc: Short) -> Short): Short?"
                ]
              },
              {
                "name": "refTo",
                "description": [],
                "code": [
                  "fun ShortArray.refTo(index: Int): CValuesRef<ShortVar>"
                ]
              },
              {
                "name": "reverse",
                "description": [
                  "Reverses elements in the array in-place.",
                  "Reverses elements of the array in the specified range in-place."
                ],
                "code": [
                  "fun ShortArray.reverse()",
                  "fun ShortArray.reverse(fromIndex: Int, toIndex: Int)"
                ]
              },
              {
                "name": "reversed",
                "description": [
                  "Returns a list with elements in reversed order."
                ],
                "code": ["fun ShortArray.reversed(): List<Short>"]
              },
              {
                "name": "reversedArray",
                "description": [
                  "Returns an array with elements of this array in reversed order."
                ],
                "code": ["fun ShortArray.reversedArray(): ShortArray"]
              },
              {
                "name": "runningFold",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> ShortArray.runningFold(    initial: R,     operation: (acc: R, Short) -> R): List<R>"
                ]
              },
              {
                "name": "runningFoldIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> ShortArray.runningFoldIndexed(    initial: R,     operation: (index: Int, acc: R, Short) -> R): List<R>"
                ]
              },
              {
                "name": "runningReduce",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with the first element of this array."
                ],
                "code": [
                  "fun ShortArray.runningReduce(    operation: (acc: Short, Short) -> Short): List<Short>"
                ]
              },
              {
                "name": "runningReduceIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with the first element of this array."
                ],
                "code": [
                  "fun ShortArray.runningReduceIndexed(    operation: (index: Int, acc: Short, Short) -> Short): List<Short>"
                ]
              },
              {
                "name": "scan",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> ShortArray.scan(    initial: R,     operation: (acc: R, Short) -> R): List<R>"
                ]
              },
              {
                "name": "scanIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> ShortArray.scanIndexed(    initial: R,     operation: (index: Int, acc: R, Short) -> R): List<R>"
                ]
              },
              {
                "name": "shuffle",
                "description": [
                  "Randomly shuffles elements in this array in-place.",
                  "Randomly shuffles elements in this array in-place using the specified random instance as the source of randomness."
                ],
                "code": [
                  "fun ShortArray.shuffle()",
                  "fun ShortArray.shuffle(random: Random)"
                ]
              },
              {
                "name": "single",
                "description": [
                  "Returns the single element, or throws an exception if the array is empty or has more than one element.",
                  "Returns the single element matching the given predicate, or throws exception if there is no or more than one matching element."
                ],
                "code": [
                  "fun ShortArray.single(): Short",
                  "fun ShortArray.single(predicate: (Short) -> Boolean): Short"
                ]
              },
              {
                "name": "singleOrNull",
                "description": [
                  "Returns single element, or null if the array is empty or has more than one element.",
                  "Returns the single element matching the given predicate, or null if element was not found or more than one element was found."
                ],
                "code": [
                  "fun ShortArray.singleOrNull(): Short?",
                  "fun ShortArray.singleOrNull(    predicate: (Short) -> Boolean): Short?"
                ]
              },
              {
                "name": "slice",
                "description": [
                  "Returns a list containing elements at indices in the specified indices range.",
                  "Returns a list containing elements at specified indices."
                ],
                "code": [
                  "fun ShortArray.slice(indices: IntRange): List<Short>",
                  "fun ShortArray.slice(indices: Iterable<Int>): List<Short>"
                ]
              },
              {
                "name": "sliceArray",
                "description": [
                  "Returns an array containing elements of this array at specified indices.",
                  "Returns an array containing elements at indices in the specified indices range."
                ],
                "code": [
                  "fun ShortArray.sliceArray(    indices: Collection<Int>): ShortArray",
                  "fun ShortArray.sliceArray(indices: IntRange): ShortArray"
                ]
              },
              {
                "name": "sort",
                "description": [
                  "Sorts the array in-place according to the order specified by the given comparison function."
                ],
                "code": [
                  "fun ShortArray.sort(comparison: (a: Short, b: Short) -> Int)"
                ]
              },
              {
                "name": "sortDescending",
                "description": [
                  "Sorts elements in the array in-place descending according to their natural sort order.",
                  "Sorts elements of the array in the specified range in-place.\nThe elements are sorted descending according to their natural sort order."
                ],
                "code": [
                  "fun ShortArray.sortDescending()",
                  "fun ShortArray.sortDescending(fromIndex: Int, toIndex: Int)"
                ]
              },
              {
                "name": "sorted",
                "description": [
                  "Returns a list of all elements sorted according to their natural sort order."
                ],
                "code": ["fun ShortArray.sorted(): List<Short>"]
              },
              {
                "name": "sortedArray",
                "description": [
                  "Returns an array with all elements of this array sorted according to their natural sort order."
                ],
                "code": ["fun ShortArray.sortedArray(): ShortArray"]
              },
              {
                "name": "sortedArrayDescending",
                "description": [
                  "Returns an array with all elements of this array sorted descending according to their natural sort order."
                ],
                "code": ["fun ShortArray.sortedArrayDescending(): ShortArray"]
              },
              {
                "name": "sortedBy",
                "description": [
                  "Returns a list of all elements sorted according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <R : Comparable<R>> ShortArray.sortedBy(    selector: (Short) -> R?): List<Short>"
                ]
              },
              {
                "name": "sortedByDescending",
                "description": [
                  "Returns a list of all elements sorted descending according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <R : Comparable<R>> ShortArray.sortedByDescending(    selector: (Short) -> R?): List<Short>"
                ]
              },
              {
                "name": "sortedDescending",
                "description": [
                  "Returns a list of all elements sorted descending according to their natural sort order."
                ],
                "code": ["fun ShortArray.sortedDescending(): List<Short>"]
              },
              {
                "name": "sortedWith",
                "description": [
                  "Returns a list of all elements sorted according to the specified comparator."
                ],
                "code": [
                  "fun ShortArray.sortedWith(    comparator: Comparator<in Short>): List<Short>"
                ]
              },
              {
                "name": "subtract",
                "description": [
                  "Returns a set containing all elements that are contained by this array and not contained by the specified collection."
                ],
                "code": [
                  "infix fun ShortArray.subtract(    other: Iterable<Short>): Set<Short>"
                ]
              },
              {
                "name": "sum",
                "description": [
                  "Returns the sum of all elements in the array."
                ],
                "code": ["fun ShortArray.sum(): Int"]
              },
              {
                "name": "sumBy",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array."
                ],
                "code": ["fun ShortArray.sumBy(selector: (Short) -> Int): Int"]
              },
              {
                "name": "sumByDouble",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun ShortArray.sumByDouble(    selector: (Short) -> Double): Double"
                ]
              },
              {
                "name": "sumOf",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array."
                ],
                "code": [
                  "fun ShortArray.sumOf(selector: (Short) -> Double): Double",
                  "fun ShortArray.sumOf(selector: (Short) -> Int): Int",
                  "fun ShortArray.sumOf(selector: (Short) -> Long): Long",
                  "fun ShortArray.sumOf(selector: (Short) -> UInt): UInt",
                  "fun ShortArray.sumOf(selector: (Short) -> ULong): ULong",
                  "fun ShortArray.sumOf(    selector: (Short) -> BigDecimal): BigDecimal",
                  "fun ShortArray.sumOf(    selector: (Short) -> BigInteger): BigInteger"
                ]
              },
              {
                "name": "take",
                "description": ["Returns a list containing first n elements."],
                "code": ["fun ShortArray.take(n: Int): List<Short>"]
              },
              {
                "name": "takeLast",
                "description": ["Returns a list containing last n elements."],
                "code": ["fun ShortArray.takeLast(n: Int): List<Short>"]
              },
              {
                "name": "takeLastWhile",
                "description": [
                  "Returns a list containing last elements satisfying the given predicate."
                ],
                "code": [
                  "fun ShortArray.takeLastWhile(    predicate: (Short) -> Boolean): List<Short>"
                ]
              },
              {
                "name": "takeWhile",
                "description": [
                  "Returns a list containing first elements satisfying the given predicate."
                ],
                "code": [
                  "fun ShortArray.takeWhile(    predicate: (Short) -> Boolean): List<Short>"
                ]
              },
              {
                "name": "toCollection",
                "description": [
                  "Appends all elements to the given destination collection."
                ],
                "code": [
                  "fun <C : MutableCollection<in Short>> ShortArray.toCollection(    destination: C): C"
                ]
              },
              {
                "name": "toCValues",
                "description": [],
                "code": ["fun ShortArray.toCValues(): CValues<ShortVar>"]
              },
              {
                "name": "toHashSet",
                "description": ["Returns a new HashSet of all elements."],
                "code": ["fun ShortArray.toHashSet(): HashSet<Short>"]
              },
              {
                "name": "toList",
                "description": ["Returns a List containing all elements."],
                "code": ["fun ShortArray.toList(): List<Short>"]
              },
              {
                "name": "toMutableList",
                "description": [
                  "Returns a new MutableList filled with all elements of this array."
                ],
                "code": ["fun ShortArray.toMutableList(): MutableList<Short>"]
              },
              {
                "name": "toMutableSet",
                "description": [
                  "Returns a new MutableSet containing all distinct elements from the given array."
                ],
                "code": ["fun ShortArray.toMutableSet(): MutableSet<Short>"]
              },
              {
                "name": "toSet",
                "description": ["Returns a Set of all elements."],
                "code": ["fun ShortArray.toSet(): Set<Short>"]
              },
              {
                "name": "toSortedSet",
                "description": ["Returns a new SortedSet of all elements."],
                "code": ["fun ShortArray.toSortedSet(): SortedSet<Short>"]
              },
              {
                "name": "toUShortArray",
                "description": [
                  "Returns an array of type UShortArray, which is a copy of this array where each element is an unsigned reinterpretation\nof the corresponding element of this array."
                ],
                "code": ["fun ShortArray.toUShortArray(): UShortArray"]
              },
              {
                "name": "union",
                "description": [
                  "Returns a set containing all distinct elements from both collections."
                ],
                "code": [
                  "infix fun ShortArray.union(    other: Iterable<Short>): Set<Short>"
                ]
              },
              {
                "name": "withIndex",
                "description": [
                  "Returns a lazy Iterable that wraps each element of the original array\ninto an IndexedValue containing the index of that element and the element itself."
                ],
                "code": [
                  "fun ShortArray.withIndex(): Iterable<IndexedValue<Short>>"
                ]
              },
              {
                "name": "zip",
                "description": [
                  "Returns a list of pairs built from the elements of this array and the other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of pairs built from the elements of this collection and other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other collection with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest array."
                ],
                "code": [
                  "infix fun <R> any_array<R>.zip(    other: Array<out R>): List<Pair<Short, R>>",
                  "fun <R, V> ShortArray.zip(    other: Array<out R>,     transform: (a: Short, b: R) -> V): List<V>",
                  "infix fun <R> ShortArray.zip(    other: Iterable<R>): List<Pair<Short, R>>",
                  "fun <R, V> ShortArray.zip(    other: Iterable<R>,     transform: (a: Short, b: R) -> V): List<V>",
                  "fun <V> ShortArray.zip(    other: ShortArray,     transform: (a: Short, b: Short) -> V): List<V>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "String",
        "description": [
          "The String class represents character strings. All string literals in Kotlin programs, such as \"abc\", are\nimplemented as instances of this class."
        ],
        "code": ["class String : Comparable<String>, CharSequence"],
        "url": "-string/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "The String class represents character strings. All string literals in Kotlin programs, such as \"abc\", are\nimplemented as instances of this class."
                ],
                "code": ["<init>()"]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "length",
                "description": [
                  "Returns the length of this character sequence."
                ],
                "code": ["val length: Int"]
              }
            ]
          },
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "compareTo",
                "description": [
                  "Compares this object with the specified object for order. Returns zero if this object is equal\nto the specified other object, a negative number if it's less than other, or a positive number\nif it's greater than other."
                ],
                "code": ["fun compareTo(other: String): Int"]
              },
              {
                "name": "equals",
                "description": [
                  "Indicates whether some other object is \"equal to\" this one. Implementations must fulfil the following\nrequirements:"
                ],
                "code": ["fun equals(other: Any?): Boolean"]
              },
              {
                "name": "get",
                "description": [
                  "Returns the character of this string at the specified index."
                ],
                "code": ["fun get(index: Int): Char"]
              },
              {
                "name": "hashCode",
                "description": [
                  "Returns a hash code value for the object.  The general contract of hashCode is:"
                ],
                "code": ["fun hashCode(): Int"]
              },
              {
                "name": "plus",
                "description": [
                  "Returns a string obtained by concatenating this string with the string representation of the given other object."
                ],
                "code": ["operator fun plus(other: Any?): String"]
              },
              {
                "name": "subSequence",
                "description": [
                  "Returns a new character sequence that is a subsequence of this character sequence,\nstarting at the specified startIndex and ending right before the specified endIndex."
                ],
                "code": [
                  "fun subSequence(startIndex: Int, endIndex: Int): CharSequence"
                ]
              },
              {
                "name": "toString",
                "description": [
                  "Returns a string representation of the object."
                ],
                "code": ["fun toString(): String"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "cstr",
                "description": [],
                "code": ["val String.cstr: CValues<ByteVar>"]
              },
              {
                "name": "indices",
                "description": [
                  "Returns the range of valid character indices for this char sequence."
                ],
                "code": ["val CharSequence.indices: IntRange"]
              },
              {
                "name": "lastIndex",
                "description": [
                  "Returns the index of the last character in the char sequence or -1 if it is empty."
                ],
                "code": ["val CharSequence.lastIndex: Int"]
              },
              {
                "name": "utf16",
                "description": [],
                "code": ["val String.utf16: CValues<UShortVar>"]
              },
              {
                "name": "utf32",
                "description": [],
                "code": ["val String.utf32: CValues<IntVar>"]
              },
              {
                "name": "utf8",
                "description": [],
                "code": ["val String.utf8: CValues<ByteVar>"]
              },
              {
                "name": "wcstr",
                "description": [],
                "code": ["val String.wcstr: CValues<UShortVar>"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "all",
                "description": [
                  "Returns true if all characters match the given predicate."
                ],
                "code": [
                  "fun CharSequence.all(predicate: (Char) -> Boolean): Boolean"
                ]
              },
              {
                "name": "any",
                "description": [
                  "Returns true if char sequence has at least one character.",
                  "Returns true if at least one character matches the given predicate."
                ],
                "code": [
                  "fun CharSequence.any(): Boolean",
                  "fun CharSequence.any(predicate: (Char) -> Boolean): Boolean"
                ]
              },
              {
                "name": "asIterable",
                "description": [
                  "Creates an Iterable instance that wraps the original char sequence returning its characters when being iterated."
                ],
                "code": ["fun CharSequence.asIterable(): Iterable<Char>"]
              },
              {
                "name": "asSequence",
                "description": [
                  "Creates a Sequence instance that wraps the original char sequence returning its characters when being iterated."
                ],
                "code": ["fun CharSequence.asSequence(): Sequence<Char>"]
              },
              {
                "name": "associate",
                "description": [
                  "Returns a Map containing key-value pairs provided by transform function\napplied to characters of the given char sequence."
                ],
                "code": [
                  "fun <K, V> CharSequence.associate(    transform: (Char) -> Pair<K, V>): Map<K, V>"
                ]
              },
              {
                "name": "associateBy",
                "description": [
                  "Returns a Map containing the characters from the given char sequence indexed by the key\nreturned from keySelector function applied to each character.",
                  "Returns a Map containing the values provided by valueTransform and indexed by keySelector functions applied to characters of the given char sequence."
                ],
                "code": [
                  "fun <K> CharSequence.associateBy(    keySelector: (Char) -> K): Map<K, Char>",
                  "fun <K, V> CharSequence.associateBy(    keySelector: (Char) -> K,     valueTransform: (Char) -> V): Map<K, V>"
                ]
              },
              {
                "name": "associateByTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function applied to each character of the given char sequence\nand value is the character itself.",
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function and\nand value is provided by the valueTransform function applied to characters of the given char sequence."
                ],
                "code": [
                  "fun <K, M : MutableMap<in K, in Char>> CharSequence.associateByTo(    destination: M,     keySelector: (Char) -> K): M",
                  "fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateByTo(    destination: M,     keySelector: (Char) -> K,     valueTransform: (Char) -> V): M"
                ]
              },
              {
                "name": "associateTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs\nprovided by transform function applied to each character of the given char sequence."
                ],
                "code": [
                  "fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateTo(    destination: M,     transform: (Char) -> Pair<K, V>): M"
                ]
              },
              {
                "name": "associateWith",
                "description": [
                  "Returns a Map where keys are characters from the given char sequence and values are\nproduced by the valueSelector function applied to each character."
                ],
                "code": [
                  "fun <V> CharSequence.associateWith(    valueSelector: (Char) -> V): Map<Char, V>"
                ]
              },
              {
                "name": "associateWithTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs for each character of the given char sequence,\nwhere key is the character itself and value is provided by the valueSelector function applied to that key."
                ],
                "code": [
                  "fun <V, M : MutableMap<in Char, in V>> CharSequence.associateWithTo(    destination: M,     valueSelector: (Char) -> V): M"
                ]
              },
              {
                "name": "byteInputStream",
                "description": [
                  "Creates a new byte input stream for the string."
                ],
                "code": [
                  "fun String.byteInputStream(    charset: Charset = Charsets.UTF_8): ByteArrayInputStream"
                ]
              },
              {
                "name": "capitalize",
                "description": [
                  "Returns a copy of this string having its first letter titlecased using the rules of the specified locale,\nor the original string if it's empty or already starts with a title case letter."
                ],
                "code": ["fun String.capitalize(locale: Locale): String"]
              },
              {
                "name": "chunked",
                "description": [
                  "Splits this char sequence into a list of strings each not exceeding the given size.",
                  "Splits this char sequence into several char sequences each not exceeding the given size\nand applies the given transform function to an each."
                ],
                "code": [
                  "fun CharSequence.chunked(size: Int): List<String>",
                  "fun <R> CharSequence.chunked(    size: Int,     transform: (CharSequence) -> R): List<R>"
                ]
              },
              {
                "name": "chunkedSequence",
                "description": [
                  "Splits this char sequence into a sequence of strings each not exceeding the given size.",
                  "Splits this char sequence into several char sequences each not exceeding the given size\nand applies the given transform function to an each."
                ],
                "code": [
                  "fun CharSequence.chunkedSequence(size: Int): Sequence<String>",
                  "fun <R> CharSequence.chunkedSequence(    size: Int,     transform: (CharSequence) -> R): Sequence<R>"
                ]
              },
              {
                "name": "codePointAt",
                "description": [
                  "Returns the character (Unicode code point) at the specified index."
                ],
                "code": ["fun String.codePointAt(index: Int): Int"]
              },
              {
                "name": "codePointBefore",
                "description": [
                  "Returns the character (Unicode code point) before the specified index."
                ],
                "code": ["fun String.codePointBefore(index: Int): Int"]
              },
              {
                "name": "codePointCount",
                "description": [
                  "Returns the number of Unicode code points in the specified text range of this String."
                ],
                "code": [
                  "fun String.codePointCount(    beginIndex: Int,     endIndex: Int): Int"
                ]
              },
              {
                "name": "coerceAtLeast",
                "description": [
                  "Ensures that this value is not less than the specified minimumValue."
                ],
                "code": [
                  "fun <T : Comparable<T>> T.coerceAtLeast(minimumValue: T): T"
                ]
              },
              {
                "name": "coerceAtMost",
                "description": [
                  "Ensures that this value is not greater than the specified maximumValue."
                ],
                "code": [
                  "fun <T : Comparable<T>> T.coerceAtMost(maximumValue: T): T"
                ]
              },
              {
                "name": "coerceIn",
                "description": [
                  "Ensures that this value lies in the specified range minimumValue..maximumValue.",
                  "Ensures that this value lies in the specified range."
                ],
                "code": [
                  "fun <T : Comparable<T>> T.coerceIn(    minimumValue: T?,     maximumValue: T?): T",
                  "fun <T : Comparable<T>> T.coerceIn(    range: ClosedFloatingPointRange<T>): T",
                  "fun <T : Comparable<T>> T.coerceIn(range: ClosedRange<T>): T"
                ]
              },
              {
                "name": "commonPrefixWith",
                "description": [
                  "Returns the longest string prefix such that this char sequence and other char sequence both start with this prefix,\ntaking care not to split surrogate pairs.\nIf this and other have no common prefix, returns the empty string."
                ],
                "code": [
                  "fun CharSequence.commonPrefixWith(    other: CharSequence,     ignoreCase: Boolean = false): String"
                ]
              },
              {
                "name": "commonSuffixWith",
                "description": [
                  "Returns the longest string suffix such that this char sequence and other char sequence both end with this suffix,\ntaking care not to split surrogate pairs.\nIf this and other have no common suffix, returns the empty string."
                ],
                "code": [
                  "fun CharSequence.commonSuffixWith(    other: CharSequence,     ignoreCase: Boolean = false): String"
                ]
              },
              {
                "name": "compareTo",
                "description": [
                  "Compares this object with the specified object for order. Returns zero if this object is equal\nto the specified other object, a negative number if it's less than other, or a positive number\nif it's greater than other."
                ],
                "code": ["infix fun <T> Comparable<T>.compareTo(other: T): Int"]
              },
              {
                "name": "concat",
                "description": [],
                "code": ["fun String.concat(str: String): String"]
              },
              {
                "name": "contains",
                "description": [
                  "Returns true if this char sequence contains the specified other sequence of characters as a substring.",
                  "Returns true if this char sequence contains the specified character char.",
                  "Returns true if this char sequence contains at least one match of the specified regular expression regex."
                ],
                "code": [
                  "operator fun CharSequence.contains(    other: CharSequence,     ignoreCase: Boolean = false): Boolean",
                  "operator fun CharSequence.contains(    char: Char,     ignoreCase: Boolean = false): Boolean",
                  "operator fun CharSequence.contains(regex: Regex): Boolean"
                ]
              },
              {
                "name": "contentEquals",
                "description": [
                  "Returns true if this string is equal to the contents of the specified CharSequence, false otherwise.",
                  "Returns true if this string is equal to the contents of the specified StringBuffer, false otherwise."
                ],
                "code": [
                  "fun String.contentEquals(charSequence: CharSequence): Boolean",
                  "fun String.contentEquals(    stringBuilder: StringBuffer): Boolean"
                ]
              },
              {
                "name": "count",
                "description": [
                  "Returns the length of this char sequence.",
                  "Returns the number of characters matching the given predicate."
                ],
                "code": [
                  "fun CharSequence.count(): Int",
                  "fun CharSequence.count(predicate: (Char) -> Boolean): Int"
                ]
              },
              {
                "name": "decapitalize",
                "description": [
                  "Returns a copy of this string having its first letter lowercased using the rules of the specified locale,\nor the original string, if it's empty or already starts with a lower case letter."
                ],
                "code": ["fun String.decapitalize(locale: Locale): String"]
              },
              {
                "name": "drop",
                "description": [
                  "Returns a string with the first n characters removed."
                ],
                "code": ["fun String.drop(n: Int): String"]
              },
              {
                "name": "dropLast",
                "description": [
                  "Returns a string with the last n characters removed."
                ],
                "code": ["fun String.dropLast(n: Int): String"]
              },
              {
                "name": "dropLastWhile",
                "description": [
                  "Returns a string containing all characters except last characters that satisfy the given predicate."
                ],
                "code": [
                  "fun String.dropLastWhile(    predicate: (Char) -> Boolean): String"
                ]
              },
              {
                "name": "dropWhile",
                "description": [
                  "Returns a string containing all characters except first characters that satisfy the given predicate."
                ],
                "code": [
                  "fun String.dropWhile(predicate: (Char) -> Boolean): String"
                ]
              },
              {
                "name": "elementAtOrElse",
                "description": [
                  "Returns a character at the given index or the result of calling the defaultValue function if the index is out of bounds of this char sequence."
                ],
                "code": [
                  "fun CharSequence.elementAtOrElse(    index: Int,     defaultValue: (Int) -> Char): Char"
                ]
              },
              {
                "name": "elementAtOrNull",
                "description": [
                  "Returns a character at the given index or null if the index is out of bounds of this char sequence."
                ],
                "code": ["fun CharSequence.elementAtOrNull(index: Int): Char?"]
              },
              {
                "name": "endsWith",
                "description": [
                  "Returns true if this char sequence ends with the specified character.",
                  "Returns true if this char sequence ends with the specified suffix."
                ],
                "code": [
                  "fun CharSequence.endsWith(    char: Char,     ignoreCase: Boolean = false): Boolean",
                  "fun CharSequence.endsWith(    suffix: CharSequence,     ignoreCase: Boolean = false): Boolean"
                ]
              },
              {
                "name": "filter",
                "description": [
                  "Returns a string containing only those characters from the original string that match the given predicate."
                ],
                "code": [
                  "fun String.filter(predicate: (Char) -> Boolean): String"
                ]
              },
              {
                "name": "filterIndexed",
                "description": [
                  "Returns a string containing only those characters from the original string that match the given predicate."
                ],
                "code": [
                  "fun String.filterIndexed(    predicate: (index: Int, Char) -> Boolean): String"
                ]
              },
              {
                "name": "filterIndexedTo",
                "description": [
                  "Appends all characters matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : Appendable> CharSequence.filterIndexedTo(    destination: C,     predicate: (index: Int, Char) -> Boolean): C"
                ]
              },
              {
                "name": "filterNot",
                "description": [
                  "Returns a string containing only those characters from the original string that do not match the given predicate."
                ],
                "code": [
                  "fun String.filterNot(predicate: (Char) -> Boolean): String"
                ]
              },
              {
                "name": "filterNotTo",
                "description": [
                  "Appends all characters not matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : Appendable> CharSequence.filterNotTo(    destination: C,     predicate: (Char) -> Boolean): C"
                ]
              },
              {
                "name": "filterTo",
                "description": [
                  "Appends all characters matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : Appendable> CharSequence.filterTo(    destination: C,     predicate: (Char) -> Boolean): C"
                ]
              },
              {
                "name": "find",
                "description": [
                  "Returns the first character matching the given predicate, or null if no such character was found."
                ],
                "code": [
                  "fun CharSequence.find(predicate: (Char) -> Boolean): Char?"
                ]
              },
              {
                "name": "findAnyOf",
                "description": [
                  "Finds the first occurrence of any of the specified strings in this char sequence,\nstarting from the specified startIndex and optionally ignoring the case."
                ],
                "code": [
                  "fun CharSequence.findAnyOf(    strings: Collection<String>,     startIndex: Int = 0,     ignoreCase: Boolean = false): Pair<Int, String>?"
                ]
              },
              {
                "name": "findLast",
                "description": [
                  "Returns the last character matching the given predicate, or null if no such character was found."
                ],
                "code": [
                  "fun CharSequence.findLast(    predicate: (Char) -> Boolean): Char?"
                ]
              },
              {
                "name": "findLastAnyOf",
                "description": [
                  "Finds the last occurrence of any of the specified strings in this char sequence,\nstarting from the specified startIndex and optionally ignoring the case."
                ],
                "code": [
                  "fun CharSequence.findLastAnyOf(    strings: Collection<String>,     startIndex: Int = lastIndex,     ignoreCase: Boolean = false): Pair<Int, String>?"
                ]
              },
              {
                "name": "first",
                "description": [
                  "Returns the first character.",
                  "Returns the first character matching the given predicate."
                ],
                "code": [
                  "fun CharSequence.first(): Char",
                  "fun CharSequence.first(predicate: (Char) -> Boolean): Char"
                ]
              },
              {
                "name": "firstNotNullOf",
                "description": [
                  "Returns the first non-null value produced by transform function being applied to characters of this char sequence in iteration order,\nor throws NoSuchElementException if no non-null value was produced."
                ],
                "code": [
                  "fun <R : Any> CharSequence.firstNotNullOf(    transform: (Char) -> R?): R"
                ]
              },
              {
                "name": "firstNotNullOfOrNull",
                "description": [
                  "Returns the first non-null value produced by transform function being applied to characters of this char sequence in iteration order,\nor null if no non-null value was produced."
                ],
                "code": [
                  "fun <R : Any> CharSequence.firstNotNullOfOrNull(    transform: (Char) -> R?): R?"
                ]
              },
              {
                "name": "firstOrNull",
                "description": [
                  "Returns the first character, or null if the char sequence is empty.",
                  "Returns the first character matching the given predicate, or null if character was not found."
                ],
                "code": [
                  "fun CharSequence.firstOrNull(): Char?",
                  "fun CharSequence.firstOrNull(    predicate: (Char) -> Boolean): Char?"
                ]
              },
              {
                "name": "flatMap",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each character of original char sequence."
                ],
                "code": [
                  "fun <R> CharSequence.flatMap(    transform: (Char) -> Iterable<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexed",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each character\nand its index in the original char sequence."
                ],
                "code": [
                  "fun <R> CharSequence.flatMapIndexed(    transform: (index: Int, Char) -> Iterable<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexedTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each character\nand its index in the original char sequence, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> CharSequence.flatMapIndexedTo(    destination: C,     transform: (index: Int, Char) -> Iterable<R>): C"
                ]
              },
              {
                "name": "flatMapTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each character of original char sequence, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> CharSequence.flatMapTo(    destination: C,     transform: (Char) -> Iterable<R>): C"
                ]
              },
              {
                "name": "fold",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each character."
                ],
                "code": [
                  "fun <R> CharSequence.fold(    initial: R,     operation: (acc: R, Char) -> R): R"
                ]
              },
              {
                "name": "foldIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each character with its index in the original char sequence."
                ],
                "code": [
                  "fun <R> CharSequence.foldIndexed(    initial: R,     operation: (index: Int, acc: R, Char) -> R): R"
                ]
              },
              {
                "name": "foldRight",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each character and current accumulator value."
                ],
                "code": [
                  "fun <R> CharSequence.foldRight(    initial: R,     operation: (Char, acc: R) -> R): R"
                ]
              },
              {
                "name": "foldRightIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each character with its index in the original char sequence and current accumulator value."
                ],
                "code": [
                  "fun <R> CharSequence.foldRightIndexed(    initial: R,     operation: (index: Int, Char, acc: R) -> R): R"
                ]
              },
              {
                "name": "forEach",
                "description": ["Performs the given action on each character."],
                "code": ["fun CharSequence.forEach(action: (Char) -> Unit)"]
              },
              {
                "name": "forEachIndexed",
                "description": [
                  "Performs the given action on each character, providing sequential index with the character."
                ],
                "code": [
                  "fun CharSequence.forEachIndexed(    action: (index: Int, Char) -> Unit)"
                ]
              },
              {
                "name": "format",
                "description": [
                  "Uses this string as a format string and returns a string obtained by substituting the specified arguments,\nusing the default locale.",
                  "Uses this string as a format string and returns a string obtained by substituting the specified arguments,\nusing the specified locale. If locale is null then no localization is applied."
                ],
                "code": [
                  "fun String.format(vararg args: Any?): String",
                  "fun String.format(locale: Locale?, vararg args: Any?): String"
                ]
              },
              {
                "name": "getOrElse",
                "description": [
                  "Returns a character at the given index or the result of calling the defaultValue function if the index is out of bounds of this char sequence."
                ],
                "code": [
                  "fun CharSequence.getOrElse(    index: Int,     defaultValue: (Int) -> Char): Char"
                ]
              },
              {
                "name": "getOrNull",
                "description": [
                  "Returns a character at the given index or null if the index is out of bounds of this char sequence."
                ],
                "code": ["fun CharSequence.getOrNull(index: Int): Char?"]
              },
              {
                "name": "groupBy",
                "description": [
                  "Groups characters of the original char sequence by the key returned by the given keySelector function\napplied to each character and returns a map where each group key is associated with a list of corresponding characters.",
                  "Groups values returned by the valueTransform function applied to each character of the original char sequence\nby the key returned by the given keySelector function applied to the character\nand returns a map where each group key is associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K> CharSequence.groupBy(    keySelector: (Char) -> K): Map<K, List<Char>>",
                  "fun <K, V> CharSequence.groupBy(    keySelector: (Char) -> K,     valueTransform: (Char) -> V): Map<K, List<V>>"
                ]
              },
              {
                "name": "groupByTo",
                "description": [
                  "Groups characters of the original char sequence by the key returned by the given keySelector function\napplied to each character and puts to the destination map each group key associated with a list of corresponding characters.",
                  "Groups values returned by the valueTransform function applied to each character of the original char sequence\nby the key returned by the given keySelector function applied to the character\nand puts to the destination map each group key associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K, M : MutableMap<in K, MutableList<Char>>> CharSequence.groupByTo(    destination: M,     keySelector: (Char) -> K): M",
                  "fun <K, V, M : MutableMap<in K, MutableList<V>>> CharSequence.groupByTo(    destination: M,     keySelector: (Char) -> K,     valueTransform: (Char) -> V): M"
                ]
              },
              {
                "name": "groupingBy",
                "description": [
                  "Creates a Grouping source from a char sequence to be used later with one of group-and-fold operations\nusing the specified keySelector function to extract a key from each character."
                ],
                "code": [
                  "fun <K> CharSequence.groupingBy(    keySelector: (Char) -> K): Grouping<Char, K>"
                ]
              },
              {
                "name": "hasSurrogatePairAt",
                "description": [
                  "Returns true if this CharSequence has Unicode surrogate pair at the specified index."
                ],
                "code": [
                  "fun CharSequence.hasSurrogatePairAt(index: Int): Boolean"
                ]
              },
              {
                "name": "hexToByte",
                "description": [
                  "Parses a Byte value from this string using the specified format."
                ],
                "code": [
                  "fun String.hexToByte(    format: HexFormat = HexFormat.Default): Byte"
                ]
              },
              {
                "name": "hexToByteArray",
                "description": [
                  "Parses bytes from this string using the specified HexFormat."
                ],
                "code": [
                  "fun String.hexToByteArray(    format: HexFormat = HexFormat.Default): ByteArray"
                ]
              },
              {
                "name": "hexToInt",
                "description": [
                  "Parses an Int value from this string using the specified format."
                ],
                "code": [
                  "fun String.hexToInt(    format: HexFormat = HexFormat.Default): Int"
                ]
              },
              {
                "name": "hexToLong",
                "description": [
                  "Parses a Long value from this string using the specified format."
                ],
                "code": [
                  "fun String.hexToLong(    format: HexFormat = HexFormat.Default): Long"
                ]
              },
              {
                "name": "hexToShort",
                "description": [
                  "Parses a Short value from this string using the specified format."
                ],
                "code": [
                  "fun String.hexToShort(    format: HexFormat = HexFormat.Default): Short"
                ]
              },
              {
                "name": "hexToUByte",
                "description": [
                  "Parses an UByte value from this string using the specified format."
                ],
                "code": [
                  "fun String.hexToUByte(    format: HexFormat = HexFormat.Default): UByte"
                ]
              },
              {
                "name": "hexToUByteArray",
                "description": [
                  "Parses bytes from this string using the specified HexFormat."
                ],
                "code": [
                  "fun String.hexToUByteArray(    format: HexFormat = HexFormat.Default): UByteArray"
                ]
              },
              {
                "name": "hexToUInt",
                "description": [
                  "Parses an UInt value from this string using the specified format."
                ],
                "code": [
                  "fun String.hexToUInt(    format: HexFormat = HexFormat.Default): UInt"
                ]
              },
              {
                "name": "hexToULong",
                "description": [
                  "Parses an ULong value from this string using the specified format."
                ],
                "code": [
                  "fun String.hexToULong(    format: HexFormat = HexFormat.Default): ULong"
                ]
              },
              {
                "name": "hexToUShort",
                "description": [
                  "Parses an UShort value from this string using the specified format."
                ],
                "code": [
                  "fun String.hexToUShort(    format: HexFormat = HexFormat.Default): UShort"
                ]
              },
              {
                "name": "ifBlank",
                "description": [
                  "Returns this char sequence if it is not empty and doesn't consist solely of whitespace characters,\nor the result of calling defaultValue function otherwise."
                ],
                "code": [
                  "fun <C, R> C.ifBlank(    defaultValue: () -> R): R where C : CharSequence, C : R"
                ]
              },
              {
                "name": "ifEmpty",
                "description": [
                  "Returns this char sequence if it's not empty\nor the result of calling defaultValue function if the char sequence is empty."
                ],
                "code": [
                  "fun <C, R> C.ifEmpty(    defaultValue: () -> R): R where C : CharSequence, C : R"
                ]
              },
              {
                "name": "indexOf",
                "description": [
                  "Returns the index within this string of the first occurrence of the specified character, starting from the specified startIndex.",
                  "Returns the index within this char sequence of the first occurrence of the specified string,\nstarting from the specified startIndex."
                ],
                "code": [
                  "fun CharSequence.indexOf(    char: Char,     startIndex: Int = 0,     ignoreCase: Boolean = false): Int",
                  "fun CharSequence.indexOf(    string: String,     startIndex: Int = 0,     ignoreCase: Boolean = false): Int"
                ]
              },
              {
                "name": "indexOfAny",
                "description": [
                  "Finds the index of the first occurrence of any of the specified chars in this char sequence,\nstarting from the specified startIndex and optionally ignoring the case.",
                  "Finds the index of the first occurrence of any of the specified strings in this char sequence,\nstarting from the specified startIndex and optionally ignoring the case."
                ],
                "code": [
                  "fun CharSequence.indexOfAny(    chars: CharArray,     startIndex: Int = 0,     ignoreCase: Boolean = false): Int",
                  "fun CharSequence.indexOfAny(    strings: Collection<String>,     startIndex: Int = 0,     ignoreCase: Boolean = false): Int"
                ]
              },
              {
                "name": "indexOfFirst",
                "description": [
                  "Returns index of the first character matching the given predicate, or -1 if the char sequence does not contain such character."
                ],
                "code": [
                  "fun CharSequence.indexOfFirst(    predicate: (Char) -> Boolean): Int"
                ]
              },
              {
                "name": "indexOfLast",
                "description": [
                  "Returns index of the last character matching the given predicate, or -1 if the char sequence does not contain such character."
                ],
                "code": [
                  "fun CharSequence.indexOfLast(    predicate: (Char) -> Boolean): Int"
                ]
              },
              {
                "name": "intern",
                "description": [
                  "Returns a canonical representation for this string object."
                ],
                "code": ["fun String.intern(): String"]
              },
              {
                "name": "isEmpty",
                "description": [
                  "Returns true if this char sequence is empty (contains no characters)."
                ],
                "code": ["fun CharSequence.isEmpty(): Boolean"]
              },
              {
                "name": "isNotBlank",
                "description": [
                  "Returns true if this char sequence is not empty and contains some characters except of whitespace characters."
                ],
                "code": ["fun CharSequence.isNotBlank(): Boolean"]
              },
              {
                "name": "isNotEmpty",
                "description": [
                  "Returns true if this char sequence is not empty."
                ],
                "code": ["fun CharSequence.isNotEmpty(): Boolean"]
              },
              {
                "name": "isNullOrBlank",
                "description": [
                  "Returns true if this nullable char sequence is either null or empty or consists solely of whitespace characters."
                ],
                "code": ["fun CharSequence?.isNullOrBlank(): Boolean"]
              },
              {
                "name": "isNullOrEmpty",
                "description": [
                  "Returns true if this nullable char sequence is either null or empty."
                ],
                "code": ["fun CharSequence?.isNullOrEmpty(): Boolean"]
              },
              {
                "name": "iterator",
                "description": [
                  "Iterator for characters of the given char sequence."
                ],
                "code": ["operator fun CharSequence.iterator(): CharIterator"]
              },
              {
                "name": "last",
                "description": [
                  "Returns the last character.",
                  "Returns the last character matching the given predicate."
                ],
                "code": [
                  "fun CharSequence.last(): Char",
                  "fun CharSequence.last(predicate: (Char) -> Boolean): Char"
                ]
              },
              {
                "name": "lastIndexOf",
                "description": [
                  "Returns the index within this char sequence of the last occurrence of the specified character,\nstarting from the specified startIndex.",
                  "Returns the index within this char sequence of the last occurrence of the specified string,\nstarting from the specified startIndex."
                ],
                "code": [
                  "fun CharSequence.lastIndexOf(    char: Char,     startIndex: Int = lastIndex,     ignoreCase: Boolean = false): Int",
                  "fun CharSequence.lastIndexOf(    string: String,     startIndex: Int = lastIndex,     ignoreCase: Boolean = false): Int"
                ]
              },
              {
                "name": "lastIndexOfAny",
                "description": [
                  "Finds the index of the last occurrence of any of the specified chars in this char sequence,\nstarting from the specified startIndex and optionally ignoring the case.",
                  "Finds the index of the last occurrence of any of the specified strings in this char sequence,\nstarting from the specified startIndex and optionally ignoring the case."
                ],
                "code": [
                  "fun CharSequence.lastIndexOfAny(    chars: CharArray,     startIndex: Int = lastIndex,     ignoreCase: Boolean = false): Int",
                  "fun CharSequence.lastIndexOfAny(    strings: Collection<String>,     startIndex: Int = lastIndex,     ignoreCase: Boolean = false): Int"
                ]
              },
              {
                "name": "lastOrNull",
                "description": [
                  "Returns the last character, or null if the char sequence is empty.",
                  "Returns the last character matching the given predicate, or null if no such character was found."
                ],
                "code": [
                  "fun CharSequence.lastOrNull(): Char?",
                  "fun CharSequence.lastOrNull(    predicate: (Char) -> Boolean): Char?"
                ]
              },
              {
                "name": "lines",
                "description": [
                  "Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR."
                ],
                "code": ["fun CharSequence.lines(): List<String>"]
              },
              {
                "name": "lineSequence",
                "description": [
                  "Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR."
                ],
                "code": ["fun CharSequence.lineSequence(): Sequence<String>"]
              },
              {
                "name": "lowercase",
                "description": [
                  "Returns a copy of this string converted to lower case using the rules of the specified locale."
                ],
                "code": ["fun String.lowercase(locale: Locale): String"]
              },
              {
                "name": "map",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each character in the original char sequence."
                ],
                "code": [
                  "fun <R> CharSequence.map(transform: (Char) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexed",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each character and its index in the original char sequence."
                ],
                "code": [
                  "fun <R> CharSequence.mapIndexed(    transform: (index: Int, Char) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexedNotNull",
                "description": [
                  "Returns a list containing only the non-null results of applying the given transform function\nto each character and its index in the original char sequence."
                ],
                "code": [
                  "fun <R : Any> CharSequence.mapIndexedNotNull(    transform: (index: Int, Char) -> R?): List<R>"
                ]
              },
              {
                "name": "mapIndexedNotNullTo",
                "description": [
                  "Applies the given transform function to each character and its index in the original char sequence\nand appends only the non-null results to the given destination."
                ],
                "code": [
                  "fun <R : Any, C : MutableCollection<in R>> CharSequence.mapIndexedNotNullTo(    destination: C,     transform: (index: Int, Char) -> R?): C"
                ]
              },
              {
                "name": "mapIndexedTo",
                "description": [
                  "Applies the given transform function to each character and its index in the original char sequence\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> CharSequence.mapIndexedTo(    destination: C,     transform: (index: Int, Char) -> R): C"
                ]
              },
              {
                "name": "mapNotNull",
                "description": [
                  "Returns a list containing only the non-null results of applying the given transform function\nto each character in the original char sequence."
                ],
                "code": [
                  "fun <R : Any> CharSequence.mapNotNull(    transform: (Char) -> R?): List<R>"
                ]
              },
              {
                "name": "mapNotNullTo",
                "description": [
                  "Applies the given transform function to each character in the original char sequence\nand appends only the non-null results to the given destination."
                ],
                "code": [
                  "fun <R : Any, C : MutableCollection<in R>> CharSequence.mapNotNullTo(    destination: C,     transform: (Char) -> R?): C"
                ]
              },
              {
                "name": "mapTo",
                "description": [
                  "Applies the given transform function to each character of the original char sequence\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> CharSequence.mapTo(    destination: C,     transform: (Char) -> R): C"
                ]
              },
              {
                "name": "match",
                "description": [],
                "code": ["fun String.match(regex: String): Array<String>?"]
              },
              {
                "name": "matches",
                "description": [
                  "Returns true if this char sequence matches the given regular expression."
                ],
                "code": [
                  "infix fun CharSequence.matches(regex: Regex): Boolean",
                  "fun String.matches(regex: String): Boolean"
                ]
              },
              {
                "name": "maxByOrNull",
                "description": [
                  "Returns the first character yielding the largest value of the given function or null if there are no characters."
                ],
                "code": [
                  "fun <R : Comparable<R>> CharSequence.maxByOrNull(    selector: (Char) -> R): Char?"
                ]
              },
              {
                "name": "maxOf",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each character in the char sequence."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_iterable<R>.maxOf(    selector: (Char) -> R): R"
                ]
              },
              {
                "name": "maxOfOrNull",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each character in the char sequence or null if there are no characters."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_iterable<R>.maxOfOrNull(    selector: (Char) -> R): R?"
                ]
              },
              {
                "name": "maxOfWith",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each character in the char sequence."
                ],
                "code": [
                  "fun <R> CharSequence.maxOfWith(    comparator: Comparator<in R>,     selector: (Char) -> R): R"
                ]
              },
              {
                "name": "maxOfWithOrNull",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each character in the char sequence or null if there are no characters."
                ],
                "code": [
                  "fun <R> CharSequence.maxOfWithOrNull(    comparator: Comparator<in R>,     selector: (Char) -> R): R?"
                ]
              },
              {
                "name": "maxOrNull",
                "description": [
                  "Returns the largest character or null if there are no characters."
                ],
                "code": ["fun CharSequence.maxOrNull(): Char?"]
              },
              {
                "name": "maxWith",
                "description": [
                  "Returns the first character having the largest value according to the provided comparator."
                ],
                "code": [
                  "fun CharSequence.maxWith(    comparator: Comparator<in Char>): Char",
                  "fun CharSequence.maxWith(    comparator: Comparator<in Char>): Char?"
                ]
              },
              {
                "name": "maxWithOrNull",
                "description": [
                  "Returns the first character having the largest value according to the provided comparator or null if there are no characters."
                ],
                "code": [
                  "fun CharSequence.maxWithOrNull(    comparator: Comparator<in Char>): Char?"
                ]
              },
              {
                "name": "minByOrNull",
                "description": [
                  "Returns the first character yielding the smallest value of the given function or null if there are no characters."
                ],
                "code": [
                  "fun <R : Comparable<R>> CharSequence.minByOrNull(    selector: (Char) -> R): Char?"
                ]
              },
              {
                "name": "minOf",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each character in the char sequence."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_iterable<R>.minOf(    selector: (Char) -> R): R"
                ]
              },
              {
                "name": "minOfOrNull",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each character in the char sequence or null if there are no characters."
                ],
                "code": [
                  "fun <R : Comparable<R>> any_iterable<R>.minOfOrNull(    selector: (Char) -> R): R?"
                ]
              },
              {
                "name": "minOfWith",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each character in the char sequence."
                ],
                "code": [
                  "fun <R> CharSequence.minOfWith(    comparator: Comparator<in R>,     selector: (Char) -> R): R"
                ]
              },
              {
                "name": "minOfWithOrNull",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each character in the char sequence or null if there are no characters."
                ],
                "code": [
                  "fun <R> CharSequence.minOfWithOrNull(    comparator: Comparator<in R>,     selector: (Char) -> R): R?"
                ]
              },
              {
                "name": "minOrNull",
                "description": [
                  "Returns the smallest character or null if there are no characters."
                ],
                "code": ["fun CharSequence.minOrNull(): Char?"]
              },
              {
                "name": "minWith",
                "description": [
                  "Returns the first character having the smallest value according to the provided comparator."
                ],
                "code": [
                  "fun CharSequence.minWith(    comparator: Comparator<in Char>): Char",
                  "fun CharSequence.minWith(    comparator: Comparator<in Char>): Char?"
                ]
              },
              {
                "name": "minWithOrNull",
                "description": [
                  "Returns the first character having the smallest value according to the provided comparator or null if there are no characters."
                ],
                "code": [
                  "fun CharSequence.minWithOrNull(    comparator: Comparator<in Char>): Char?"
                ]
              },
              {
                "name": "none",
                "description": [
                  "Returns true if the char sequence has no characters.",
                  "Returns true if no characters match the given predicate."
                ],
                "code": [
                  "fun CharSequence.none(): Boolean",
                  "fun CharSequence.none(predicate: (Char) -> Boolean): Boolean"
                ]
              },
              {
                "name": "offsetByCodePoints",
                "description": [
                  "Returns the index within this string that is offset from the given index by codePointOffset code points."
                ],
                "code": [
                  "fun String.offsetByCodePoints(    index: Int,     codePointOffset: Int): Int"
                ]
              },
              {
                "name": "onEach",
                "description": [
                  "Performs the given action on each character and returns the char sequence itself afterwards."
                ],
                "code": [
                  "fun <S : CharSequence> S.onEach(action: (Char) -> Unit): S"
                ]
              },
              {
                "name": "onEachIndexed",
                "description": [
                  "Performs the given action on each character, providing sequential index with the character,\nand returns the char sequence itself afterwards."
                ],
                "code": [
                  "fun <S : CharSequence> S.onEachIndexed(    action: (index: Int, Char) -> Unit): S"
                ]
              },
              {
                "name": "orEmpty",
                "description": [
                  "Returns the string if it is not null, or the empty string otherwise."
                ],
                "code": ["fun String?.orEmpty(): String"]
              },
              {
                "name": "padEnd",
                "description": [
                  "Pads the string to the specified length at the end with the specified character or space."
                ],
                "code": [
                  "fun String.padEnd(length: Int, padChar: Char = ' '): String"
                ]
              },
              {
                "name": "padStart",
                "description": [
                  "Pads the string to the specified length at the beginning with the specified character or space."
                ],
                "code": [
                  "fun String.padStart(length: Int, padChar: Char = ' '): String"
                ]
              },
              {
                "name": "partition",
                "description": [
                  "Splits the original string into pair of strings,\nwhere first string contains characters for which predicate yielded true,\nwhile second string contains characters for which predicate yielded false."
                ],
                "code": [
                  "fun String.partition(    predicate: (Char) -> Boolean): Pair<String, String>"
                ]
              },
              {
                "name": "prependIndent",
                "description": [
                  "Prepends indent to every line of the original string."
                ],
                "code": [
                  "fun String.prependIndent(indent: String = \"    \"): String"
                ]
              },
              {
                "name": "random",
                "description": [
                  "Returns a random character from this char sequence.",
                  "Returns a random character from this char sequence using the specified source of randomness."
                ],
                "code": [
                  "fun CharSequence.random(): Char",
                  "fun CharSequence.random(random: Random): Char"
                ]
              },
              {
                "name": "randomOrNull",
                "description": [
                  "Returns a random character from this char sequence, or null if this char sequence is empty.",
                  "Returns a random character from this char sequence using the specified source of randomness, or null if this char sequence is empty."
                ],
                "code": [
                  "fun CharSequence.randomOrNull(): Char?",
                  "fun CharSequence.randomOrNull(random: Random): Char?"
                ]
              },
              {
                "name": "rangeTo",
                "description": [
                  "Creates a range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeTo(    that: T): ClosedRange<T>"
                ]
              },
              {
                "name": "rangeUntil",
                "description": [
                  "Creates an open-ended range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeUntil(    that: T): OpenEndRange<T>"
                ]
              },
              {
                "name": "reader",
                "description": ["Creates a new reader for the string."],
                "code": ["fun String.reader(): StringReader"]
              },
              {
                "name": "reduce",
                "description": [
                  "Accumulates value starting with the first character and applying operation from left to right\nto current accumulator value and each character."
                ],
                "code": [
                  "fun CharSequence.reduce(    operation: (acc: Char, Char) -> Char): Char"
                ]
              },
              {
                "name": "reduceIndexed",
                "description": [
                  "Accumulates value starting with the first character and applying operation from left to right\nto current accumulator value and each character with its index in the original char sequence."
                ],
                "code": [
                  "fun CharSequence.reduceIndexed(    operation: (index: Int, acc: Char, Char) -> Char): Char"
                ]
              },
              {
                "name": "reduceIndexedOrNull",
                "description": [
                  "Accumulates value starting with the first character and applying operation from left to right\nto current accumulator value and each character with its index in the original char sequence."
                ],
                "code": [
                  "fun CharSequence.reduceIndexedOrNull(    operation: (index: Int, acc: Char, Char) -> Char): Char?"
                ]
              },
              {
                "name": "reduceOrNull",
                "description": [
                  "Accumulates value starting with the first character and applying operation from left to right\nto current accumulator value and each character."
                ],
                "code": [
                  "fun CharSequence.reduceOrNull(    operation: (acc: Char, Char) -> Char): Char?"
                ]
              },
              {
                "name": "reduceRight",
                "description": [
                  "Accumulates value starting with the last character and applying operation from right to left\nto each character and current accumulator value."
                ],
                "code": [
                  "fun CharSequence.reduceRight(    operation: (Char, acc: Char) -> Char): Char"
                ]
              },
              {
                "name": "reduceRightIndexed",
                "description": [
                  "Accumulates value starting with the last character and applying operation from right to left\nto each character with its index in the original char sequence and current accumulator value."
                ],
                "code": [
                  "fun CharSequence.reduceRightIndexed(    operation: (index: Int, Char, acc: Char) -> Char): Char"
                ]
              },
              {
                "name": "reduceRightIndexedOrNull",
                "description": [
                  "Accumulates value starting with the last character and applying operation from right to left\nto each character with its index in the original char sequence and current accumulator value."
                ],
                "code": [
                  "fun CharSequence.reduceRightIndexedOrNull(    operation: (index: Int, Char, acc: Char) -> Char): Char?"
                ]
              },
              {
                "name": "reduceRightOrNull",
                "description": [
                  "Accumulates value starting with the last character and applying operation from right to left\nto each character and current accumulator value."
                ],
                "code": [
                  "fun CharSequence.reduceRightOrNull(    operation: (Char, acc: Char) -> Char): Char?"
                ]
              },
              {
                "name": "refTo",
                "description": [],
                "code": ["fun String.refTo(index: Int): CValuesRef<COpaque>"]
              },
              {
                "name": "removePrefix",
                "description": [
                  "If this string starts with the given prefix, returns a copy of this string\nwith the prefix removed. Otherwise, returns this string."
                ],
                "code": [
                  "fun String.removePrefix(prefix: CharSequence): String"
                ]
              },
              {
                "name": "removeRange",
                "description": [
                  "Removes the part of a string at a given range.",
                  "Removes the part of a string at the given range."
                ],
                "code": [
                  "fun String.removeRange(    startIndex: Int,     endIndex: Int): String",
                  "fun String.removeRange(range: IntRange): String"
                ]
              },
              {
                "name": "removeSuffix",
                "description": [
                  "If this string ends with the given suffix, returns a copy of this string\nwith the suffix removed. Otherwise, returns this string."
                ],
                "code": [
                  "fun String.removeSuffix(suffix: CharSequence): String"
                ]
              },
              {
                "name": "removeSurrounding",
                "description": [
                  "Removes from a string both the given prefix and suffix if and only if\nit starts with the prefix and ends with the suffix.\nOtherwise returns this string unchanged.",
                  "Removes the given delimiter string from both the start and the end of this string\nif and only if it starts with and ends with the delimiter.\nOtherwise returns this string unchanged."
                ],
                "code": [
                  "fun String.removeSurrounding(    prefix: CharSequence,     suffix: CharSequence): String",
                  "fun String.removeSurrounding(delimiter: CharSequence): String"
                ]
              },
              {
                "name": "replace",
                "description": [
                  "Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\nwith the given replacement.",
                  "Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\nwith the result of the given function transform that takes MatchResult and returns a string to be used as a\nreplacement for that match."
                ],
                "code": [
                  "fun CharSequence.replace(    regex: Regex,     replacement: String): String",
                  "fun CharSequence.replace(    regex: Regex,     transform: (MatchResult) -> CharSequence): String"
                ]
              },
              {
                "name": "replaceAfter",
                "description": [
                  "Replace part of string after the first occurrence of given delimiter with the replacement string.\nIf the string does not contain the delimiter, returns missingDelimiterValue which defaults to the original string."
                ],
                "code": [
                  "fun String.replaceAfter(    delimiter: Char,     replacement: String,     missingDelimiterValue: String = this): String",
                  "fun String.replaceAfter(    delimiter: String,     replacement: String,     missingDelimiterValue: String = this): String"
                ]
              },
              {
                "name": "replaceAfterLast",
                "description": [
                  "Replace part of string after the last occurrence of given delimiter with the replacement string.\nIf the string does not contain the delimiter, returns missingDelimiterValue which defaults to the original string."
                ],
                "code": [
                  "fun String.replaceAfterLast(    delimiter: String,     replacement: String,     missingDelimiterValue: String = this): String",
                  "fun String.replaceAfterLast(    delimiter: Char,     replacement: String,     missingDelimiterValue: String = this): String"
                ]
              },
              {
                "name": "replaceBefore",
                "description": [
                  "Replace part of string before the first occurrence of given delimiter with the replacement string.\nIf the string does not contain the delimiter, returns missingDelimiterValue which defaults to the original string."
                ],
                "code": [
                  "fun String.replaceBefore(    delimiter: Char,     replacement: String,     missingDelimiterValue: String = this): String",
                  "fun String.replaceBefore(    delimiter: String,     replacement: String,     missingDelimiterValue: String = this): String"
                ]
              },
              {
                "name": "replaceBeforeLast",
                "description": [
                  "Replace part of string before the last occurrence of given delimiter with the replacement string.\nIf the string does not contain the delimiter, returns missingDelimiterValue which defaults to the original string."
                ],
                "code": [
                  "fun String.replaceBeforeLast(    delimiter: Char,     replacement: String,     missingDelimiterValue: String = this): String",
                  "fun String.replaceBeforeLast(    delimiter: String,     replacement: String,     missingDelimiterValue: String = this): String"
                ]
              },
              {
                "name": "replaceFirst",
                "description": [
                  "Replaces the first occurrence of the given regular expression regex in this char sequence with specified replacement expression."
                ],
                "code": [
                  "fun CharSequence.replaceFirst(    regex: Regex,     replacement: String): String"
                ]
              },
              {
                "name": "replaceFirstChar",
                "description": [
                  "Returns a copy of this string having its first character replaced with the result of the specified transform,\nor the original string if it's empty."
                ],
                "code": [
                  "fun String.replaceFirstChar(    transform: (Char) -> Char): String",
                  "fun String.replaceFirstChar(    transform: (Char) -> CharSequence): String"
                ]
              },
              {
                "name": "replaceIndent",
                "description": [
                  "Detects a common minimal indent like it does trimIndent and replaces it with the specified newIndent."
                ],
                "code": [
                  "fun String.replaceIndent(newIndent: String = \"\"): String"
                ]
              },
              {
                "name": "replaceIndentByMargin",
                "description": [
                  "Detects indent by marginPrefix as it does trimMargin and replace it with newIndent."
                ],
                "code": [
                  "fun String.replaceIndentByMargin(    newIndent: String = \"\",     marginPrefix: String = \"|\"): String"
                ]
              },
              {
                "name": "replaceRange",
                "description": [
                  "Replaces the part of the string at the given range with the replacement char sequence.",
                  "Replace the part of string at the given range with the replacement string."
                ],
                "code": [
                  "fun String.replaceRange(    startIndex: Int,     endIndex: Int,     replacement: CharSequence): String",
                  "fun String.replaceRange(    range: IntRange,     replacement: CharSequence): String"
                ]
              },
              {
                "name": "reversed",
                "description": [
                  "Returns a string with characters in reversed order."
                ],
                "code": ["fun String.reversed(): String"]
              },
              {
                "name": "runningFold",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each character and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> CharSequence.runningFold(    initial: R,     operation: (acc: R, Char) -> R): List<R>"
                ]
              },
              {
                "name": "runningFoldIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each character, its index in the original char sequence and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> CharSequence.runningFoldIndexed(    initial: R,     operation: (index: Int, acc: R, Char) -> R): List<R>"
                ]
              },
              {
                "name": "runningReduce",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each character and current accumulator value that starts with the first character of this char sequence."
                ],
                "code": [
                  "fun CharSequence.runningReduce(    operation: (acc: Char, Char) -> Char): List<Char>"
                ]
              },
              {
                "name": "runningReduceIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each character, its index in the original char sequence and current accumulator value that starts with the first character of this char sequence."
                ],
                "code": [
                  "fun CharSequence.runningReduceIndexed(    operation: (index: Int, acc: Char, Char) -> Char): List<Char>"
                ]
              },
              {
                "name": "scan",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each character and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> CharSequence.scan(    initial: R,     operation: (acc: R, Char) -> R): List<R>"
                ]
              },
              {
                "name": "scanIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each character, its index in the original char sequence and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> CharSequence.scanIndexed(    initial: R,     operation: (index: Int, acc: R, Char) -> R): List<R>"
                ]
              },
              {
                "name": "single",
                "description": [
                  "Returns the single character, or throws an exception if the char sequence is empty or has more than one character.",
                  "Returns the single character matching the given predicate, or throws exception if there is no or more than one matching character."
                ],
                "code": [
                  "fun CharSequence.single(): Char",
                  "fun CharSequence.single(predicate: (Char) -> Boolean): Char"
                ]
              },
              {
                "name": "singleOrNull",
                "description": [
                  "Returns single character, or null if the char sequence is empty or has more than one character.",
                  "Returns the single character matching the given predicate, or null if character was not found or more than one character was found."
                ],
                "code": [
                  "fun CharSequence.singleOrNull(): Char?",
                  "fun CharSequence.singleOrNull(    predicate: (Char) -> Boolean): Char?"
                ]
              },
              {
                "name": "slice",
                "description": [
                  "Returns a string containing characters of the original string at the specified range of indices.",
                  "Returns a string containing characters of the original string at specified indices."
                ],
                "code": [
                  "fun String.slice(indices: IntRange): String",
                  "fun String.slice(indices: Iterable<Int>): String"
                ]
              },
              {
                "name": "split",
                "description": [
                  "Splits this char sequence to a list of strings around occurrences of the specified delimiters.",
                  "Splits this char sequence to a list of strings around matches of the given regular expression.",
                  "Splits this char sequence around matches of the given regular expression."
                ],
                "code": [
                  "fun CharSequence.split(    vararg delimiters: String,     ignoreCase: Boolean = false,     limit: Int = 0): List<String>",
                  "fun CharSequence.split(    vararg delimiters: Char,     ignoreCase: Boolean = false,     limit: Int = 0): List<String>",
                  "fun CharSequence.split(    regex: Regex,     limit: Int = 0): List<String>",
                  "fun CharSequence.split(    regex: Pattern,     limit: Int = 0): List<String>"
                ]
              },
              {
                "name": "splitToSequence",
                "description": [
                  "Splits this char sequence to a sequence of strings around occurrences of the specified delimiters.",
                  "Splits this char sequence to a sequence of strings around matches of the given regular expression."
                ],
                "code": [
                  "fun CharSequence.splitToSequence(    vararg delimiters: String,     ignoreCase: Boolean = false,     limit: Int = 0): Sequence<String>",
                  "fun CharSequence.splitToSequence(    vararg delimiters: Char,     ignoreCase: Boolean = false,     limit: Int = 0): Sequence<String>",
                  "fun CharSequence.splitToSequence(    regex: Regex,     limit: Int = 0): Sequence<String>"
                ]
              },
              {
                "name": "startsWith",
                "description": [
                  "Returns true if this char sequence starts with the specified character.",
                  "Returns true if this char sequence starts with the specified prefix.",
                  "Returns true if a substring of this char sequence starting at the specified offset startIndex starts with the specified prefix."
                ],
                "code": [
                  "fun CharSequence.startsWith(    char: Char,     ignoreCase: Boolean = false): Boolean",
                  "fun CharSequence.startsWith(    prefix: CharSequence,     ignoreCase: Boolean = false): Boolean",
                  "fun CharSequence.startsWith(    prefix: CharSequence,     startIndex: Int,     ignoreCase: Boolean = false): Boolean"
                ]
              },
              {
                "name": "subSequence",
                "description": [
                  "Returns a subsequence of this char sequence.",
                  "Returns a subsequence of this char sequence specified by the given range of indices."
                ],
                "code": [
                  "fun String.subSequence(start: Int, end: Int): CharSequence",
                  "fun CharSequence.subSequence(range: IntRange): CharSequence"
                ]
              },
              {
                "name": "substring",
                "description": [
                  "Returns a substring specified by the given range of indices."
                ],
                "code": ["fun String.substring(range: IntRange): String"]
              },
              {
                "name": "substringAfter",
                "description": [
                  "Returns a substring after the first occurrence of delimiter.\nIf the string does not contain the delimiter, returns missingDelimiterValue which defaults to the original string."
                ],
                "code": [
                  "fun String.substringAfter(    delimiter: Char,     missingDelimiterValue: String = this): String",
                  "fun String.substringAfter(    delimiter: String,     missingDelimiterValue: String = this): String"
                ]
              },
              {
                "name": "substringAfterLast",
                "description": [
                  "Returns a substring after the last occurrence of delimiter.\nIf the string does not contain the delimiter, returns missingDelimiterValue which defaults to the original string."
                ],
                "code": [
                  "fun String.substringAfterLast(    delimiter: Char,     missingDelimiterValue: String = this): String",
                  "fun String.substringAfterLast(    delimiter: String,     missingDelimiterValue: String = this): String"
                ]
              },
              {
                "name": "substringBefore",
                "description": [
                  "Returns a substring before the first occurrence of delimiter.\nIf the string does not contain the delimiter, returns missingDelimiterValue which defaults to the original string."
                ],
                "code": [
                  "fun String.substringBefore(    delimiter: Char,     missingDelimiterValue: String = this): String",
                  "fun String.substringBefore(    delimiter: String,     missingDelimiterValue: String = this): String"
                ]
              },
              {
                "name": "substringBeforeLast",
                "description": [
                  "Returns a substring before the last occurrence of delimiter.\nIf the string does not contain the delimiter, returns missingDelimiterValue which defaults to the original string."
                ],
                "code": [
                  "fun String.substringBeforeLast(    delimiter: Char,     missingDelimiterValue: String = this): String",
                  "fun String.substringBeforeLast(    delimiter: String,     missingDelimiterValue: String = this): String"
                ]
              },
              {
                "name": "sumBy",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each character in the char sequence."
                ],
                "code": ["fun CharSequence.sumBy(selector: (Char) -> Int): Int"]
              },
              {
                "name": "sumByDouble",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each character in the char sequence."
                ],
                "code": [
                  "fun CharSequence.sumByDouble(    selector: (Char) -> Double): Double"
                ]
              },
              {
                "name": "sumOf",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each character in the char sequence."
                ],
                "code": [
                  "fun CharSequence.sumOf(selector: (Char) -> Double): Double",
                  "fun CharSequence.sumOf(selector: (Char) -> Int): Int",
                  "fun CharSequence.sumOf(selector: (Char) -> Long): Long",
                  "fun CharSequence.sumOf(selector: (Char) -> UInt): UInt",
                  "fun CharSequence.sumOf(selector: (Char) -> ULong): ULong",
                  "fun CharSequence.sumOf(    selector: (Char) -> BigDecimal): BigDecimal",
                  "fun CharSequence.sumOf(    selector: (Char) -> BigInteger): BigInteger"
                ]
              },
              {
                "name": "take",
                "description": [
                  "Returns a string containing the first n characters from this string, or the entire string if this string is shorter."
                ],
                "code": ["fun String.take(n: Int): String"]
              },
              {
                "name": "takeLast",
                "description": [
                  "Returns a string containing the last n characters from this string, or the entire string if this string is shorter."
                ],
                "code": ["fun String.takeLast(n: Int): String"]
              },
              {
                "name": "takeLastWhile",
                "description": [
                  "Returns a string containing last characters that satisfy the given predicate."
                ],
                "code": [
                  "fun String.takeLastWhile(    predicate: (Char) -> Boolean): String"
                ]
              },
              {
                "name": "takeWhile",
                "description": [
                  "Returns a string containing the first characters that satisfy the given predicate."
                ],
                "code": [
                  "fun String.takeWhile(predicate: (Char) -> Boolean): String"
                ]
              },
              {
                "name": "toBigDecimal",
                "description": [
                  "Parses the string as a java.math.BigDecimal number and returns the result."
                ],
                "code": [
                  "fun String.toBigDecimal(): BigDecimal",
                  "fun String.toBigDecimal(mathContext: MathContext): BigDecimal"
                ]
              },
              {
                "name": "toBigDecimalOrNull",
                "description": [
                  "Parses the string as a java.math.BigDecimal number and returns the result\nor null if the string is not a valid representation of a number."
                ],
                "code": [
                  "fun String.toBigDecimalOrNull(): BigDecimal?",
                  "fun String.toBigDecimalOrNull(    mathContext: MathContext): BigDecimal?"
                ]
              },
              {
                "name": "toBigInteger",
                "description": [
                  "Parses the string as a java.math.BigInteger number and returns the result."
                ],
                "code": [
                  "fun String.toBigInteger(): BigInteger",
                  "fun String.toBigInteger(radix: Int): BigInteger"
                ]
              },
              {
                "name": "toBigIntegerOrNull",
                "description": [
                  "Parses the string as a java.math.BigInteger number and returns the result\nor null if the string is not a valid representation of a number."
                ],
                "code": [
                  "fun String.toBigIntegerOrNull(): BigInteger?",
                  "fun String.toBigIntegerOrNull(radix: Int): BigInteger?"
                ]
              },
              {
                "name": "toBooleanStrict",
                "description": [
                  "Returns true if the content of this string is equal to the word \"true\", false if it is equal to \"false\",\nand throws an exception otherwise."
                ],
                "code": ["fun String.toBooleanStrict(): Boolean"]
              },
              {
                "name": "toBooleanStrictOrNull",
                "description": [
                  "Returns true if the content of this string is equal to the word \"true\", false if it is equal to \"false\",\nand null otherwise."
                ],
                "code": ["fun String.toBooleanStrictOrNull(): Boolean?"]
              },
              {
                "name": "toByteArray",
                "description": [
                  "Encodes the contents of this string using the specified character set and returns the resulting byte array."
                ],
                "code": [
                  "fun String.toByteArray(    charset: Charset = Charsets.UTF_8): ByteArray"
                ]
              },
              {
                "name": "toByteOrNull",
                "description": [
                  "Parses the string as a signed Byte number and returns the result\nor null if the string is not a valid representation of a number."
                ],
                "code": [
                  "fun String.toByteOrNull(): Byte?",
                  "fun String.toByteOrNull(radix: Int): Byte?"
                ]
              },
              {
                "name": "toCharArray",
                "description": [
                  "Copies characters from this string into the destination character array and returns that array."
                ],
                "code": [
                  "fun String.toCharArray(    destination: CharArray,     destinationOffset: Int = 0,     startIndex: Int = 0,     endIndex: Int = length): CharArray"
                ]
              },
              {
                "name": "toCollection",
                "description": [
                  "Appends all characters to the given destination collection."
                ],
                "code": [
                  "fun <C : MutableCollection<in Char>> CharSequence.toCollection(    destination: C): C"
                ]
              },
              {
                "name": "toHashSet",
                "description": ["Returns a new HashSet of all characters."],
                "code": ["fun CharSequence.toHashSet(): HashSet<Char>"]
              },
              {
                "name": "toIntOrNull",
                "description": [
                  "Parses the string as an Int number and returns the result\nor null if the string is not a valid representation of a number."
                ],
                "code": [
                  "fun String.toIntOrNull(): Int?",
                  "fun String.toIntOrNull(radix: Int): Int?"
                ]
              },
              {
                "name": "toList",
                "description": ["Returns a List containing all characters."],
                "code": ["fun CharSequence.toList(): List<Char>"]
              },
              {
                "name": "toLongOrNull",
                "description": [
                  "Parses the string as a Long number and returns the result\nor null if the string is not a valid representation of a number."
                ],
                "code": [
                  "fun String.toLongOrNull(): Long?",
                  "fun String.toLongOrNull(radix: Int): Long?"
                ]
              },
              {
                "name": "toLowerCase",
                "description": [
                  "Returns a copy of this string converted to lower case using the rules of the specified locale."
                ],
                "code": ["fun String.toLowerCase(locale: Locale): String"]
              },
              {
                "name": "toMutableList",
                "description": [
                  "Returns a new MutableList filled with all characters of this char sequence."
                ],
                "code": ["fun CharSequence.toMutableList(): MutableList<Char>"]
              },
              {
                "name": "toPattern",
                "description": [
                  "Converts the string into a regular expression Pattern optionally\nwith the specified flags from Pattern or'd together\nso that strings can be split or matched on."
                ],
                "code": ["fun String.toPattern(flags: Int = 0): Pattern"]
              },
              {
                "name": "toRegex",
                "description": [
                  "Converts the string into a regular expression Regex with the default options.",
                  "Converts the string into a regular expression Regex with the specified single option.",
                  "Converts the string into a regular expression Regex with the specified set of options."
                ],
                "code": [
                  "fun String.toRegex(): Regex",
                  "fun String.toRegex(option: RegexOption): Regex",
                  "fun String.toRegex(options: Set<RegexOption>): Regex"
                ]
              },
              {
                "name": "toSet",
                "description": ["Returns a Set of all characters."],
                "code": ["fun CharSequence.toSet(): Set<Char>"]
              },
              {
                "name": "toShortOrNull",
                "description": [
                  "Parses the string as a Short number and returns the result\nor null if the string is not a valid representation of a number."
                ],
                "code": [
                  "fun String.toShortOrNull(): Short?",
                  "fun String.toShortOrNull(radix: Int): Short?"
                ]
              },
              {
                "name": "toSortedSet",
                "description": ["Returns a new SortedSet of all characters."],
                "code": ["fun CharSequence.toSortedSet(): SortedSet<Char>"]
              },
              {
                "name": "toUByte",
                "description": [
                  "Parses the string as a signed UByte number and returns the result."
                ],
                "code": [
                  "fun String.toUByte(): UByte",
                  "fun String.toUByte(radix: Int): UByte"
                ]
              },
              {
                "name": "toUByteOrNull",
                "description": [
                  "Parses the string as an UByte number and returns the result\nor null if the string is not a valid representation of a number."
                ],
                "code": [
                  "fun String.toUByteOrNull(): UByte?",
                  "fun String.toUByteOrNull(radix: Int): UByte?"
                ]
              },
              {
                "name": "toUInt",
                "description": [
                  "Parses the string as an UInt number and returns the result."
                ],
                "code": [
                  "fun String.toUInt(): UInt",
                  "fun String.toUInt(radix: Int): UInt"
                ]
              },
              {
                "name": "toUIntOrNull",
                "description": [
                  "Parses the string as an UInt number and returns the result\nor null if the string is not a valid representation of a number."
                ],
                "code": [
                  "fun String.toUIntOrNull(): UInt?",
                  "fun String.toUIntOrNull(radix: Int): UInt?"
                ]
              },
              {
                "name": "toULong",
                "description": [
                  "Parses the string as a ULong number and returns the result."
                ],
                "code": [
                  "fun String.toULong(): ULong",
                  "fun String.toULong(radix: Int): ULong"
                ]
              },
              {
                "name": "toULongOrNull",
                "description": [
                  "Parses the string as an ULong number and returns the result\nor null if the string is not a valid representation of a number."
                ],
                "code": [
                  "fun String.toULongOrNull(): ULong?",
                  "fun String.toULongOrNull(radix: Int): ULong?"
                ]
              },
              {
                "name": "toUpperCase",
                "description": [
                  "Returns a copy of this string converted to upper case using the rules of the specified locale."
                ],
                "code": ["fun String.toUpperCase(locale: Locale): String"]
              },
              {
                "name": "toUShort",
                "description": [
                  "Parses the string as a UShort number and returns the result."
                ],
                "code": [
                  "fun String.toUShort(): UShort",
                  "fun String.toUShort(radix: Int): UShort"
                ]
              },
              {
                "name": "toUShortOrNull",
                "description": [
                  "Parses the string as an UShort number and returns the result\nor null if the string is not a valid representation of a number."
                ],
                "code": [
                  "fun String.toUShortOrNull(): UShort?",
                  "fun String.toUShortOrNull(radix: Int): UShort?"
                ]
              },
              {
                "name": "trim",
                "description": [
                  "Returns a string having leading and trailing characters matching the predicate removed.",
                  "Returns a string having leading and trailing characters from the chars array removed.",
                  "Returns a string having leading and trailing whitespace removed."
                ],
                "code": [
                  "fun String.trim(predicate: (Char) -> Boolean): String",
                  "fun String.trim(vararg chars: Char): String",
                  "fun String.trim(): String"
                ]
              },
              {
                "name": "trimEnd",
                "description": [
                  "Returns a string having trailing characters matching the predicate removed.",
                  "Returns a string having trailing characters from the chars array removed.",
                  "Returns a string having trailing whitespace removed."
                ],
                "code": [
                  "fun String.trimEnd(predicate: (Char) -> Boolean): String",
                  "fun String.trimEnd(vararg chars: Char): String",
                  "fun String.trimEnd(): String"
                ]
              },
              {
                "name": "trimIndent",
                "description": [
                  "Detects a common minimal indent of all the input lines, removes it from every line and also removes the first and the last\nlines if they are blank (notice difference blank vs empty)."
                ],
                "code": ["fun String.trimIndent(): String"]
              },
              {
                "name": "trimMargin",
                "description": [
                  "Trims leading whitespace characters followed by marginPrefix from every line of a source string and removes\nthe first and the last lines if they are blank (notice difference blank vs empty)."
                ],
                "code": [
                  "fun String.trimMargin(marginPrefix: String = \"|\"): String"
                ]
              },
              {
                "name": "trimStart",
                "description": [
                  "Returns a string having leading characters matching the predicate removed.",
                  "Returns a string having leading characters from the chars array removed.",
                  "Returns a string having leading whitespace removed."
                ],
                "code": [
                  "fun String.trimStart(predicate: (Char) -> Boolean): String",
                  "fun String.trimStart(vararg chars: Char): String",
                  "fun String.trimStart(): String"
                ]
              },
              {
                "name": "uppercase",
                "description": [
                  "Returns a copy of this string converted to upper case using the rules of the specified locale."
                ],
                "code": ["fun String.uppercase(locale: Locale): String"]
              },
              {
                "name": "windowed",
                "description": [
                  "Returns a list of snapshots of the window of the given size\nsliding along this char sequence with the given step, where each\nsnapshot is a string.",
                  "Returns a list of results of applying the given transform function to\nan each char sequence representing a view over the window of the given size\nsliding along this char sequence with the given step."
                ],
                "code": [
                  "fun CharSequence.windowed(    size: Int,     step: Int = 1,     partialWindows: Boolean = false): List<String>",
                  "fun <R> CharSequence.windowed(    size: Int,     step: Int = 1,     partialWindows: Boolean = false,     transform: (CharSequence) -> R): List<R>"
                ]
              },
              {
                "name": "windowedSequence",
                "description": [
                  "Returns a sequence of snapshots of the window of the given size\nsliding along this char sequence with the given step, where each\nsnapshot is a string.",
                  "Returns a sequence of results of applying the given transform function to\nan each char sequence representing a view over the window of the given size\nsliding along this char sequence with the given step."
                ],
                "code": [
                  "fun CharSequence.windowedSequence(    size: Int,     step: Int = 1,     partialWindows: Boolean = false): Sequence<String>",
                  "fun <R> CharSequence.windowedSequence(    size: Int,     step: Int = 1,     partialWindows: Boolean = false,     transform: (CharSequence) -> R): Sequence<R>"
                ]
              },
              {
                "name": "withIndex",
                "description": [
                  "Returns a lazy Iterable that wraps each character of the original char sequence\ninto an IndexedValue containing the index of that character and the character itself."
                ],
                "code": [
                  "fun CharSequence.withIndex(): Iterable<IndexedValue<Char>>"
                ]
              },
              {
                "name": "zip",
                "description": [
                  "Returns a list of pairs built from the characters of this and the other char sequences with the same index\nThe returned list has length of the shortest char sequence.",
                  "Returns a list of values built from the characters of this and the other char sequences with the same index\nusing the provided transform function applied to each pair of characters.\nThe returned list has length of the shortest char sequence."
                ],
                "code": [
                  "infix fun CharSequence.zip(    other: CharSequence): List<Pair<Char, Char>>",
                  "fun <V> CharSequence.zip(    other: CharSequence,     transform: (a: Char, b: Char) -> V): List<V>"
                ]
              },
              {
                "name": "zipWithNext",
                "description": [
                  "Returns a list of pairs of each two adjacent characters in this char sequence.",
                  "Returns a list containing the results of applying the given transform function\nto an each pair of two adjacent characters in this char sequence."
                ],
                "code": [
                  "fun CharSequence.zipWithNext(): List<Pair<Char, Char>>",
                  "fun <R> CharSequence.zipWithNext(    transform: (a: Char, b: Char) -> R): List<R>"
                ]
              }
            ]
          },
          {
            "name": "Companion Object Extension Functions",
            "declarations": [
              {
                "name": "format",
                "description": [
                  "Uses the provided format as a format string and returns a string obtained by substituting the specified arguments,\nusing the default locale.",
                  "Uses the provided format as a format string and returns a string obtained by substituting the specified arguments,\nusing the specified locale. If locale is null then no localization is applied."
                ],
                "code": [
                  "fun String.Companion.format(    format: String,     vararg args: Any?): String",
                  "fun String.Companion.format(    locale: Locale?,     format: String,     vararg args: Any?): String"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "Throwable",
        "description": [
          "The base class for all errors and exceptions. Only instances of this class can be thrown or caught."
        ],
        "code": ["open class Throwable"],
        "url": "-throwable/index.html",
        "subcategories": [
          {
            "name": "Parameters",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "The base class for all errors and exceptions. Only instances of this class can be thrown or caught."
                ],
                "code": [
                  "<init>(message: String?)",
                  "<init>(cause: Throwable?)",
                  "<init>()",
                  "<init>(message: String?, cause: Throwable?)"
                ]
              }
            ]
          },
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "cause",
                "description": ["the cause of this throwable."],
                "code": ["open val cause: Throwable?"]
              },
              {
                "name": "message",
                "description": ["the detail message string."],
                "code": ["open val message: String?"]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "getStackTrace",
                "description": [
                  "Returns an array of stack trace strings representing the stack trace\npertaining to this throwable."
                ],
                "code": ["fun getStackTrace(): Array<String>"]
              },
              {
                "name": "printStackTrace",
                "description": [
                  "Prints the detailed description of this throwable to the standard output."
                ],
                "code": ["fun printStackTrace()"]
              },
              {
                "name": "toString",
                "description": [
                  "Returns the short description of this throwable consisting of\nthe exception class name (fully qualified if possible)\nfollowed by the exception message if it is not null."
                ],
                "code": ["open fun toString(): String"]
              }
            ]
          },
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "stackTrace",
                "description": [
                  "Returns an array of stack trace elements representing the stack trace\npertaining to this throwable."
                ],
                "code": ["val Throwable.stackTrace: Array<StackTraceElement>"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "getStackTraceAddresses",
                "description": [
                  "Returns a list of stack trace addresses representing the stack trace\npertaining to this throwable."
                ],
                "code": ["fun Throwable.getStackTraceAddresses(): List<Long>"]
              },
              {
                "name": "printStackTrace",
                "description": [
                  "Prints the detailed description of this throwable to the specified writer.",
                  "Prints the detailed description of this throwable to the specified stream."
                ],
                "code": [
                  "fun Throwable.printStackTrace(writer: PrintWriter)",
                  "fun Throwable.printStackTrace(stream: PrintStream)"
                ]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "Error",
                "description": [],
                "code": [
                  "open class Error : Throwable",
                  "typealias Error = Error"
                ]
              },
              {
                "name": "Exception",
                "description": [],
                "code": [
                  "open class Exception : Throwable",
                  "typealias Exception = Exception"
                ]
              }
            ]
          },
          { "name": "Inheritors", "declarations": [] }
        ]
      },
      {
        "name": "Triple",
        "description": ["Represents a triad of values"],
        "code": ["data class Triple<out A, out B, out C> : Serializable"],
        "url": "-triple/index.html",
        "subcategories": [
          {
            "name": "Parameters",
            "declarations": [
              {
                "name": "<init>",
                "description": ["Represents a triad of values"],
                "code": ["Triple(first: A, second: B, third: C)"]
              }
            ]
          },
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "first",
                "description": ["First value."],
                "code": ["val first: A"]
              },
              {
                "name": "second",
                "description": ["Second value."],
                "code": ["val second: B"]
              },
              {
                "name": "third",
                "description": ["Third value."],
                "code": ["val third: C"]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "toString",
                "description": [
                  "Returns string representation of the Triple including its first, second and third values."
                ],
                "code": ["fun toString(): String"]
              }
            ]
          },
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "toList",
                "description": ["Converts this triple into a list."],
                "code": ["fun <T> Triple<T, T, T>.toList(): List<T>"]
              }
            ]
          },
          { "name": "Extension Functions", "declarations": [] }
        ]
      },
      {
        "name": "UByte",
        "description": [],
        "code": ["class UByte : Comparable<UByte>"],
        "url": "-u-byte/index.html",
        "subcategories": [
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "and",
                "description": [
                  "Performs a bitwise AND operation between the two values."
                ],
                "code": ["infix fun and(other: UByte): UByte"]
              },
              {
                "name": "compareTo",
                "description": [
                  "Compares this value with the specified value for order.\nReturns zero if this value is equal to the specified other value, a negative number if it's less than other,\nor a positive number if it's greater than other."
                ],
                "code": [
                  "operator fun compareTo(other: UByte): Int",
                  "operator fun compareTo(other: UShort): Int",
                  "operator fun compareTo(other: UInt): Int",
                  "operator fun compareTo(other: ULong): Int"
                ]
              },
              {
                "name": "dec",
                "description": ["Returns this value decremented by one."],
                "code": ["operator fun dec(): UByte"]
              },
              {
                "name": "div",
                "description": [
                  "Divides this value by the other value, truncating the result to an integer that is closer to zero."
                ],
                "code": [
                  "operator fun div(other: UByte): UInt",
                  "operator fun div(other: UShort): UInt",
                  "operator fun div(other: UInt): UInt",
                  "operator fun div(other: ULong): ULong"
                ]
              },
              {
                "name": "floorDiv",
                "description": [
                  "Divides this value by the other value, flooring the result to an integer that is closer to negative infinity."
                ],
                "code": [
                  "fun floorDiv(other: UByte): UInt",
                  "fun floorDiv(other: UShort): UInt",
                  "fun floorDiv(other: UInt): UInt",
                  "fun floorDiv(other: ULong): ULong"
                ]
              },
              {
                "name": "inc",
                "description": ["Returns this value incremented by one."],
                "code": ["operator fun inc(): UByte"]
              },
              {
                "name": "inv",
                "description": ["Inverts the bits in this value."],
                "code": ["fun inv(): UByte"]
              },
              {
                "name": "minus",
                "description": ["Subtracts the other value from this value."],
                "code": [
                  "operator fun minus(other: UByte): UInt",
                  "operator fun minus(other: UShort): UInt",
                  "operator fun minus(other: UInt): UInt",
                  "operator fun minus(other: ULong): ULong"
                ]
              },
              {
                "name": "mod",
                "description": [
                  "Calculates the remainder of flooring division of this value (dividend) by the other value (divisor)."
                ],
                "code": [
                  "fun mod(other: UByte): UByte",
                  "fun mod(other: UShort): UShort",
                  "fun mod(other: UInt): UInt",
                  "fun mod(other: ULong): ULong"
                ]
              },
              {
                "name": "or",
                "description": [
                  "Performs a bitwise OR operation between the two values."
                ],
                "code": ["infix fun or(other: UByte): UByte"]
              },
              {
                "name": "plus",
                "description": ["Adds the other value to this value."],
                "code": [
                  "operator fun plus(other: UByte): UInt",
                  "operator fun plus(other: UShort): UInt",
                  "operator fun plus(other: UInt): UInt",
                  "operator fun plus(other: ULong): ULong"
                ]
              },
              {
                "name": "rangeTo",
                "description": [
                  "Creates a range from this value to the specified other value."
                ],
                "code": ["operator fun rangeTo(other: UByte): UIntRange"]
              },
              {
                "name": "rangeUntil",
                "description": [
                  "Creates a range from this value up to but excluding the specified other value."
                ],
                "code": ["operator fun rangeUntil(other: UByte): UIntRange"]
              },
              {
                "name": "rem",
                "description": [
                  "Calculates the remainder of truncating division of this value (dividend) by the other value (divisor)."
                ],
                "code": [
                  "operator fun rem(other: UByte): UInt",
                  "operator fun rem(other: UShort): UInt",
                  "operator fun rem(other: UInt): UInt",
                  "operator fun rem(other: ULong): ULong"
                ]
              },
              {
                "name": "times",
                "description": ["Multiplies this value by the other value."],
                "code": [
                  "operator fun times(other: UByte): UInt",
                  "operator fun times(other: UShort): UInt",
                  "operator fun times(other: UInt): UInt",
                  "operator fun times(other: ULong): ULong"
                ]
              },
              {
                "name": "toByte",
                "description": ["Converts this UByte value to Byte."],
                "code": ["fun toByte(): Byte"]
              },
              {
                "name": "toDouble",
                "description": ["Converts this UByte value to Double."],
                "code": ["fun toDouble(): Double"]
              },
              {
                "name": "toFloat",
                "description": ["Converts this UByte value to Float."],
                "code": ["fun toFloat(): Float"]
              },
              {
                "name": "toInt",
                "description": ["Converts this UByte value to Int."],
                "code": ["fun toInt(): Int"]
              },
              {
                "name": "toLong",
                "description": ["Converts this UByte value to Long."],
                "code": ["fun toLong(): Long"]
              },
              {
                "name": "toShort",
                "description": ["Converts this UByte value to Short."],
                "code": ["fun toShort(): Short"]
              },
              {
                "name": "toString",
                "description": [
                  "Returns a string representation of the object."
                ],
                "code": ["fun toString(): String"]
              },
              {
                "name": "toUByte",
                "description": ["Returns this value."],
                "code": ["fun toUByte(): UByte"]
              },
              {
                "name": "toUInt",
                "description": ["Converts this UByte value to UInt."],
                "code": ["fun toUInt(): UInt"]
              },
              {
                "name": "toULong",
                "description": ["Converts this UByte value to ULong."],
                "code": ["fun toULong(): ULong"]
              },
              {
                "name": "toUShort",
                "description": ["Converts this UByte value to UShort."],
                "code": ["fun toUShort(): UShort"]
              },
              {
                "name": "xor",
                "description": [
                  "Performs a bitwise XOR operation between the two values."
                ],
                "code": ["infix fun xor(other: UByte): UByte"]
              }
            ]
          },
          {
            "name": "Companion Object Properties",
            "declarations": [
              {
                "name": "MAX_VALUE",
                "description": [
                  "A constant holding the maximum value an instance of UByte can have."
                ],
                "code": ["const val MAX_VALUE: UByte"]
              },
              {
                "name": "MIN_VALUE",
                "description": [
                  "A constant holding the minimum value an instance of UByte can have."
                ],
                "code": ["const val MIN_VALUE: UByte"]
              },
              {
                "name": "SIZE_BITS",
                "description": [
                  "The number of bits used to represent an instance of UByte in a binary form."
                ],
                "code": ["const val SIZE_BITS: Int"]
              },
              {
                "name": "SIZE_BYTES",
                "description": [
                  "The number of bytes used to represent an instance of UByte in a binary form."
                ],
                "code": ["const val SIZE_BYTES: Int"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "coerceAtLeast",
                "description": [
                  "Ensures that this value is not less than the specified minimumValue."
                ],
                "code": [
                  "fun UByte.coerceAtLeast(minimumValue: UByte): UByte",
                  "fun <T : Comparable<T>> T.coerceAtLeast(minimumValue: T): T"
                ]
              },
              {
                "name": "coerceAtMost",
                "description": [
                  "Ensures that this value is not greater than the specified maximumValue."
                ],
                "code": [
                  "fun UByte.coerceAtMost(maximumValue: UByte): UByte",
                  "fun <T : Comparable<T>> T.coerceAtMost(maximumValue: T): T"
                ]
              },
              {
                "name": "coerceIn",
                "description": [
                  "Ensures that this value lies in the specified range minimumValue..maximumValue.",
                  "Ensures that this value lies in the specified range."
                ],
                "code": [
                  "fun UByte.coerceIn(    minimumValue: UByte,     maximumValue: UByte): UByte",
                  "fun <T : Comparable<T>> T.coerceIn(    minimumValue: T?,     maximumValue: T?): T",
                  "fun <T : Comparable<T>> T.coerceIn(    range: ClosedFloatingPointRange<T>): T",
                  "fun <T : Comparable<T>> T.coerceIn(range: ClosedRange<T>): T"
                ]
              },
              {
                "name": "compareTo",
                "description": [
                  "Compares this object with the specified object for order. Returns zero if this object is equal\nto the specified other object, a negative number if it's less than other, or a positive number\nif it's greater than other."
                ],
                "code": ["infix fun <T> Comparable<T>.compareTo(other: T): Int"]
              },
              {
                "name": "convert",
                "description": [],
                "code": ["fun <R : Any> UByte.convert(): R"]
              },
              {
                "name": "countLeadingZeroBits",
                "description": [
                  "Counts the number of consecutive most significant bits that are zero in the binary representation of this UByte number."
                ],
                "code": ["fun UByte.countLeadingZeroBits(): Int"]
              },
              {
                "name": "countOneBits",
                "description": [
                  "Counts the number of set bits in the binary representation of this UByte number."
                ],
                "code": ["fun UByte.countOneBits(): Int"]
              },
              {
                "name": "countTrailingZeroBits",
                "description": [
                  "Counts the number of consecutive least significant bits that are zero in the binary representation of this UByte number."
                ],
                "code": ["fun UByte.countTrailingZeroBits(): Int"]
              },
              {
                "name": "downTo",
                "description": [
                  "Returns a progression from this value down to the specified to value with the step -1."
                ],
                "code": ["infix fun UByte.downTo(to: UByte): UIntProgression"]
              },
              {
                "name": "rangeTo",
                "description": [
                  "Creates a range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeTo(    that: T): ClosedRange<T>"
                ]
              },
              {
                "name": "rangeUntil",
                "description": [
                  "Creates an open-ended range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeUntil(    that: T): OpenEndRange<T>"
                ]
              },
              {
                "name": "rotateLeft",
                "description": [
                  "Rotates the binary representation of this UByte number left by the specified bitCount number of bits.\nThe most significant bits pushed out from the left side reenter the number as the least significant bits on the right side."
                ],
                "code": ["fun UByte.rotateLeft(bitCount: Int): UByte"]
              },
              {
                "name": "rotateRight",
                "description": [
                  "Rotates the binary representation of this UByte number right by the specified bitCount number of bits.\nThe least significant bits pushed out from the right side reenter the number as the most significant bits on the left side."
                ],
                "code": ["fun UByte.rotateRight(bitCount: Int): UByte"]
              },
              {
                "name": "takeHighestOneBit",
                "description": [
                  "Returns a number having a single bit set in the position of the most significant set bit of this UByte number,\nor zero, if this number is zero."
                ],
                "code": ["fun UByte.takeHighestOneBit(): UByte"]
              },
              {
                "name": "takeLowestOneBit",
                "description": [
                  "Returns a number having a single bit set in the position of the least significant set bit of this UByte number,\nor zero, if this number is zero."
                ],
                "code": ["fun UByte.takeLowestOneBit(): UByte"]
              },
              {
                "name": "toHexString",
                "description": [
                  "Formats this UByte value using the specified format."
                ],
                "code": [
                  "fun UByte.toHexString(    format: HexFormat = HexFormat.Default): String"
                ]
              },
              {
                "name": "toString",
                "description": [
                  "Returns a string representation of this Byte value in the specified radix."
                ],
                "code": ["fun UByte.toString(radix: Int): String"]
              },
              {
                "name": "until",
                "description": [
                  "Returns a range from this value up to but excluding the specified to value."
                ],
                "code": ["infix fun UByte.until(to: UByte): UIntRange"]
              }
            ]
          }
        ]
      },
      {
        "name": "UByteArray",
        "description": [],
        "code": ["class UByteArray : Collection<UByte>"],
        "url": "-u-byte-array/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Creates a new array of the specified size, with all elements initialized to zero."
                ],
                "code": ["UByteArray(size: Int)"]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "size",
                "description": ["Returns the number of elements in the array."],
                "code": ["val size: Int"]
              }
            ]
          },
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "contains",
                "description": [],
                "code": ["fun contains(element: UByte): Boolean"]
              },
              {
                "name": "containsAll",
                "description": [],
                "code": [
                  "fun containsAll(elements: Collection<UByte>): Boolean"
                ]
              },
              {
                "name": "get",
                "description": [
                  "Returns the array element at the given index. This method can be called using the index operator."
                ],
                "code": ["operator fun get(index: Int): UByte"]
              },
              {
                "name": "isEmpty",
                "description": [],
                "code": ["fun isEmpty(): Boolean"]
              },
              {
                "name": "iterator",
                "description": [
                  "Creates an iterator over the elements of the array."
                ],
                "code": ["operator fun iterator(): Iterator<UByte>"]
              },
              {
                "name": "set",
                "description": [
                  "Sets the element at the given index to the given value. This method can be called using the index operator."
                ],
                "code": ["operator fun set(index: Int, value: UByte)"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "indices",
                "description": [
                  "Returns the range of valid indices for the array."
                ],
                "code": ["val UByteArray.indices: IntRange"]
              },
              {
                "name": "lastIndex",
                "description": ["Returns the last valid index for the array."],
                "code": ["val UByteArray.lastIndex: Int"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "all",
                "description": [
                  "Returns true if all elements match the given predicate."
                ],
                "code": [
                  "fun UByteArray.all(predicate: (UByte) -> Boolean): Boolean",
                  "fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean"
                ]
              },
              {
                "name": "any",
                "description": [
                  "Returns true if array has at least one element.",
                  "Returns true if at least one element matches the given predicate."
                ],
                "code": [
                  "fun UByteArray.any(): Boolean",
                  "fun UByteArray.any(predicate: (UByte) -> Boolean): Boolean",
                  "fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean"
                ]
              },
              {
                "name": "asByteArray",
                "description": [
                  "Returns an array of type ByteArray, which is a view of this array where each element is a signed reinterpretation\nof the corresponding element of this array."
                ],
                "code": ["fun UByteArray.asByteArray(): ByteArray"]
              },
              {
                "name": "asIterable",
                "description": ["Returns this collection as an Iterable."],
                "code": ["fun <T> Iterable<T>.asIterable(): Iterable<T>"]
              },
              {
                "name": "asSequence",
                "description": [
                  "Creates a Sequence instance that wraps the original collection returning its elements when being iterated."
                ],
                "code": ["fun <T> Iterable<T>.asSequence(): Sequence<T>"]
              },
              {
                "name": "associate",
                "description": [
                  "Returns a Map containing key-value pairs provided by transform function\napplied to elements of the given collection."
                ],
                "code": [
                  "fun <T, K, V> Iterable<T>.associate(    transform: (T) -> Pair<K, V>): Map<K, V>"
                ]
              },
              {
                "name": "associateBy",
                "description": [
                  "Returns a Map containing the elements from the given collection indexed by the key\nreturned from keySelector function applied to each element.",
                  "Returns a Map containing the values provided by valueTransform and indexed by keySelector functions applied to elements of the given collection."
                ],
                "code": [
                  "fun <T, K> Iterable<T>.associateBy(    keySelector: (T) -> K): Map<K, T>",
                  "fun <T, K, V> Iterable<T>.associateBy(    keySelector: (T) -> K,     valueTransform: (T) -> V): Map<K, V>"
                ]
              },
              {
                "name": "associateByTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function applied to each element of the given collection\nand value is the element itself.",
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function and\nand value is provided by the valueTransform function applied to elements of the given collection."
                ],
                "code": [
                  "fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(    destination: M,     keySelector: (T) -> K): M",
                  "fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(    destination: M,     keySelector: (T) -> K,     valueTransform: (T) -> V): M"
                ]
              },
              {
                "name": "associateTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs\nprovided by transform function applied to each element of the given collection."
                ],
                "code": [
                  "fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(    destination: M,     transform: (T) -> Pair<K, V>): M"
                ]
              },
              {
                "name": "associateWith",
                "description": [
                  "Returns a Map where keys are elements from the given array and values are\nproduced by the valueSelector function applied to each element.",
                  "Returns a Map where keys are elements from the given collection and values are\nproduced by the valueSelector function applied to each element."
                ],
                "code": [
                  "fun <V> UByteArray.associateWith(    valueSelector: (UByte) -> V): Map<UByte, V>",
                  "fun <K, V> Iterable<K>.associateWith(    valueSelector: (K) -> V): Map<K, V>"
                ]
              },
              {
                "name": "associateWithTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs for each element of the given array,\nwhere key is the element itself and value is provided by the valueSelector function applied to that key.",
                  "Populates and returns the destination mutable map with key-value pairs for each element of the given collection,\nwhere key is the element itself and value is provided by the valueSelector function applied to that key."
                ],
                "code": [
                  "fun <V, M : MutableMap<in UByte, in V>> UByteArray.associateWithTo(    destination: M,     valueSelector: (UByte) -> V): M",
                  "fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(    destination: M,     valueSelector: (K) -> V): M"
                ]
              },
              {
                "name": "binarySearch",
                "description": [
                  "Searches the array or the range of the array for the provided element using the binary search algorithm.\nThe array is expected to be sorted, otherwise the result is undefined."
                ],
                "code": [
                  "fun UByteArray.binarySearch(    element: UByte,     fromIndex: Int = 0,     toIndex: Int = size): Int"
                ]
              },
              {
                "name": "chunked",
                "description": [
                  "Splits this collection into a list of lists each not exceeding the given size.",
                  "Splits this collection into several lists each not exceeding the given size\nand applies the given transform function to an each."
                ],
                "code": [
                  "fun <T> Iterable<T>.chunked(size: Int): List<List<T>>",
                  "fun <T, R> Iterable<T>.chunked(    size: Int,     transform: (List<T>) -> R): List<R>"
                ]
              },
              {
                "name": "component1",
                "description": ["Returns 1st element from the array."],
                "code": ["operator fun UByteArray.component1(): UByte"]
              },
              {
                "name": "component2",
                "description": ["Returns 2nd element from the array."],
                "code": ["operator fun UByteArray.component2(): UByte"]
              },
              {
                "name": "component3",
                "description": ["Returns 3rd element from the array."],
                "code": ["operator fun UByteArray.component3(): UByte"]
              },
              {
                "name": "component4",
                "description": ["Returns 4th element from the array."],
                "code": ["operator fun UByteArray.component4(): UByte"]
              },
              {
                "name": "component5",
                "description": ["Returns 5th element from the array."],
                "code": ["operator fun UByteArray.component5(): UByte"]
              },
              {
                "name": "contains",
                "description": [
                  "Returns true if element is found in the collection."
                ],
                "code": [
                  "operator fun <T> Iterable<T>.contains(element: T): Boolean"
                ]
              },
              {
                "name": "containsAll",
                "description": [
                  "Checks if all elements in the specified collection are contained in this collection."
                ],
                "code": [
                  "fun <T> Collection<T>.containsAll(    elements: Collection<T>): Boolean"
                ]
              },
              {
                "name": "contentEquals",
                "description": [
                  "Returns true if the two specified arrays are structurally equal to one another,\ni.e. contain the same number of the same elements in the same order."
                ],
                "code": [
                  "infix fun UByteArray?.contentEquals(    other: UByteArray?): Boolean",
                  "infix fun UByteArray.contentEquals(    other: UByteArray): Boolean"
                ]
              },
              {
                "name": "contentHashCode",
                "description": [
                  "Returns a hash code based on the contents of this array as if it is List."
                ],
                "code": [
                  "fun UByteArray?.contentHashCode(): Int",
                  "fun UByteArray.contentHashCode(): Int"
                ]
              },
              {
                "name": "contentToString",
                "description": [
                  "Returns a string representation of the contents of the specified array as if it is List."
                ],
                "code": [
                  "fun UByteArray?.contentToString(): String",
                  "fun UByteArray.contentToString(): String"
                ]
              },
              {
                "name": "copyInto",
                "description": [
                  "Copies this array or its subrange into the destination array and returns that array."
                ],
                "code": [
                  "fun UByteArray.copyInto(    destination: UByteArray,     destinationOffset: Int = 0,     startIndex: Int = 0,     endIndex: Int = size): UByteArray"
                ]
              },
              {
                "name": "copyOf",
                "description": [
                  "Returns new array which is a copy of the original array.",
                  "Returns new array which is a copy of the original array, resized to the given newSize.\nThe copy is either truncated or padded at the end with zero values if necessary."
                ],
                "code": [
                  "fun UByteArray.copyOf(): UByteArray",
                  "fun UByteArray.copyOf(newSize: Int): UByteArray"
                ]
              },
              {
                "name": "copyOfRange",
                "description": [
                  "Returns a new array which is a copy of the specified range of the original array."
                ],
                "code": [
                  "fun UByteArray.copyOfRange(    fromIndex: Int,     toIndex: Int): UByteArray"
                ]
              },
              {
                "name": "count",
                "description": [
                  "Returns the number of elements matching the given predicate."
                ],
                "code": [
                  "fun UByteArray.count(predicate: (UByte) -> Boolean): Int",
                  "fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int"
                ]
              },
              {
                "name": "distinct",
                "description": [
                  "Returns a list containing only distinct elements from the given collection."
                ],
                "code": ["fun <T> Iterable<T>.distinct(): List<T>"]
              },
              {
                "name": "distinctBy",
                "description": [
                  "Returns a list containing only elements from the given collection\nhaving distinct keys returned by the given selector function."
                ],
                "code": [
                  "fun <T, K> Iterable<T>.distinctBy(    selector: (T) -> K): List<T>"
                ]
              },
              {
                "name": "drop",
                "description": [
                  "Returns a list containing all elements except first n elements."
                ],
                "code": ["fun UByteArray.drop(n: Int): List<UByte>"]
              },
              {
                "name": "dropLast",
                "description": [
                  "Returns a list containing all elements except last n elements."
                ],
                "code": ["fun UByteArray.dropLast(n: Int): List<UByte>"]
              },
              {
                "name": "dropLastWhile",
                "description": [
                  "Returns a list containing all elements except last elements that satisfy the given predicate."
                ],
                "code": [
                  "fun UByteArray.dropLastWhile(    predicate: (UByte) -> Boolean): List<UByte>"
                ]
              },
              {
                "name": "dropWhile",
                "description": [
                  "Returns a list containing all elements except first elements that satisfy the given predicate."
                ],
                "code": [
                  "fun UByteArray.dropWhile(    predicate: (UByte) -> Boolean): List<UByte>",
                  "fun <T> Iterable<T>.dropWhile(    predicate: (T) -> Boolean): List<T>"
                ]
              },
              {
                "name": "elementAtOrElse",
                "description": [
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array.",
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this collection."
                ],
                "code": [
                  "fun UByteArray.elementAtOrElse(    index: Int,     defaultValue: (Int) -> UByte): UByte",
                  "fun <T> Iterable<T>.elementAtOrElse(    index: Int,     defaultValue: (Int) -> T): T"
                ]
              },
              {
                "name": "elementAtOrNull",
                "description": [
                  "Returns an element at the given index or null if the index is out of bounds of this array."
                ],
                "code": ["fun UByteArray.elementAtOrNull(index: Int): UByte?"]
              },
              {
                "name": "fill",
                "description": [
                  "Fills this array or its subrange with the specified element value."
                ],
                "code": [
                  "fun UByteArray.fill(    element: UByte,     fromIndex: Int = 0,     toIndex: Int = size)"
                ]
              },
              {
                "name": "filter",
                "description": [
                  "Returns a list containing only elements matching the given predicate."
                ],
                "code": [
                  "fun UByteArray.filter(    predicate: (UByte) -> Boolean): List<UByte>",
                  "fun <T> Iterable<T>.filter(    predicate: (T) -> Boolean): List<T>"
                ]
              },
              {
                "name": "filterIndexed",
                "description": [
                  "Returns a list containing only elements matching the given predicate."
                ],
                "code": [
                  "fun UByteArray.filterIndexed(    predicate: (index: Int, UByte) -> Boolean): List<UByte>",
                  "fun <T> Iterable<T>.filterIndexed(    predicate: (index: Int, T) -> Boolean): List<T>"
                ]
              },
              {
                "name": "filterIndexedTo",
                "description": [
                  "Appends all elements matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in UByte>> UByteArray.filterIndexedTo(    destination: C,     predicate: (index: Int, UByte) -> Boolean): C",
                  "fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(    destination: C,     predicate: (index: Int, T) -> Boolean): C"
                ]
              },
              {
                "name": "filterIsInstance",
                "description": [
                  "Returns a list containing all elements that are instances of specified type parameter R."
                ],
                "code": ["fun <R> Iterable<*>.filterIsInstance(): List<R>"]
              },
              {
                "name": "filterIsInstanceTo",
                "description": [
                  "Appends all elements that are instances of specified type parameter R to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(    destination: C): C"
                ]
              },
              {
                "name": "filterNot",
                "description": [
                  "Returns a list containing all elements not matching the given predicate."
                ],
                "code": [
                  "fun UByteArray.filterNot(    predicate: (UByte) -> Boolean): List<UByte>",
                  "fun <T> Iterable<T>.filterNot(    predicate: (T) -> Boolean): List<T>"
                ]
              },
              {
                "name": "filterNotNull",
                "description": [
                  "Returns a list containing all elements that are not null."
                ],
                "code": ["fun <T : Any> Iterable<T?>.filterNotNull(): List<T>"]
              },
              {
                "name": "filterNotNullTo",
                "description": [
                  "Appends all elements that are not null to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(    destination: C): C"
                ]
              },
              {
                "name": "filterNotTo",
                "description": [
                  "Appends all elements not matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in UByte>> UByteArray.filterNotTo(    destination: C,     predicate: (UByte) -> Boolean): C",
                  "fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(    destination: C,     predicate: (T) -> Boolean): C"
                ]
              },
              {
                "name": "filterTo",
                "description": [
                  "Appends all elements matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in UByte>> UByteArray.filterTo(    destination: C,     predicate: (UByte) -> Boolean): C",
                  "fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(    destination: C,     predicate: (T) -> Boolean): C"
                ]
              },
              {
                "name": "find",
                "description": [
                  "Returns the first element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun UByteArray.find(predicate: (UByte) -> Boolean): UByte?",
                  "fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T?"
                ]
              },
              {
                "name": "findLast",
                "description": [
                  "Returns the last element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun UByteArray.findLast(    predicate: (UByte) -> Boolean): UByte?",
                  "fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T?"
                ]
              },
              {
                "name": "first",
                "description": [
                  "Returns the first element.",
                  "Returns the first element matching the given predicate."
                ],
                "code": [
                  "fun UByteArray.first(): UByte",
                  "fun UByteArray.first(predicate: (UByte) -> Boolean): UByte",
                  "fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T"
                ]
              },
              {
                "name": "firstNotNullOf",
                "description": [
                  "Returns the first non-null value produced by transform function being applied to elements of this collection in iteration order,\nor throws NoSuchElementException if no non-null value was produced."
                ],
                "code": [
                  "fun <T, R : Any> Iterable<T>.firstNotNullOf(    transform: (T) -> R?): R"
                ]
              },
              {
                "name": "firstNotNullOfOrNull",
                "description": [
                  "Returns the first non-null value produced by transform function being applied to elements of this collection in iteration order,\nor null if no non-null value was produced."
                ],
                "code": [
                  "fun <T, R : Any> Iterable<T>.firstNotNullOfOrNull(    transform: (T) -> R?): R?"
                ]
              },
              {
                "name": "firstOrNull",
                "description": [
                  "Returns the first element, or null if the array is empty.",
                  "Returns the first element matching the given predicate, or null if element was not found."
                ],
                "code": [
                  "fun UByteArray.firstOrNull(): UByte?",
                  "fun UByteArray.firstOrNull(    predicate: (UByte) -> Boolean): UByte?",
                  "fun <T> Iterable<T>.firstOrNull(    predicate: (T) -> Boolean): T?"
                ]
              },
              {
                "name": "flatMap",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element of original array.",
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element of original collection."
                ],
                "code": [
                  "fun <R> UByteArray.flatMap(    transform: (UByte) -> Iterable<R>): List<R>",
                  "fun <T, R> Iterable<T>.flatMap(    transform: (T) -> Iterable<R>): List<R>",
                  "fun <T, R> Iterable<T>.flatMap(    transform: (T) -> Sequence<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexed",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element\nand its index in the original array.",
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element\nand its index in the original collection."
                ],
                "code": [
                  "fun <R> UByteArray.flatMapIndexed(    transform: (index: Int, UByte) -> Iterable<R>): List<R>",
                  "fun <T, R> Iterable<T>.flatMapIndexed(    transform: (index: Int, T) -> Iterable<R>): List<R>",
                  "fun <T, R> Iterable<T>.flatMapIndexed(    transform: (index: Int, T) -> Sequence<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexedTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each element\nand its index in the original array, to the given destination.",
                  "Appends all elements yielded from results of transform function being invoked on each element\nand its index in the original collection, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> UByteArray.flatMapIndexedTo(    destination: C,     transform: (index: Int, UByte) -> Iterable<R>): C",
                  "fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(    destination: C,     transform: (index: Int, T) -> Iterable<R>): C",
                  "fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(    destination: C,     transform: (index: Int, T) -> Sequence<R>): C"
                ]
              },
              {
                "name": "flatMapTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each element of original array, to the given destination.",
                  "Appends all elements yielded from results of transform function being invoked on each element of original collection, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> UByteArray.flatMapTo(    destination: C,     transform: (UByte) -> Iterable<R>): C",
                  "fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(    destination: C,     transform: (T) -> Iterable<R>): C",
                  "fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(    destination: C,     transform: (T) -> Sequence<R>): C"
                ]
              },
              {
                "name": "fold",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun <R> UByteArray.fold(    initial: R,     operation: (acc: R, UByte) -> R): R",
                  "fun <T, R> Iterable<T>.fold(    initial: R,     operation: (acc: R, T) -> R): R"
                ]
              },
              {
                "name": "foldIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element with its index in the original array.",
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element with its index in the original collection."
                ],
                "code": [
                  "fun <R> UByteArray.foldIndexed(    initial: R,     operation: (index: Int, acc: R, UByte) -> R): R",
                  "fun <T, R> Iterable<T>.foldIndexed(    initial: R,     operation: (index: Int, acc: R, T) -> R): R"
                ]
              },
              {
                "name": "foldRight",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun <R> UByteArray.foldRight(    initial: R,     operation: (UByte, acc: R) -> R): R"
                ]
              },
              {
                "name": "foldRightIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun <R> UByteArray.foldRightIndexed(    initial: R,     operation: (index: Int, UByte, acc: R) -> R): R"
                ]
              },
              {
                "name": "forEach",
                "description": ["Performs the given action on each element."],
                "code": [
                  "fun UByteArray.forEach(action: (UByte) -> Unit)",
                  "fun <T> Iterable<T>.forEach(action: (T) -> Unit)"
                ]
              },
              {
                "name": "forEachIndexed",
                "description": [
                  "Performs the given action on each element, providing sequential index with the element."
                ],
                "code": [
                  "fun UByteArray.forEachIndexed(    action: (index: Int, UByte) -> Unit)",
                  "fun <T> Iterable<T>.forEachIndexed(    action: (index: Int, T) -> Unit)"
                ]
              },
              {
                "name": "getOrElse",
                "description": [
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
                ],
                "code": [
                  "fun UByteArray.getOrElse(    index: Int,     defaultValue: (Int) -> UByte): UByte"
                ]
              },
              {
                "name": "getOrNull",
                "description": [
                  "Returns an element at the given index or null if the index is out of bounds of this array."
                ],
                "code": ["fun UByteArray.getOrNull(index: Int): UByte?"]
              },
              {
                "name": "groupBy",
                "description": [
                  "Groups elements of the original array by the key returned by the given keySelector function\napplied to each element and returns a map where each group key is associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original array\nby the key returned by the given keySelector function applied to the element\nand returns a map where each group key is associated with a list of corresponding values.",
                  "Groups elements of the original collection by the key returned by the given keySelector function\napplied to each element and returns a map where each group key is associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original collection\nby the key returned by the given keySelector function applied to the element\nand returns a map where each group key is associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K> UByteArray.groupBy(    keySelector: (UByte) -> K): Map<K, List<UByte>>",
                  "fun <K, V> UByteArray.groupBy(    keySelector: (UByte) -> K,     valueTransform: (UByte) -> V): Map<K, List<V>>",
                  "fun <T, K> Iterable<T>.groupBy(    keySelector: (T) -> K): Map<K, List<T>>",
                  "fun <T, K, V> Iterable<T>.groupBy(    keySelector: (T) -> K,     valueTransform: (T) -> V): Map<K, List<V>>"
                ]
              },
              {
                "name": "groupByTo",
                "description": [
                  "Groups elements of the original array by the key returned by the given keySelector function\napplied to each element and puts to the destination map each group key associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original array\nby the key returned by the given keySelector function applied to the element\nand puts to the destination map each group key associated with a list of corresponding values.",
                  "Groups elements of the original collection by the key returned by the given keySelector function\napplied to each element and puts to the destination map each group key associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original collection\nby the key returned by the given keySelector function applied to the element\nand puts to the destination map each group key associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K, M : MutableMap<in K, MutableList<UByte>>> UByteArray.groupByTo(    destination: M,     keySelector: (UByte) -> K): M",
                  "fun <K, V, M : MutableMap<in K, MutableList<V>>> UByteArray.groupByTo(    destination: M,     keySelector: (UByte) -> K,     valueTransform: (UByte) -> V): M",
                  "fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(    destination: M,     keySelector: (T) -> K): M",
                  "fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(    destination: M,     keySelector: (T) -> K,     valueTransform: (T) -> V): M"
                ]
              },
              {
                "name": "groupingBy",
                "description": [
                  "Creates a Grouping source from a collection to be used later with one of group-and-fold operations\nusing the specified keySelector function to extract a key from each element."
                ],
                "code": [
                  "fun <T, K> Iterable<T>.groupingBy(    keySelector: (T) -> K): Grouping<T, K>"
                ]
              },
              {
                "name": "ifEmpty",
                "description": [
                  "Returns this array if it's not empty\nor the result of calling defaultValue function if the array is empty."
                ],
                "code": [
                  "fun <C, R> C.ifEmpty(    defaultValue: () -> R): R where C : Array<*>, C : R"
                ]
              },
              {
                "name": "indexOf",
                "description": [
                  "Returns first index of element, or -1 if the array does not contain element.",
                  "Returns first index of element, or -1 if the collection does not contain element."
                ],
                "code": [
                  "fun UByteArray.indexOf(element: UByte): Int",
                  "fun <T> Iterable<T>.indexOf(element: T): Int"
                ]
              },
              {
                "name": "indexOfFirst",
                "description": [
                  "Returns index of the first element matching the given predicate, or -1 if the array does not contain such element.",
                  "Returns index of the first element matching the given predicate, or -1 if the collection does not contain such element."
                ],
                "code": [
                  "fun UByteArray.indexOfFirst(    predicate: (UByte) -> Boolean): Int",
                  "fun <T> Iterable<T>.indexOfFirst(    predicate: (T) -> Boolean): Int"
                ]
              },
              {
                "name": "indexOfLast",
                "description": [
                  "Returns index of the last element matching the given predicate, or -1 if the array does not contain such element.",
                  "Returns index of the last element matching the given predicate, or -1 if the collection does not contain such element."
                ],
                "code": [
                  "fun UByteArray.indexOfLast(    predicate: (UByte) -> Boolean): Int",
                  "fun <T> Iterable<T>.indexOfLast(    predicate: (T) -> Boolean): Int"
                ]
              },
              {
                "name": "intersect",
                "description": [
                  "Returns a set containing all elements that are contained by both this collection and the specified collection."
                ],
                "code": [
                  "infix fun <T> Iterable<T>.intersect(    other: Iterable<T>): Set<T>"
                ]
              },
              {
                "name": "isNotEmpty",
                "description": ["Returns true if the collection is not empty."],
                "code": ["fun <T> Collection<T>.isNotEmpty(): Boolean"]
              },
              {
                "name": "isNullOrEmpty",
                "description": [
                  "Returns true if this nullable collection is either null or empty."
                ],
                "code": ["fun <T> Collection<T>?.isNullOrEmpty(): Boolean"]
              },
              {
                "name": "joinTo",
                "description": [
                  "Appends the string from all the elements separated using separator and using the given prefix and postfix if supplied."
                ],
                "code": [
                  "fun <T, A : Appendable> Iterable<T>.joinTo(    buffer: A,     separator: CharSequence = \", \",     prefix: CharSequence = \"\",     postfix: CharSequence = \"\",     limit: Int = -1,     truncated: CharSequence = \"...\",     transform: ((T) -> CharSequence)? = null): A"
                ]
              },
              {
                "name": "joinToString",
                "description": [
                  "Creates a string from all the elements separated using separator and using the given prefix and postfix if supplied."
                ],
                "code": [
                  "fun <T> Iterable<T>.joinToString(    separator: CharSequence = \", \",     prefix: CharSequence = \"\",     postfix: CharSequence = \"\",     limit: Int = -1,     truncated: CharSequence = \"...\",     transform: ((T) -> CharSequence)? = null): String"
                ]
              },
              {
                "name": "last",
                "description": [
                  "Returns the last element.",
                  "Returns the last element matching the given predicate."
                ],
                "code": [
                  "fun UByteArray.last(): UByte",
                  "fun UByteArray.last(predicate: (UByte) -> Boolean): UByte",
                  "fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T"
                ]
              },
              {
                "name": "lastIndexOf",
                "description": [
                  "Returns last index of element, or -1 if the array does not contain element.",
                  "Returns last index of element, or -1 if the collection does not contain element."
                ],
                "code": [
                  "fun UByteArray.lastIndexOf(element: UByte): Int",
                  "fun <T> Iterable<T>.lastIndexOf(element: T): Int"
                ]
              },
              {
                "name": "lastOrNull",
                "description": [
                  "Returns the last element, or null if the array is empty.",
                  "Returns the last element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun UByteArray.lastOrNull(): UByte?",
                  "fun UByteArray.lastOrNull(    predicate: (UByte) -> Boolean): UByte?",
                  "fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T?"
                ]
              },
              {
                "name": "map",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each element in the original array.",
                  "Returns a list containing the results of applying the given transform function\nto each element in the original collection."
                ],
                "code": [
                  "fun <R> UByteArray.map(transform: (UByte) -> R): List<R>",
                  "fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexed",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each element and its index in the original array.",
                  "Returns a list containing the results of applying the given transform function\nto each element and its index in the original collection."
                ],
                "code": [
                  "fun <R> UByteArray.mapIndexed(    transform: (index: Int, UByte) -> R): List<R>",
                  "fun <T, R> Iterable<T>.mapIndexed(    transform: (index: Int, T) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexedNotNull",
                "description": [
                  "Returns a list containing only the non-null results of applying the given transform function\nto each element and its index in the original collection."
                ],
                "code": [
                  "fun <T, R : Any> Iterable<T>.mapIndexedNotNull(    transform: (index: Int, T) -> R?): List<R>"
                ]
              },
              {
                "name": "mapIndexedNotNullTo",
                "description": [
                  "Applies the given transform function to each element and its index in the original collection\nand appends only the non-null results to the given destination."
                ],
                "code": [
                  "fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(    destination: C,     transform: (index: Int, T) -> R?): C"
                ]
              },
              {
                "name": "mapIndexedTo",
                "description": [
                  "Applies the given transform function to each element and its index in the original array\nand appends the results to the given destination.",
                  "Applies the given transform function to each element and its index in the original collection\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> UByteArray.mapIndexedTo(    destination: C,     transform: (index: Int, UByte) -> R): C",
                  "fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(    destination: C,     transform: (index: Int, T) -> R): C"
                ]
              },
              {
                "name": "mapNotNull",
                "description": [
                  "Returns a list containing only the non-null results of applying the given transform function\nto each element in the original collection."
                ],
                "code": [
                  "fun <T, R : Any> Iterable<T>.mapNotNull(    transform: (T) -> R?): List<R>"
                ]
              },
              {
                "name": "mapNotNullTo",
                "description": [
                  "Applies the given transform function to each element in the original collection\nand appends only the non-null results to the given destination."
                ],
                "code": [
                  "fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(    destination: C,     transform: (T) -> R?): C"
                ]
              },
              {
                "name": "mapTo",
                "description": [
                  "Applies the given transform function to each element of the original array\nand appends the results to the given destination.",
                  "Applies the given transform function to each element of the original collection\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> UByteArray.mapTo(    destination: C,     transform: (UByte) -> R): C",
                  "fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(    destination: C,     transform: (T) -> R): C"
                ]
              },
              {
                "name": "maxByOrNull",
                "description": [
                  "Returns the first element yielding the largest value of the given function or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> UByteArray.maxByOrNull(    selector: (UByte) -> R): UByte?",
                  "fun <T, R : Comparable<R>> Iterable<T>.maxByOrNull(    selector: (T) -> R): T?"
                ]
              },
              {
                "name": "maxOf",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each element in the array.",
                  "Returns the largest value among all values produced by selector function\napplied to each element in the collection."
                ],
                "code": [
                  "fun UByteArray.maxOf(selector: (UByte) -> Double): Double",
                  "fun UByteArray.maxOf(selector: (UByte) -> Float): Float",
                  "fun <R : Comparable<R>> UByteArray.maxOf(    selector: (UByte) -> R): R",
                  "fun <T> Iterable<T>.maxOf(selector: (T) -> Double): Double",
                  "fun <T> Iterable<T>.maxOf(selector: (T) -> Float): Float",
                  "fun <T, R : Comparable<R>> Iterable<T>.maxOf(    selector: (T) -> R): R"
                ]
              },
              {
                "name": "maxOfOrNull",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each element in the array or null if there are no elements.",
                  "Returns the largest value among all values produced by selector function\napplied to each element in the collection or null if there are no elements."
                ],
                "code": [
                  "fun UByteArray.maxOfOrNull(    selector: (UByte) -> Double): Double?",
                  "fun UByteArray.maxOfOrNull(    selector: (UByte) -> Float): Float?",
                  "fun <R : Comparable<R>> UByteArray.maxOfOrNull(    selector: (UByte) -> R): R?",
                  "fun <T> Iterable<T>.maxOfOrNull(    selector: (T) -> Double): Double?",
                  "fun <T> Iterable<T>.maxOfOrNull(    selector: (T) -> Float): Float?",
                  "fun <T, R : Comparable<R>> Iterable<T>.maxOfOrNull(    selector: (T) -> R): R?"
                ]
              },
              {
                "name": "maxOfWith",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the array.",
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the collection."
                ],
                "code": [
                  "fun <R> UByteArray.maxOfWith(    comparator: Comparator<in R>,     selector: (UByte) -> R): R",
                  "fun <T, R> Iterable<T>.maxOfWith(    comparator: Comparator<in R>,     selector: (T) -> R): R"
                ]
              },
              {
                "name": "maxOfWithOrNull",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the array or null if there are no elements.",
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the collection or null if there are no elements."
                ],
                "code": [
                  "fun <R> UByteArray.maxOfWithOrNull(    comparator: Comparator<in R>,     selector: (UByte) -> R): R?",
                  "fun <T, R> Iterable<T>.maxOfWithOrNull(    comparator: Comparator<in R>,     selector: (T) -> R): R?"
                ]
              },
              {
                "name": "maxOrNull",
                "description": [
                  "Returns the largest element or null if there are no elements."
                ],
                "code": ["fun UByteArray.maxOrNull(): UByte?"]
              },
              {
                "name": "maxWith",
                "description": [
                  "Returns the first element having the largest value according to the provided comparator."
                ],
                "code": [
                  "fun UByteArray.maxWith(    comparator: Comparator<in UByte>): UByte",
                  "fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T",
                  "fun UByteArray.maxWith(    comparator: Comparator<in UByte>): UByte?"
                ]
              },
              {
                "name": "maxWithOrNull",
                "description": [
                  "Returns the first element having the largest value according to the provided comparator or null if there are no elements."
                ],
                "code": [
                  "fun UByteArray.maxWithOrNull(    comparator: Comparator<in UByte>): UByte?",
                  "fun <T> Iterable<T>.maxWithOrNull(    comparator: Comparator<in T>): T?"
                ]
              },
              {
                "name": "minByOrNull",
                "description": [
                  "Returns the first element yielding the smallest value of the given function or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> UByteArray.minByOrNull(    selector: (UByte) -> R): UByte?",
                  "fun <T, R : Comparable<R>> Iterable<T>.minByOrNull(    selector: (T) -> R): T?"
                ]
              },
              {
                "name": "minOf",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the array.",
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the collection."
                ],
                "code": [
                  "fun UByteArray.minOf(selector: (UByte) -> Double): Double",
                  "fun UByteArray.minOf(selector: (UByte) -> Float): Float",
                  "fun <R : Comparable<R>> UByteArray.minOf(    selector: (UByte) -> R): R",
                  "fun <T> Iterable<T>.minOf(selector: (T) -> Double): Double",
                  "fun <T> Iterable<T>.minOf(selector: (T) -> Float): Float",
                  "fun <T, R : Comparable<R>> Iterable<T>.minOf(    selector: (T) -> R): R"
                ]
              },
              {
                "name": "minOfOrNull",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the array or null if there are no elements.",
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the collection or null if there are no elements."
                ],
                "code": [
                  "fun UByteArray.minOfOrNull(    selector: (UByte) -> Double): Double?",
                  "fun UByteArray.minOfOrNull(    selector: (UByte) -> Float): Float?",
                  "fun <R : Comparable<R>> UByteArray.minOfOrNull(    selector: (UByte) -> R): R?",
                  "fun <T> Iterable<T>.minOfOrNull(    selector: (T) -> Double): Double?",
                  "fun <T> Iterable<T>.minOfOrNull(    selector: (T) -> Float): Float?",
                  "fun <T, R : Comparable<R>> Iterable<T>.minOfOrNull(    selector: (T) -> R): R?"
                ]
              },
              {
                "name": "minOfWith",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the array.",
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the collection."
                ],
                "code": [
                  "fun <R> UByteArray.minOfWith(    comparator: Comparator<in R>,     selector: (UByte) -> R): R",
                  "fun <T, R> Iterable<T>.minOfWith(    comparator: Comparator<in R>,     selector: (T) -> R): R"
                ]
              },
              {
                "name": "minOfWithOrNull",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the array or null if there are no elements.",
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the collection or null if there are no elements."
                ],
                "code": [
                  "fun <R> UByteArray.minOfWithOrNull(    comparator: Comparator<in R>,     selector: (UByte) -> R): R?",
                  "fun <T, R> Iterable<T>.minOfWithOrNull(    comparator: Comparator<in R>,     selector: (T) -> R): R?"
                ]
              },
              {
                "name": "minOrNull",
                "description": [
                  "Returns the smallest element or null if there are no elements."
                ],
                "code": ["fun UByteArray.minOrNull(): UByte?"]
              },
              {
                "name": "minus",
                "description": [
                  "Returns a list containing all elements of the original collection without the first occurrence of the given element.",
                  "Returns a list containing all elements of the original collection except the elements contained in the given elements array.",
                  "Returns a list containing all elements of the original collection except the elements contained in the given elements collection.",
                  "Returns a list containing all elements of the original collection except the elements contained in the given elements sequence."
                ],
                "code": [
                  "operator fun <T> Iterable<T>.minus(element: T): List<T>",
                  "operator fun <T> Iterable<T>.minus(    elements: Array<out T>): List<T>",
                  "operator fun <T> Iterable<T>.minus(    elements: Iterable<T>): List<T>",
                  "operator fun <T> Iterable<T>.minus(    elements: Sequence<T>): List<T>"
                ]
              },
              {
                "name": "minusElement",
                "description": [
                  "Returns a list containing all elements of the original collection without the first occurrence of the given element."
                ],
                "code": [
                  "fun <T> Iterable<T>.minusElement(element: T): List<T>"
                ]
              },
              {
                "name": "minWith",
                "description": [
                  "Returns the first element having the smallest value according to the provided comparator."
                ],
                "code": [
                  "fun UByteArray.minWith(    comparator: Comparator<in UByte>): UByte",
                  "fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T",
                  "fun UByteArray.minWith(    comparator: Comparator<in UByte>): UByte?"
                ]
              },
              {
                "name": "minWithOrNull",
                "description": [
                  "Returns the first element having the smallest value according to the provided comparator or null if there are no elements."
                ],
                "code": [
                  "fun UByteArray.minWithOrNull(    comparator: Comparator<in UByte>): UByte?",
                  "fun <T> Iterable<T>.minWithOrNull(    comparator: Comparator<in T>): T?"
                ]
              },
              {
                "name": "none",
                "description": [
                  "Returns true if the array has no elements.",
                  "Returns true if no elements match the given predicate."
                ],
                "code": [
                  "fun UByteArray.none(): Boolean",
                  "fun UByteArray.none(predicate: (UByte) -> Boolean): Boolean",
                  "fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean"
                ]
              },
              {
                "name": "onEach",
                "description": [
                  "Performs the given action on each element and returns the array itself afterwards.",
                  "Performs the given action on each element and returns the collection itself afterwards."
                ],
                "code": [
                  "fun UByteArray.onEach(action: (UByte) -> Unit): UByteArray",
                  "fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C"
                ]
              },
              {
                "name": "onEachIndexed",
                "description": [
                  "Performs the given action on each element, providing sequential index with the element,\nand returns the array itself afterwards.",
                  "Performs the given action on each element, providing sequential index with the element,\nand returns the collection itself afterwards."
                ],
                "code": [
                  "fun UByteArray.onEachIndexed(    action: (index: Int, UByte) -> Unit): UByteArray",
                  "fun <T, C : Iterable<T>> C.onEachIndexed(    action: (index: Int, T) -> Unit): C"
                ]
              },
              {
                "name": "orEmpty",
                "description": [
                  "Returns this Collection if it's not null and the empty list otherwise."
                ],
                "code": ["fun <T> Collection<T>?.orEmpty(): Collection<T>"]
              },
              {
                "name": "partition",
                "description": [
                  "Splits the original collection into pair of lists,\nwhere first list contains elements for which predicate yielded true,\nwhile second list contains elements for which predicate yielded false."
                ],
                "code": [
                  "fun <T> Iterable<T>.partition(    predicate: (T) -> Boolean): Pair<List<T>, List<T>>"
                ]
              },
              {
                "name": "plus",
                "description": [
                  "Returns an array containing all elements of the original array and then the given element.",
                  "Returns an array containing all elements of the original array and then all elements of the given elements collection.",
                  "Returns an array containing all elements of the original array and then all elements of the given elements array.",
                  "Returns a list containing all elements of the original collection and then the given element.",
                  "Returns a list containing all elements of the original collection and then all elements of the given elements array.",
                  "Returns a list containing all elements of the original collection and then all elements of the given elements collection.",
                  "Returns a list containing all elements of the original collection and then all elements of the given elements sequence."
                ],
                "code": [
                  "operator fun UByteArray.plus(element: UByte): UByteArray",
                  "operator fun UByteArray.plus(    elements: Collection<UByte>): UByteArray",
                  "operator fun UByteArray.plus(    elements: UByteArray): UByteArray",
                  "operator fun <T> Iterable<T>.plus(element: T): List<T>",
                  "operator fun <T> Collection<T>.plus(element: T): List<T>",
                  "operator fun <T> Iterable<T>.plus(    elements: Array<out T>): List<T>",
                  "operator fun <T> Collection<T>.plus(    elements: Array<out T>): List<T>",
                  "operator fun <T> Iterable<T>.plus(    elements: Iterable<T>): List<T>",
                  "operator fun <T> Collection<T>.plus(    elements: Iterable<T>): List<T>",
                  "operator fun <T> Iterable<T>.plus(    elements: Sequence<T>): List<T>",
                  "operator fun <T> Collection<T>.plus(    elements: Sequence<T>): List<T>"
                ]
              },
              {
                "name": "plusElement",
                "description": [
                  "Returns a list containing all elements of the original collection and then the given element."
                ],
                "code": [
                  "fun <T> Iterable<T>.plusElement(element: T): List<T>",
                  "fun <T> Collection<T>.plusElement(element: T): List<T>"
                ]
              },
              {
                "name": "random",
                "description": [
                  "Returns a random element from this array.",
                  "Returns a random element from this array using the specified source of randomness."
                ],
                "code": [
                  "fun UByteArray.random(): UByte",
                  "fun UByteArray.random(random: Random): UByte"
                ]
              },
              {
                "name": "randomOrNull",
                "description": [
                  "Returns a random element from this array, or null if this array is empty.",
                  "Returns a random element from this array using the specified source of randomness, or null if this array is empty."
                ],
                "code": [
                  "fun UByteArray.randomOrNull(): UByte?",
                  "fun UByteArray.randomOrNull(random: Random): UByte?"
                ]
              },
              {
                "name": "reduce",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun UByteArray.reduce(    operation: (acc: UByte, UByte) -> UByte): UByte",
                  "fun <S, T : S> Iterable<T>.reduce(    operation: (acc: S, T) -> S): S"
                ]
              },
              {
                "name": "reduceIndexed",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original array.",
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original collection."
                ],
                "code": [
                  "fun UByteArray.reduceIndexed(    operation: (index: Int, acc: UByte, UByte) -> UByte): UByte",
                  "fun <S, T : S> Iterable<T>.reduceIndexed(    operation: (index: Int, acc: S, T) -> S): S"
                ]
              },
              {
                "name": "reduceIndexedOrNull",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original array.",
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original collection."
                ],
                "code": [
                  "fun UByteArray.reduceIndexedOrNull(    operation: (index: Int, acc: UByte, UByte) -> UByte): UByte?",
                  "fun <S, T : S> Iterable<T>.reduceIndexedOrNull(    operation: (index: Int, acc: S, T) -> S): S?"
                ]
              },
              {
                "name": "reduceOrNull",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun UByteArray.reduceOrNull(    operation: (acc: UByte, UByte) -> UByte): UByte?",
                  "fun <S, T : S> Iterable<T>.reduceOrNull(    operation: (acc: S, T) -> S): S?"
                ]
              },
              {
                "name": "reduceRight",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun UByteArray.reduceRight(    operation: (UByte, acc: UByte) -> UByte): UByte"
                ]
              },
              {
                "name": "reduceRightIndexed",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun UByteArray.reduceRightIndexed(    operation: (index: Int, UByte, acc: UByte) -> UByte): UByte"
                ]
              },
              {
                "name": "reduceRightIndexedOrNull",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun UByteArray.reduceRightIndexedOrNull(    operation: (index: Int, UByte, acc: UByte) -> UByte): UByte?"
                ]
              },
              {
                "name": "reduceRightOrNull",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun UByteArray.reduceRightOrNull(    operation: (UByte, acc: UByte) -> UByte): UByte?"
                ]
              },
              {
                "name": "refTo",
                "description": [],
                "code": [
                  "fun UByteArray.refTo(index: Int): CValuesRef<UByteVar>"
                ]
              },
              {
                "name": "requireNoNulls",
                "description": [
                  "Returns an original collection containing all the non-null elements, throwing an IllegalArgumentException if there are any null elements."
                ],
                "code": [
                  "fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T>"
                ]
              },
              {
                "name": "reverse",
                "description": [
                  "Reverses elements in the array in-place.",
                  "Reverses elements of the array in the specified range in-place."
                ],
                "code": [
                  "fun UByteArray.reverse()",
                  "fun UByteArray.reverse(fromIndex: Int, toIndex: Int)"
                ]
              },
              {
                "name": "reversed",
                "description": [
                  "Returns a list with elements in reversed order."
                ],
                "code": ["fun UByteArray.reversed(): List<UByte>"]
              },
              {
                "name": "reversedArray",
                "description": [
                  "Returns an array with elements of this array in reversed order."
                ],
                "code": ["fun UByteArray.reversedArray(): UByteArray"]
              },
              {
                "name": "runningFold",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> UByteArray.runningFold(    initial: R,     operation: (acc: R, UByte) -> R): List<R>",
                  "fun <T, R> Iterable<T>.runningFold(    initial: R,     operation: (acc: R, T) -> R): List<R>"
                ]
              },
              {
                "name": "runningFoldIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with initial value.",
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original collection and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> UByteArray.runningFoldIndexed(    initial: R,     operation: (index: Int, acc: R, UByte) -> R): List<R>",
                  "fun <T, R> Iterable<T>.runningFoldIndexed(    initial: R,     operation: (index: Int, acc: R, T) -> R): List<R>"
                ]
              },
              {
                "name": "runningReduce",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with the first element of this array.",
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with the first element of this collection."
                ],
                "code": [
                  "fun UByteArray.runningReduce(    operation: (acc: UByte, UByte) -> UByte): List<UByte>",
                  "fun <S, T : S> Iterable<T>.runningReduce(    operation: (acc: S, T) -> S): List<S>"
                ]
              },
              {
                "name": "runningReduceIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with the first element of this array.",
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original collection and current accumulator value that starts with the first element of this collection."
                ],
                "code": [
                  "fun UByteArray.runningReduceIndexed(    operation: (index: Int, acc: UByte, UByte) -> UByte): List<UByte>",
                  "fun <S, T : S> Iterable<T>.runningReduceIndexed(    operation: (index: Int, acc: S, T) -> S): List<S>"
                ]
              },
              {
                "name": "scan",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> UByteArray.scan(    initial: R,     operation: (acc: R, UByte) -> R): List<R>",
                  "fun <T, R> Iterable<T>.scan(    initial: R,     operation: (acc: R, T) -> R): List<R>"
                ]
              },
              {
                "name": "scanIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with initial value.",
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original collection and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> UByteArray.scanIndexed(    initial: R,     operation: (index: Int, acc: R, UByte) -> R): List<R>",
                  "fun <T, R> Iterable<T>.scanIndexed(    initial: R,     operation: (index: Int, acc: R, T) -> R): List<R>"
                ]
              },
              {
                "name": "shuffle",
                "description": [
                  "Randomly shuffles elements in this array in-place.",
                  "Randomly shuffles elements in this array in-place using the specified random instance as the source of randomness."
                ],
                "code": [
                  "fun UByteArray.shuffle()",
                  "fun UByteArray.shuffle(random: Random)"
                ]
              },
              {
                "name": "shuffled",
                "description": [
                  "Returns a new list with the elements of this list randomly shuffled\nusing the specified random instance as the source of randomness."
                ],
                "code": [
                  "fun <T> Iterable<T>.shuffled(random: Random): List<T>"
                ]
              },
              {
                "name": "single",
                "description": [
                  "Returns the single element, or throws an exception if the array is empty or has more than one element.",
                  "Returns the single element matching the given predicate, or throws exception if there is no or more than one matching element."
                ],
                "code": [
                  "fun UByteArray.single(): UByte",
                  "fun UByteArray.single(predicate: (UByte) -> Boolean): UByte",
                  "fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T"
                ]
              },
              {
                "name": "singleOrNull",
                "description": [
                  "Returns single element, or null if the array is empty or has more than one element.",
                  "Returns the single element matching the given predicate, or null if element was not found or more than one element was found."
                ],
                "code": [
                  "fun UByteArray.singleOrNull(): UByte?",
                  "fun UByteArray.singleOrNull(    predicate: (UByte) -> Boolean): UByte?",
                  "fun <T> Iterable<T>.singleOrNull(    predicate: (T) -> Boolean): T?"
                ]
              },
              {
                "name": "slice",
                "description": [
                  "Returns a list containing elements at indices in the specified indices range.",
                  "Returns a list containing elements at specified indices."
                ],
                "code": [
                  "fun UByteArray.slice(indices: IntRange): List<UByte>",
                  "fun UByteArray.slice(indices: Iterable<Int>): List<UByte>"
                ]
              },
              {
                "name": "sliceArray",
                "description": [
                  "Returns an array containing elements of this array at specified indices.",
                  "Returns an array containing elements at indices in the specified indices range."
                ],
                "code": [
                  "fun UByteArray.sliceArray(    indices: Collection<Int>): UByteArray",
                  "fun UByteArray.sliceArray(indices: IntRange): UByteArray"
                ]
              },
              {
                "name": "sort",
                "description": [
                  "Sorts the array in-place.",
                  "Sorts a range in the array in-place."
                ],
                "code": [
                  "fun UByteArray.sort()",
                  "fun UByteArray.sort(fromIndex: Int = 0, toIndex: Int = size)"
                ]
              },
              {
                "name": "sortDescending",
                "description": [
                  "Sorts elements in the array in-place descending according to their natural sort order.",
                  "Sorts elements of the array in the specified range in-place.\nThe elements are sorted descending according to their natural sort order."
                ],
                "code": [
                  "fun UByteArray.sortDescending()",
                  "fun UByteArray.sortDescending(fromIndex: Int, toIndex: Int)"
                ]
              },
              {
                "name": "sorted",
                "description": [
                  "Returns a list of all elements sorted according to their natural sort order."
                ],
                "code": ["fun UByteArray.sorted(): List<UByte>"]
              },
              {
                "name": "sortedArray",
                "description": [
                  "Returns an array with all elements of this array sorted according to their natural sort order."
                ],
                "code": ["fun UByteArray.sortedArray(): UByteArray"]
              },
              {
                "name": "sortedArrayDescending",
                "description": [
                  "Returns an array with all elements of this array sorted descending according to their natural sort order."
                ],
                "code": ["fun UByteArray.sortedArrayDescending(): UByteArray"]
              },
              {
                "name": "sortedBy",
                "description": [
                  "Returns a list of all elements sorted according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <T, R : Comparable<R>> Iterable<T>.sortedBy(    selector: (T) -> R?): List<T>"
                ]
              },
              {
                "name": "sortedByDescending",
                "description": [
                  "Returns a list of all elements sorted descending according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(    selector: (T) -> R?): List<T>"
                ]
              },
              {
                "name": "sortedDescending",
                "description": [
                  "Returns a list of all elements sorted descending according to their natural sort order."
                ],
                "code": ["fun UByteArray.sortedDescending(): List<UByte>"]
              },
              {
                "name": "sortedWith",
                "description": [
                  "Returns a list of all elements sorted according to the specified comparator."
                ],
                "code": [
                  "fun <T> Iterable<T>.sortedWith(    comparator: Comparator<in T>): List<T>"
                ]
              },
              {
                "name": "subtract",
                "description": [
                  "Returns a set containing all elements that are contained by this collection and not contained by the specified collection."
                ],
                "code": [
                  "infix fun <T> Iterable<T>.subtract(    other: Iterable<T>): Set<T>"
                ]
              },
              {
                "name": "sum",
                "description": [
                  "Returns the sum of all elements in the array."
                ],
                "code": ["fun UByteArray.sum(): UInt"]
              },
              {
                "name": "sumBy",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array.",
                  "Returns the sum of all values produced by selector function applied to each element in the collection."
                ],
                "code": [
                  "fun UByteArray.sumBy(selector: (UByte) -> UInt): UInt",
                  "fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int"
                ]
              },
              {
                "name": "sumByDouble",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array.",
                  "Returns the sum of all values produced by selector function applied to each element in the collection."
                ],
                "code": [
                  "fun UByteArray.sumByDouble(    selector: (UByte) -> Double): Double",
                  "fun <T> Iterable<T>.sumByDouble(    selector: (T) -> Double): Double"
                ]
              },
              {
                "name": "sumOf",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array.",
                  "Returns the sum of all values produced by selector function applied to each element in the collection."
                ],
                "code": [
                  "fun UByteArray.sumOf(selector: (UByte) -> Double): Double",
                  "fun UByteArray.sumOf(selector: (UByte) -> Int): Int",
                  "fun UByteArray.sumOf(selector: (UByte) -> Long): Long",
                  "fun UByteArray.sumOf(selector: (UByte) -> UInt): UInt",
                  "fun UByteArray.sumOf(selector: (UByte) -> ULong): ULong",
                  "fun UByteArray.sumOf(    selector: (UByte) -> BigDecimal): BigDecimal",
                  "fun UByteArray.sumOf(    selector: (UByte) -> BigInteger): BigInteger",
                  "fun <T> Iterable<T>.sumOf(selector: (T) -> Double): Double",
                  "fun <T> Iterable<T>.sumOf(selector: (T) -> Int): Int",
                  "fun <T> Iterable<T>.sumOf(selector: (T) -> Long): Long",
                  "fun <T> Iterable<T>.sumOf(selector: (T) -> UInt): UInt",
                  "fun <T> Iterable<T>.sumOf(selector: (T) -> ULong): ULong"
                ]
              },
              {
                "name": "take",
                "description": ["Returns a list containing first n elements."],
                "code": ["fun UByteArray.take(n: Int): List<UByte>"]
              },
              {
                "name": "takeLast",
                "description": ["Returns a list containing last n elements."],
                "code": ["fun UByteArray.takeLast(n: Int): List<UByte>"]
              },
              {
                "name": "takeLastWhile",
                "description": [
                  "Returns a list containing last elements satisfying the given predicate."
                ],
                "code": [
                  "fun UByteArray.takeLastWhile(    predicate: (UByte) -> Boolean): List<UByte>"
                ]
              },
              {
                "name": "takeWhile",
                "description": [
                  "Returns a list containing first elements satisfying the given predicate."
                ],
                "code": [
                  "fun UByteArray.takeWhile(    predicate: (UByte) -> Boolean): List<UByte>",
                  "fun <T> Iterable<T>.takeWhile(    predicate: (T) -> Boolean): List<T>"
                ]
              },
              {
                "name": "toByteArray",
                "description": [
                  "Returns an array of type ByteArray, which is a copy of this array where each element is a signed reinterpretation\nof the corresponding element of this array."
                ],
                "code": ["fun UByteArray.toByteArray(): ByteArray"]
              },
              {
                "name": "toCollection",
                "description": [
                  "Appends all elements to the given destination collection."
                ],
                "code": [
                  "fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(    destination: C): C"
                ]
              },
              {
                "name": "toCValues",
                "description": [],
                "code": ["fun UByteArray.toCValues(): CValues<UByteVar>"]
              },
              {
                "name": "toHashSet",
                "description": ["Returns a new HashSet of all elements."],
                "code": ["fun <T> Iterable<T>.toHashSet(): HashSet<T>"]
              },
              {
                "name": "toHexString",
                "description": [
                  "Formats bytes in this array using the specified format.",
                  "Formats bytes in this array using the specified HexFormat."
                ],
                "code": [
                  "fun UByteArray.toHexString(    format: HexFormat = HexFormat.Default): String",
                  "fun UByteArray.toHexString(    startIndex: Int = 0,     endIndex: Int = size,     format: HexFormat = HexFormat.Default): String"
                ]
              },
              {
                "name": "toList",
                "description": ["Returns a List containing all elements."],
                "code": ["fun <T> Iterable<T>.toList(): List<T>"]
              },
              {
                "name": "toMutableSet",
                "description": [
                  "Returns a new MutableSet containing all distinct elements from the given collection."
                ],
                "code": ["fun <T> Iterable<T>.toMutableSet(): MutableSet<T>"]
              },
              {
                "name": "toSet",
                "description": ["Returns a Set of all elements."],
                "code": ["fun <T> Iterable<T>.toSet(): Set<T>"]
              },
              {
                "name": "toTypedArray",
                "description": [
                  "Returns a typed object array containing all of the elements of this primitive array."
                ],
                "code": ["fun UByteArray.toTypedArray(): Array<UByte>"]
              },
              {
                "name": "toUByteArray",
                "description": [
                  "Returns an array of UByte containing all of the elements of this collection."
                ],
                "code": ["fun Collection<UByte>.toUByteArray(): UByteArray"]
              },
              {
                "name": "union",
                "description": [
                  "Returns a set containing all distinct elements from both collections."
                ],
                "code": [
                  "infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T>"
                ]
              },
              {
                "name": "windowed",
                "description": [
                  "Returns a list of snapshots of the window of the given size\nsliding along this collection with the given step, where each\nsnapshot is a list.",
                  "Returns a list of results of applying the given transform function to\nan each list representing a view over the window of the given size\nsliding along this collection with the given step."
                ],
                "code": [
                  "fun <T> Iterable<T>.windowed(    size: Int,     step: Int = 1,     partialWindows: Boolean = false): List<List<T>>",
                  "fun <T, R> Iterable<T>.windowed(    size: Int,     step: Int = 1,     partialWindows: Boolean = false,     transform: (List<T>) -> R): List<R>"
                ]
              },
              {
                "name": "withIndex",
                "description": [
                  "Returns a lazy Iterable that wraps each element of the original array\ninto an IndexedValue containing the index of that element and the element itself."
                ],
                "code": [
                  "fun UByteArray.withIndex(): Iterable<IndexedValue<UByte>>"
                ]
              },
              {
                "name": "zip",
                "description": [
                  "Returns a list of pairs built from the elements of this array and the other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of pairs built from the elements of this collection and other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other collection with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest array.",
                  "Returns a list of pairs built from the elements of this collection and the other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this collection and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of pairs built from the elements of this collection and other collection with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this collection and the other collection with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection."
                ],
                "code": [
                  "infix fun <R> UByteArray.zip(    other: Array<out R>): List<Pair<UByte, R>>",
                  "infix fun UByteArray.zip(    other: UByteArray): List<Pair<UByte, UByte>>",
                  "fun <R, V> UByteArray.zip(    other: Array<out R>,     transform: (a: UByte, b: R) -> V): List<V>",
                  "infix fun <R> UByteArray.zip(    other: Iterable<R>): List<Pair<UByte, R>>",
                  "fun <R, V> UByteArray.zip(    other: Iterable<R>,     transform: (a: UByte, b: R) -> V): List<V>",
                  "fun <V> UByteArray.zip(    other: UByteArray,     transform: (a: UByte, b: UByte) -> V): List<V>",
                  "infix fun <T, R> Iterable<T>.zip(    other: Array<out R>): List<Pair<T, R>>",
                  "fun <T, R, V> Iterable<T>.zip(    other: Array<out R>,     transform: (a: T, b: R) -> V): List<V>",
                  "infix fun <T, R> Iterable<T>.zip(    other: Iterable<R>): List<Pair<T, R>>",
                  "fun <T, R, V> Iterable<T>.zip(    other: Iterable<R>,     transform: (a: T, b: R) -> V): List<V>"
                ]
              },
              {
                "name": "zipWithNext",
                "description": [
                  "Returns a list of pairs of each two adjacent elements in this collection.",
                  "Returns a list containing the results of applying the given transform function\nto an each pair of two adjacent elements in this collection."
                ],
                "code": [
                  "fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>>",
                  "fun <T, R> Iterable<T>.zipWithNext(    transform: (a: T, b: T) -> R): List<R>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "UInt",
        "description": [],
        "code": ["class UInt : Comparable<UInt>"],
        "url": "-u-int/index.html",
        "subcategories": [
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "and",
                "description": [
                  "Performs a bitwise AND operation between the two values."
                ],
                "code": ["infix fun and(other: UInt): UInt"]
              },
              {
                "name": "compareTo",
                "description": [
                  "Compares this value with the specified value for order.\nReturns zero if this value is equal to the specified other value, a negative number if it's less than other,\nor a positive number if it's greater than other."
                ],
                "code": [
                  "operator fun compareTo(other: UByte): Int",
                  "operator fun compareTo(other: UShort): Int",
                  "operator fun compareTo(other: UInt): Int",
                  "operator fun compareTo(other: ULong): Int"
                ]
              },
              {
                "name": "dec",
                "description": ["Returns this value decremented by one."],
                "code": ["operator fun dec(): UInt"]
              },
              {
                "name": "div",
                "description": [
                  "Divides this value by the other value, truncating the result to an integer that is closer to zero."
                ],
                "code": [
                  "operator fun div(other: UByte): UInt",
                  "operator fun div(other: UShort): UInt",
                  "operator fun div(other: UInt): UInt",
                  "operator fun div(other: ULong): ULong"
                ]
              },
              {
                "name": "floorDiv",
                "description": [
                  "Divides this value by the other value, flooring the result to an integer that is closer to negative infinity."
                ],
                "code": [
                  "fun floorDiv(other: UByte): UInt",
                  "fun floorDiv(other: UShort): UInt",
                  "fun floorDiv(other: UInt): UInt",
                  "fun floorDiv(other: ULong): ULong"
                ]
              },
              {
                "name": "inc",
                "description": ["Returns this value incremented by one."],
                "code": ["operator fun inc(): UInt"]
              },
              {
                "name": "inv",
                "description": ["Inverts the bits in this value."],
                "code": ["fun inv(): UInt"]
              },
              {
                "name": "minus",
                "description": ["Subtracts the other value from this value."],
                "code": [
                  "operator fun minus(other: UByte): UInt",
                  "operator fun minus(other: UShort): UInt",
                  "operator fun minus(other: UInt): UInt",
                  "operator fun minus(other: ULong): ULong"
                ]
              },
              {
                "name": "mod",
                "description": [
                  "Calculates the remainder of flooring division of this value (dividend) by the other value (divisor)."
                ],
                "code": [
                  "fun mod(other: UByte): UByte",
                  "fun mod(other: UShort): UShort",
                  "fun mod(other: UInt): UInt",
                  "fun mod(other: ULong): ULong"
                ]
              },
              {
                "name": "or",
                "description": [
                  "Performs a bitwise OR operation between the two values."
                ],
                "code": ["infix fun or(other: UInt): UInt"]
              },
              {
                "name": "plus",
                "description": ["Adds the other value to this value."],
                "code": [
                  "operator fun plus(other: UByte): UInt",
                  "operator fun plus(other: UShort): UInt",
                  "operator fun plus(other: UInt): UInt",
                  "operator fun plus(other: ULong): ULong"
                ]
              },
              {
                "name": "rangeTo",
                "description": [
                  "Creates a range from this value to the specified other value."
                ],
                "code": ["operator fun rangeTo(other: UInt): UIntRange"]
              },
              {
                "name": "rangeUntil",
                "description": [
                  "Creates a range from this value up to but excluding the specified other value."
                ],
                "code": ["operator fun rangeUntil(other: UInt): UIntRange"]
              },
              {
                "name": "rem",
                "description": [
                  "Calculates the remainder of truncating division of this value (dividend) by the other value (divisor)."
                ],
                "code": [
                  "operator fun rem(other: UByte): UInt",
                  "operator fun rem(other: UShort): UInt",
                  "operator fun rem(other: UInt): UInt",
                  "operator fun rem(other: ULong): ULong"
                ]
              },
              {
                "name": "shl",
                "description": [
                  "Shifts this value left by the bitCount number of bits."
                ],
                "code": ["infix fun shl(bitCount: Int): UInt"]
              },
              {
                "name": "shr",
                "description": [
                  "Shifts this value right by the bitCount number of bits, filling the leftmost bits with zeros."
                ],
                "code": ["infix fun shr(bitCount: Int): UInt"]
              },
              {
                "name": "times",
                "description": ["Multiplies this value by the other value."],
                "code": [
                  "operator fun times(other: UByte): UInt",
                  "operator fun times(other: UShort): UInt",
                  "operator fun times(other: UInt): UInt",
                  "operator fun times(other: ULong): ULong"
                ]
              },
              {
                "name": "toByte",
                "description": ["Converts this UInt value to Byte."],
                "code": ["fun toByte(): Byte"]
              },
              {
                "name": "toDouble",
                "description": ["Converts this UInt value to Double."],
                "code": ["fun toDouble(): Double"]
              },
              {
                "name": "toFloat",
                "description": ["Converts this UInt value to Float."],
                "code": ["fun toFloat(): Float"]
              },
              {
                "name": "toInt",
                "description": ["Converts this UInt value to Int."],
                "code": ["fun toInt(): Int"]
              },
              {
                "name": "toLong",
                "description": ["Converts this UInt value to Long."],
                "code": ["fun toLong(): Long"]
              },
              {
                "name": "toShort",
                "description": ["Converts this UInt value to Short."],
                "code": ["fun toShort(): Short"]
              },
              {
                "name": "toString",
                "description": [
                  "Returns a string representation of the object."
                ],
                "code": ["fun toString(): String"]
              },
              {
                "name": "toUByte",
                "description": ["Converts this UInt value to UByte."],
                "code": ["fun toUByte(): UByte"]
              },
              {
                "name": "toUInt",
                "description": ["Returns this value."],
                "code": ["fun toUInt(): UInt"]
              },
              {
                "name": "toULong",
                "description": ["Converts this UInt value to ULong."],
                "code": ["fun toULong(): ULong"]
              },
              {
                "name": "toUShort",
                "description": ["Converts this UInt value to UShort."],
                "code": ["fun toUShort(): UShort"]
              },
              {
                "name": "xor",
                "description": [
                  "Performs a bitwise XOR operation between the two values."
                ],
                "code": ["infix fun xor(other: UInt): UInt"]
              }
            ]
          },
          {
            "name": "Companion Object Properties",
            "declarations": [
              {
                "name": "MAX_VALUE",
                "description": [
                  "A constant holding the maximum value an instance of UInt can have."
                ],
                "code": ["const val MAX_VALUE: UInt"]
              },
              {
                "name": "MIN_VALUE",
                "description": [
                  "A constant holding the minimum value an instance of UInt can have."
                ],
                "code": ["const val MIN_VALUE: UInt"]
              },
              {
                "name": "SIZE_BITS",
                "description": [
                  "The number of bits used to represent an instance of UInt in a binary form."
                ],
                "code": ["const val SIZE_BITS: Int"]
              },
              {
                "name": "SIZE_BYTES",
                "description": [
                  "The number of bytes used to represent an instance of UInt in a binary form."
                ],
                "code": ["const val SIZE_BYTES: Int"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "coerceAtLeast",
                "description": [
                  "Ensures that this value is not less than the specified minimumValue."
                ],
                "code": [
                  "fun UInt.coerceAtLeast(minimumValue: UInt): UInt",
                  "fun <T : Comparable<T>> T.coerceAtLeast(minimumValue: T): T"
                ]
              },
              {
                "name": "coerceAtMost",
                "description": [
                  "Ensures that this value is not greater than the specified maximumValue."
                ],
                "code": [
                  "fun UInt.coerceAtMost(maximumValue: UInt): UInt",
                  "fun <T : Comparable<T>> T.coerceAtMost(maximumValue: T): T"
                ]
              },
              {
                "name": "coerceIn",
                "description": [
                  "Ensures that this value lies in the specified range minimumValue..maximumValue.",
                  "Ensures that this value lies in the specified range."
                ],
                "code": [
                  "fun UInt.coerceIn(    minimumValue: UInt,     maximumValue: UInt): UInt",
                  "fun <T : Comparable<T>> T.coerceIn(    minimumValue: T?,     maximumValue: T?): T",
                  "fun UInt.coerceIn(range: ClosedRange<UInt>): UInt",
                  "fun <T : Comparable<T>> T.coerceIn(    range: ClosedFloatingPointRange<T>): T",
                  "fun <T : Comparable<T>> T.coerceIn(range: ClosedRange<T>): T"
                ]
              },
              {
                "name": "compareTo",
                "description": [
                  "Compares this object with the specified object for order. Returns zero if this object is equal\nto the specified other object, a negative number if it's less than other, or a positive number\nif it's greater than other."
                ],
                "code": ["infix fun <T> Comparable<T>.compareTo(other: T): Int"]
              },
              {
                "name": "convert",
                "description": [],
                "code": ["fun <R : Any> UInt.convert(): R"]
              },
              {
                "name": "countLeadingZeroBits",
                "description": [
                  "Counts the number of consecutive most significant bits that are zero in the binary representation of this UInt number."
                ],
                "code": ["fun UInt.countLeadingZeroBits(): Int"]
              },
              {
                "name": "countOneBits",
                "description": [
                  "Counts the number of set bits in the binary representation of this UInt number."
                ],
                "code": ["fun UInt.countOneBits(): Int"]
              },
              {
                "name": "countTrailingZeroBits",
                "description": [
                  "Counts the number of consecutive least significant bits that are zero in the binary representation of this UInt number."
                ],
                "code": ["fun UInt.countTrailingZeroBits(): Int"]
              },
              {
                "name": "downTo",
                "description": [
                  "Returns a progression from this value down to the specified to value with the step -1."
                ],
                "code": ["infix fun UInt.downTo(to: UInt): UIntProgression"]
              },
              {
                "name": "rangeTo",
                "description": [
                  "Creates a range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeTo(    that: T): ClosedRange<T>"
                ]
              },
              {
                "name": "rangeUntil",
                "description": [
                  "Creates an open-ended range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeUntil(    that: T): OpenEndRange<T>"
                ]
              },
              {
                "name": "rotateLeft",
                "description": [
                  "Rotates the binary representation of this UInt number left by the specified bitCount number of bits.\nThe most significant bits pushed out from the left side reenter the number as the least significant bits on the right side."
                ],
                "code": ["fun UInt.rotateLeft(bitCount: Int): UInt"]
              },
              {
                "name": "rotateRight",
                "description": [
                  "Rotates the binary representation of this UInt number right by the specified bitCount number of bits.\nThe least significant bits pushed out from the right side reenter the number as the most significant bits on the left side."
                ],
                "code": ["fun UInt.rotateRight(bitCount: Int): UInt"]
              },
              {
                "name": "takeHighestOneBit",
                "description": [
                  "Returns a number having a single bit set in the position of the most significant set bit of this UInt number,\nor zero, if this number is zero."
                ],
                "code": ["fun UInt.takeHighestOneBit(): UInt"]
              },
              {
                "name": "takeLowestOneBit",
                "description": [
                  "Returns a number having a single bit set in the position of the least significant set bit of this UInt number,\nor zero, if this number is zero."
                ],
                "code": ["fun UInt.takeLowestOneBit(): UInt"]
              },
              {
                "name": "toHexString",
                "description": [
                  "Formats this UInt value using the specified format."
                ],
                "code": [
                  "fun UInt.toHexString(    format: HexFormat = HexFormat.Default): String"
                ]
              },
              {
                "name": "toString",
                "description": [
                  "Returns a string representation of this Int value in the specified radix."
                ],
                "code": ["fun UInt.toString(radix: Int): String"]
              },
              {
                "name": "until",
                "description": [
                  "Returns a range from this value up to but excluding the specified to value."
                ],
                "code": ["infix fun UInt.until(to: UInt): UIntRange"]
              }
            ]
          }
        ]
      },
      {
        "name": "UIntArray",
        "description": [],
        "code": ["class UIntArray : Collection<UInt>"],
        "url": "-u-int-array/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Creates a new array of the specified size, with all elements initialized to zero."
                ],
                "code": ["UIntArray(size: Int)"]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "size",
                "description": ["Returns the number of elements in the array."],
                "code": ["val size: Int"]
              }
            ]
          },
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "contains",
                "description": [],
                "code": ["fun contains(element: UInt): Boolean"]
              },
              {
                "name": "containsAll",
                "description": [],
                "code": ["fun containsAll(elements: Collection<UInt>): Boolean"]
              },
              {
                "name": "get",
                "description": [
                  "Returns the array element at the given index. This method can be called using the index operator."
                ],
                "code": ["operator fun get(index: Int): UInt"]
              },
              {
                "name": "isEmpty",
                "description": [],
                "code": ["fun isEmpty(): Boolean"]
              },
              {
                "name": "iterator",
                "description": [
                  "Creates an iterator over the elements of the array."
                ],
                "code": ["operator fun iterator(): Iterator<UInt>"]
              },
              {
                "name": "set",
                "description": [
                  "Sets the element at the given index to the given value. This method can be called using the index operator."
                ],
                "code": ["operator fun set(index: Int, value: UInt)"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "indices",
                "description": [
                  "Returns the range of valid indices for the array."
                ],
                "code": ["val UIntArray.indices: IntRange"]
              },
              {
                "name": "lastIndex",
                "description": ["Returns the last valid index for the array."],
                "code": ["val UIntArray.lastIndex: Int"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "all",
                "description": [
                  "Returns true if all elements match the given predicate."
                ],
                "code": [
                  "fun UIntArray.all(predicate: (UInt) -> Boolean): Boolean",
                  "fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean"
                ]
              },
              {
                "name": "any",
                "description": [
                  "Returns true if array has at least one element.",
                  "Returns true if at least one element matches the given predicate."
                ],
                "code": [
                  "fun UIntArray.any(): Boolean",
                  "fun UIntArray.any(predicate: (UInt) -> Boolean): Boolean",
                  "fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean"
                ]
              },
              {
                "name": "asIntArray",
                "description": [
                  "Returns an array of type IntArray, which is a view of this array where each element is a signed reinterpretation\nof the corresponding element of this array."
                ],
                "code": ["fun UIntArray.asIntArray(): IntArray"]
              },
              {
                "name": "asIterable",
                "description": ["Returns this collection as an Iterable."],
                "code": ["fun <T> Iterable<T>.asIterable(): Iterable<T>"]
              },
              {
                "name": "asSequence",
                "description": [
                  "Creates a Sequence instance that wraps the original collection returning its elements when being iterated."
                ],
                "code": ["fun <T> Iterable<T>.asSequence(): Sequence<T>"]
              },
              {
                "name": "associate",
                "description": [
                  "Returns a Map containing key-value pairs provided by transform function\napplied to elements of the given collection."
                ],
                "code": [
                  "fun <T, K, V> Iterable<T>.associate(    transform: (T) -> Pair<K, V>): Map<K, V>"
                ]
              },
              {
                "name": "associateBy",
                "description": [
                  "Returns a Map containing the elements from the given collection indexed by the key\nreturned from keySelector function applied to each element.",
                  "Returns a Map containing the values provided by valueTransform and indexed by keySelector functions applied to elements of the given collection."
                ],
                "code": [
                  "fun <T, K> Iterable<T>.associateBy(    keySelector: (T) -> K): Map<K, T>",
                  "fun <T, K, V> Iterable<T>.associateBy(    keySelector: (T) -> K,     valueTransform: (T) -> V): Map<K, V>"
                ]
              },
              {
                "name": "associateByTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function applied to each element of the given collection\nand value is the element itself.",
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function and\nand value is provided by the valueTransform function applied to elements of the given collection."
                ],
                "code": [
                  "fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(    destination: M,     keySelector: (T) -> K): M",
                  "fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(    destination: M,     keySelector: (T) -> K,     valueTransform: (T) -> V): M"
                ]
              },
              {
                "name": "associateTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs\nprovided by transform function applied to each element of the given collection."
                ],
                "code": [
                  "fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(    destination: M,     transform: (T) -> Pair<K, V>): M"
                ]
              },
              {
                "name": "associateWith",
                "description": [
                  "Returns a Map where keys are elements from the given array and values are\nproduced by the valueSelector function applied to each element.",
                  "Returns a Map where keys are elements from the given collection and values are\nproduced by the valueSelector function applied to each element."
                ],
                "code": [
                  "fun <V> UIntArray.associateWith(    valueSelector: (UInt) -> V): Map<UInt, V>",
                  "fun <K, V> Iterable<K>.associateWith(    valueSelector: (K) -> V): Map<K, V>"
                ]
              },
              {
                "name": "associateWithTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs for each element of the given array,\nwhere key is the element itself and value is provided by the valueSelector function applied to that key.",
                  "Populates and returns the destination mutable map with key-value pairs for each element of the given collection,\nwhere key is the element itself and value is provided by the valueSelector function applied to that key."
                ],
                "code": [
                  "fun <V, M : MutableMap<in UInt, in V>> UIntArray.associateWithTo(    destination: M,     valueSelector: (UInt) -> V): M",
                  "fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(    destination: M,     valueSelector: (K) -> V): M"
                ]
              },
              {
                "name": "binarySearch",
                "description": [
                  "Searches the array or the range of the array for the provided element using the binary search algorithm.\nThe array is expected to be sorted, otherwise the result is undefined."
                ],
                "code": [
                  "fun UIntArray.binarySearch(    element: UInt,     fromIndex: Int = 0,     toIndex: Int = size): Int"
                ]
              },
              {
                "name": "chunked",
                "description": [
                  "Splits this collection into a list of lists each not exceeding the given size.",
                  "Splits this collection into several lists each not exceeding the given size\nand applies the given transform function to an each."
                ],
                "code": [
                  "fun <T> Iterable<T>.chunked(size: Int): List<List<T>>",
                  "fun <T, R> Iterable<T>.chunked(    size: Int,     transform: (List<T>) -> R): List<R>"
                ]
              },
              {
                "name": "component1",
                "description": ["Returns 1st element from the array."],
                "code": ["operator fun UIntArray.component1(): UInt"]
              },
              {
                "name": "component2",
                "description": ["Returns 2nd element from the array."],
                "code": ["operator fun UIntArray.component2(): UInt"]
              },
              {
                "name": "component3",
                "description": ["Returns 3rd element from the array."],
                "code": ["operator fun UIntArray.component3(): UInt"]
              },
              {
                "name": "component4",
                "description": ["Returns 4th element from the array."],
                "code": ["operator fun UIntArray.component4(): UInt"]
              },
              {
                "name": "component5",
                "description": ["Returns 5th element from the array."],
                "code": ["operator fun UIntArray.component5(): UInt"]
              },
              {
                "name": "contains",
                "description": [
                  "Returns true if element is found in the collection."
                ],
                "code": [
                  "operator fun <T> Iterable<T>.contains(element: T): Boolean"
                ]
              },
              {
                "name": "containsAll",
                "description": [
                  "Checks if all elements in the specified collection are contained in this collection."
                ],
                "code": [
                  "fun <T> Collection<T>.containsAll(    elements: Collection<T>): Boolean"
                ]
              },
              {
                "name": "contentEquals",
                "description": [
                  "Returns true if the two specified arrays are structurally equal to one another,\ni.e. contain the same number of the same elements in the same order."
                ],
                "code": [
                  "infix fun UIntArray?.contentEquals(    other: UIntArray?): Boolean",
                  "infix fun UIntArray.contentEquals(other: UIntArray): Boolean"
                ]
              },
              {
                "name": "contentHashCode",
                "description": [
                  "Returns a hash code based on the contents of this array as if it is List."
                ],
                "code": [
                  "fun UIntArray?.contentHashCode(): Int",
                  "fun UIntArray.contentHashCode(): Int"
                ]
              },
              {
                "name": "contentToString",
                "description": [
                  "Returns a string representation of the contents of the specified array as if it is List."
                ],
                "code": [
                  "fun UIntArray?.contentToString(): String",
                  "fun UIntArray.contentToString(): String"
                ]
              },
              {
                "name": "copyInto",
                "description": [
                  "Copies this array or its subrange into the destination array and returns that array."
                ],
                "code": [
                  "fun UIntArray.copyInto(    destination: UIntArray,     destinationOffset: Int = 0,     startIndex: Int = 0,     endIndex: Int = size): UIntArray"
                ]
              },
              {
                "name": "copyOf",
                "description": [
                  "Returns new array which is a copy of the original array.",
                  "Returns new array which is a copy of the original array, resized to the given newSize.\nThe copy is either truncated or padded at the end with zero values if necessary."
                ],
                "code": [
                  "fun UIntArray.copyOf(): UIntArray",
                  "fun UIntArray.copyOf(newSize: Int): UIntArray"
                ]
              },
              {
                "name": "copyOfRange",
                "description": [
                  "Returns a new array which is a copy of the specified range of the original array."
                ],
                "code": [
                  "fun UIntArray.copyOfRange(    fromIndex: Int,     toIndex: Int): UIntArray"
                ]
              },
              {
                "name": "count",
                "description": [
                  "Returns the number of elements matching the given predicate."
                ],
                "code": [
                  "fun UIntArray.count(predicate: (UInt) -> Boolean): Int",
                  "fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int"
                ]
              },
              {
                "name": "distinct",
                "description": [
                  "Returns a list containing only distinct elements from the given collection."
                ],
                "code": ["fun <T> Iterable<T>.distinct(): List<T>"]
              },
              {
                "name": "distinctBy",
                "description": [
                  "Returns a list containing only elements from the given collection\nhaving distinct keys returned by the given selector function."
                ],
                "code": [
                  "fun <T, K> Iterable<T>.distinctBy(    selector: (T) -> K): List<T>"
                ]
              },
              {
                "name": "drop",
                "description": [
                  "Returns a list containing all elements except first n elements."
                ],
                "code": ["fun UIntArray.drop(n: Int): List<UInt>"]
              },
              {
                "name": "dropLast",
                "description": [
                  "Returns a list containing all elements except last n elements."
                ],
                "code": ["fun UIntArray.dropLast(n: Int): List<UInt>"]
              },
              {
                "name": "dropLastWhile",
                "description": [
                  "Returns a list containing all elements except last elements that satisfy the given predicate."
                ],
                "code": [
                  "fun UIntArray.dropLastWhile(    predicate: (UInt) -> Boolean): List<UInt>"
                ]
              },
              {
                "name": "dropWhile",
                "description": [
                  "Returns a list containing all elements except first elements that satisfy the given predicate."
                ],
                "code": [
                  "fun UIntArray.dropWhile(    predicate: (UInt) -> Boolean): List<UInt>",
                  "fun <T> Iterable<T>.dropWhile(    predicate: (T) -> Boolean): List<T>"
                ]
              },
              {
                "name": "elementAtOrElse",
                "description": [
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array.",
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this collection."
                ],
                "code": [
                  "fun UIntArray.elementAtOrElse(    index: Int,     defaultValue: (Int) -> UInt): UInt",
                  "fun <T> Iterable<T>.elementAtOrElse(    index: Int,     defaultValue: (Int) -> T): T"
                ]
              },
              {
                "name": "elementAtOrNull",
                "description": [
                  "Returns an element at the given index or null if the index is out of bounds of this array."
                ],
                "code": ["fun UIntArray.elementAtOrNull(index: Int): UInt?"]
              },
              {
                "name": "fill",
                "description": [
                  "Fills this array or its subrange with the specified element value."
                ],
                "code": [
                  "fun UIntArray.fill(    element: UInt,     fromIndex: Int = 0,     toIndex: Int = size)"
                ]
              },
              {
                "name": "filter",
                "description": [
                  "Returns a list containing only elements matching the given predicate."
                ],
                "code": [
                  "fun UIntArray.filter(    predicate: (UInt) -> Boolean): List<UInt>",
                  "fun <T> Iterable<T>.filter(    predicate: (T) -> Boolean): List<T>"
                ]
              },
              {
                "name": "filterIndexed",
                "description": [
                  "Returns a list containing only elements matching the given predicate."
                ],
                "code": [
                  "fun UIntArray.filterIndexed(    predicate: (index: Int, UInt) -> Boolean): List<UInt>",
                  "fun <T> Iterable<T>.filterIndexed(    predicate: (index: Int, T) -> Boolean): List<T>"
                ]
              },
              {
                "name": "filterIndexedTo",
                "description": [
                  "Appends all elements matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in UInt>> UIntArray.filterIndexedTo(    destination: C,     predicate: (index: Int, UInt) -> Boolean): C",
                  "fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(    destination: C,     predicate: (index: Int, T) -> Boolean): C"
                ]
              },
              {
                "name": "filterIsInstance",
                "description": [
                  "Returns a list containing all elements that are instances of specified type parameter R."
                ],
                "code": ["fun <R> Iterable<*>.filterIsInstance(): List<R>"]
              },
              {
                "name": "filterIsInstanceTo",
                "description": [
                  "Appends all elements that are instances of specified type parameter R to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(    destination: C): C"
                ]
              },
              {
                "name": "filterNot",
                "description": [
                  "Returns a list containing all elements not matching the given predicate."
                ],
                "code": [
                  "fun UIntArray.filterNot(    predicate: (UInt) -> Boolean): List<UInt>",
                  "fun <T> Iterable<T>.filterNot(    predicate: (T) -> Boolean): List<T>"
                ]
              },
              {
                "name": "filterNotNull",
                "description": [
                  "Returns a list containing all elements that are not null."
                ],
                "code": ["fun <T : Any> Iterable<T?>.filterNotNull(): List<T>"]
              },
              {
                "name": "filterNotNullTo",
                "description": [
                  "Appends all elements that are not null to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(    destination: C): C"
                ]
              },
              {
                "name": "filterNotTo",
                "description": [
                  "Appends all elements not matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in UInt>> UIntArray.filterNotTo(    destination: C,     predicate: (UInt) -> Boolean): C",
                  "fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(    destination: C,     predicate: (T) -> Boolean): C"
                ]
              },
              {
                "name": "filterTo",
                "description": [
                  "Appends all elements matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in UInt>> UIntArray.filterTo(    destination: C,     predicate: (UInt) -> Boolean): C",
                  "fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(    destination: C,     predicate: (T) -> Boolean): C"
                ]
              },
              {
                "name": "find",
                "description": [
                  "Returns the first element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun UIntArray.find(predicate: (UInt) -> Boolean): UInt?",
                  "fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T?"
                ]
              },
              {
                "name": "findLast",
                "description": [
                  "Returns the last element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun UIntArray.findLast(predicate: (UInt) -> Boolean): UInt?",
                  "fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T?"
                ]
              },
              {
                "name": "first",
                "description": [
                  "Returns the first element.",
                  "Returns the first element matching the given predicate."
                ],
                "code": [
                  "fun UIntArray.first(): UInt",
                  "fun UIntArray.first(predicate: (UInt) -> Boolean): UInt",
                  "fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T"
                ]
              },
              {
                "name": "firstNotNullOf",
                "description": [
                  "Returns the first non-null value produced by transform function being applied to elements of this collection in iteration order,\nor throws NoSuchElementException if no non-null value was produced."
                ],
                "code": [
                  "fun <T, R : Any> Iterable<T>.firstNotNullOf(    transform: (T) -> R?): R"
                ]
              },
              {
                "name": "firstNotNullOfOrNull",
                "description": [
                  "Returns the first non-null value produced by transform function being applied to elements of this collection in iteration order,\nor null if no non-null value was produced."
                ],
                "code": [
                  "fun <T, R : Any> Iterable<T>.firstNotNullOfOrNull(    transform: (T) -> R?): R?"
                ]
              },
              {
                "name": "firstOrNull",
                "description": [
                  "Returns the first element, or null if the array is empty.",
                  "Returns the first element matching the given predicate, or null if element was not found."
                ],
                "code": [
                  "fun UIntArray.firstOrNull(): UInt?",
                  "fun UIntArray.firstOrNull(    predicate: (UInt) -> Boolean): UInt?",
                  "fun <T> Iterable<T>.firstOrNull(    predicate: (T) -> Boolean): T?"
                ]
              },
              {
                "name": "flatMap",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element of original array.",
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element of original collection."
                ],
                "code": [
                  "fun <R> UIntArray.flatMap(    transform: (UInt) -> Iterable<R>): List<R>",
                  "fun <T, R> Iterable<T>.flatMap(    transform: (T) -> Iterable<R>): List<R>",
                  "fun <T, R> Iterable<T>.flatMap(    transform: (T) -> Sequence<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexed",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element\nand its index in the original array.",
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element\nand its index in the original collection."
                ],
                "code": [
                  "fun <R> UIntArray.flatMapIndexed(    transform: (index: Int, UInt) -> Iterable<R>): List<R>",
                  "fun <T, R> Iterable<T>.flatMapIndexed(    transform: (index: Int, T) -> Iterable<R>): List<R>",
                  "fun <T, R> Iterable<T>.flatMapIndexed(    transform: (index: Int, T) -> Sequence<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexedTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each element\nand its index in the original array, to the given destination.",
                  "Appends all elements yielded from results of transform function being invoked on each element\nand its index in the original collection, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> UIntArray.flatMapIndexedTo(    destination: C,     transform: (index: Int, UInt) -> Iterable<R>): C",
                  "fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(    destination: C,     transform: (index: Int, T) -> Iterable<R>): C",
                  "fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(    destination: C,     transform: (index: Int, T) -> Sequence<R>): C"
                ]
              },
              {
                "name": "flatMapTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each element of original array, to the given destination.",
                  "Appends all elements yielded from results of transform function being invoked on each element of original collection, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> UIntArray.flatMapTo(    destination: C,     transform: (UInt) -> Iterable<R>): C",
                  "fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(    destination: C,     transform: (T) -> Iterable<R>): C",
                  "fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(    destination: C,     transform: (T) -> Sequence<R>): C"
                ]
              },
              {
                "name": "fold",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun <R> UIntArray.fold(    initial: R,     operation: (acc: R, UInt) -> R): R",
                  "fun <T, R> Iterable<T>.fold(    initial: R,     operation: (acc: R, T) -> R): R"
                ]
              },
              {
                "name": "foldIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element with its index in the original array.",
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element with its index in the original collection."
                ],
                "code": [
                  "fun <R> UIntArray.foldIndexed(    initial: R,     operation: (index: Int, acc: R, UInt) -> R): R",
                  "fun <T, R> Iterable<T>.foldIndexed(    initial: R,     operation: (index: Int, acc: R, T) -> R): R"
                ]
              },
              {
                "name": "foldRight",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun <R> UIntArray.foldRight(    initial: R,     operation: (UInt, acc: R) -> R): R"
                ]
              },
              {
                "name": "foldRightIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun <R> UIntArray.foldRightIndexed(    initial: R,     operation: (index: Int, UInt, acc: R) -> R): R"
                ]
              },
              {
                "name": "forEach",
                "description": ["Performs the given action on each element."],
                "code": [
                  "fun UIntArray.forEach(action: (UInt) -> Unit)",
                  "fun <T> Iterable<T>.forEach(action: (T) -> Unit)"
                ]
              },
              {
                "name": "forEachIndexed",
                "description": [
                  "Performs the given action on each element, providing sequential index with the element."
                ],
                "code": [
                  "fun UIntArray.forEachIndexed(    action: (index: Int, UInt) -> Unit)",
                  "fun <T> Iterable<T>.forEachIndexed(    action: (index: Int, T) -> Unit)"
                ]
              },
              {
                "name": "getOrElse",
                "description": [
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
                ],
                "code": [
                  "fun UIntArray.getOrElse(    index: Int,     defaultValue: (Int) -> UInt): UInt"
                ]
              },
              {
                "name": "getOrNull",
                "description": [
                  "Returns an element at the given index or null if the index is out of bounds of this array."
                ],
                "code": ["fun UIntArray.getOrNull(index: Int): UInt?"]
              },
              {
                "name": "groupBy",
                "description": [
                  "Groups elements of the original array by the key returned by the given keySelector function\napplied to each element and returns a map where each group key is associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original array\nby the key returned by the given keySelector function applied to the element\nand returns a map where each group key is associated with a list of corresponding values.",
                  "Groups elements of the original collection by the key returned by the given keySelector function\napplied to each element and returns a map where each group key is associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original collection\nby the key returned by the given keySelector function applied to the element\nand returns a map where each group key is associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K> UIntArray.groupBy(    keySelector: (UInt) -> K): Map<K, List<UInt>>",
                  "fun <K, V> UIntArray.groupBy(    keySelector: (UInt) -> K,     valueTransform: (UInt) -> V): Map<K, List<V>>",
                  "fun <T, K> Iterable<T>.groupBy(    keySelector: (T) -> K): Map<K, List<T>>",
                  "fun <T, K, V> Iterable<T>.groupBy(    keySelector: (T) -> K,     valueTransform: (T) -> V): Map<K, List<V>>"
                ]
              },
              {
                "name": "groupByTo",
                "description": [
                  "Groups elements of the original array by the key returned by the given keySelector function\napplied to each element and puts to the destination map each group key associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original array\nby the key returned by the given keySelector function applied to the element\nand puts to the destination map each group key associated with a list of corresponding values.",
                  "Groups elements of the original collection by the key returned by the given keySelector function\napplied to each element and puts to the destination map each group key associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original collection\nby the key returned by the given keySelector function applied to the element\nand puts to the destination map each group key associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K, M : MutableMap<in K, MutableList<UInt>>> UIntArray.groupByTo(    destination: M,     keySelector: (UInt) -> K): M",
                  "fun <K, V, M : MutableMap<in K, MutableList<V>>> UIntArray.groupByTo(    destination: M,     keySelector: (UInt) -> K,     valueTransform: (UInt) -> V): M",
                  "fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(    destination: M,     keySelector: (T) -> K): M",
                  "fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(    destination: M,     keySelector: (T) -> K,     valueTransform: (T) -> V): M"
                ]
              },
              {
                "name": "groupingBy",
                "description": [
                  "Creates a Grouping source from a collection to be used later with one of group-and-fold operations\nusing the specified keySelector function to extract a key from each element."
                ],
                "code": [
                  "fun <T, K> Iterable<T>.groupingBy(    keySelector: (T) -> K): Grouping<T, K>"
                ]
              },
              {
                "name": "ifEmpty",
                "description": [
                  "Returns this array if it's not empty\nor the result of calling defaultValue function if the array is empty."
                ],
                "code": [
                  "fun <C, R> C.ifEmpty(    defaultValue: () -> R): R where C : Array<*>, C : R"
                ]
              },
              {
                "name": "indexOf",
                "description": [
                  "Returns first index of element, or -1 if the array does not contain element.",
                  "Returns first index of element, or -1 if the collection does not contain element."
                ],
                "code": [
                  "fun UIntArray.indexOf(element: UInt): Int",
                  "fun <T> Iterable<T>.indexOf(element: T): Int"
                ]
              },
              {
                "name": "indexOfFirst",
                "description": [
                  "Returns index of the first element matching the given predicate, or -1 if the array does not contain such element.",
                  "Returns index of the first element matching the given predicate, or -1 if the collection does not contain such element."
                ],
                "code": [
                  "fun UIntArray.indexOfFirst(predicate: (UInt) -> Boolean): Int",
                  "fun <T> Iterable<T>.indexOfFirst(    predicate: (T) -> Boolean): Int"
                ]
              },
              {
                "name": "indexOfLast",
                "description": [
                  "Returns index of the last element matching the given predicate, or -1 if the array does not contain such element.",
                  "Returns index of the last element matching the given predicate, or -1 if the collection does not contain such element."
                ],
                "code": [
                  "fun UIntArray.indexOfLast(predicate: (UInt) -> Boolean): Int",
                  "fun <T> Iterable<T>.indexOfLast(    predicate: (T) -> Boolean): Int"
                ]
              },
              {
                "name": "intersect",
                "description": [
                  "Returns a set containing all elements that are contained by both this collection and the specified collection."
                ],
                "code": [
                  "infix fun <T> Iterable<T>.intersect(    other: Iterable<T>): Set<T>"
                ]
              },
              {
                "name": "isNotEmpty",
                "description": ["Returns true if the collection is not empty."],
                "code": ["fun <T> Collection<T>.isNotEmpty(): Boolean"]
              },
              {
                "name": "isNullOrEmpty",
                "description": [
                  "Returns true if this nullable collection is either null or empty."
                ],
                "code": ["fun <T> Collection<T>?.isNullOrEmpty(): Boolean"]
              },
              {
                "name": "joinTo",
                "description": [
                  "Appends the string from all the elements separated using separator and using the given prefix and postfix if supplied."
                ],
                "code": [
                  "fun <T, A : Appendable> Iterable<T>.joinTo(    buffer: A,     separator: CharSequence = \", \",     prefix: CharSequence = \"\",     postfix: CharSequence = \"\",     limit: Int = -1,     truncated: CharSequence = \"...\",     transform: ((T) -> CharSequence)? = null): A"
                ]
              },
              {
                "name": "joinToString",
                "description": [
                  "Creates a string from all the elements separated using separator and using the given prefix and postfix if supplied."
                ],
                "code": [
                  "fun <T> Iterable<T>.joinToString(    separator: CharSequence = \", \",     prefix: CharSequence = \"\",     postfix: CharSequence = \"\",     limit: Int = -1,     truncated: CharSequence = \"...\",     transform: ((T) -> CharSequence)? = null): String"
                ]
              },
              {
                "name": "last",
                "description": [
                  "Returns the last element.",
                  "Returns the last element matching the given predicate."
                ],
                "code": [
                  "fun UIntArray.last(): UInt",
                  "fun UIntArray.last(predicate: (UInt) -> Boolean): UInt",
                  "fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T"
                ]
              },
              {
                "name": "lastIndexOf",
                "description": [
                  "Returns last index of element, or -1 if the array does not contain element.",
                  "Returns last index of element, or -1 if the collection does not contain element."
                ],
                "code": [
                  "fun UIntArray.lastIndexOf(element: UInt): Int",
                  "fun <T> Iterable<T>.lastIndexOf(element: T): Int"
                ]
              },
              {
                "name": "lastOrNull",
                "description": [
                  "Returns the last element, or null if the array is empty.",
                  "Returns the last element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun UIntArray.lastOrNull(): UInt?",
                  "fun UIntArray.lastOrNull(predicate: (UInt) -> Boolean): UInt?",
                  "fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T?"
                ]
              },
              {
                "name": "map",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each element in the original array.",
                  "Returns a list containing the results of applying the given transform function\nto each element in the original collection."
                ],
                "code": [
                  "fun <R> UIntArray.map(transform: (UInt) -> R): List<R>",
                  "fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexed",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each element and its index in the original array.",
                  "Returns a list containing the results of applying the given transform function\nto each element and its index in the original collection."
                ],
                "code": [
                  "fun <R> UIntArray.mapIndexed(    transform: (index: Int, UInt) -> R): List<R>",
                  "fun <T, R> Iterable<T>.mapIndexed(    transform: (index: Int, T) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexedNotNull",
                "description": [
                  "Returns a list containing only the non-null results of applying the given transform function\nto each element and its index in the original collection."
                ],
                "code": [
                  "fun <T, R : Any> Iterable<T>.mapIndexedNotNull(    transform: (index: Int, T) -> R?): List<R>"
                ]
              },
              {
                "name": "mapIndexedNotNullTo",
                "description": [
                  "Applies the given transform function to each element and its index in the original collection\nand appends only the non-null results to the given destination."
                ],
                "code": [
                  "fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(    destination: C,     transform: (index: Int, T) -> R?): C"
                ]
              },
              {
                "name": "mapIndexedTo",
                "description": [
                  "Applies the given transform function to each element and its index in the original array\nand appends the results to the given destination.",
                  "Applies the given transform function to each element and its index in the original collection\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> UIntArray.mapIndexedTo(    destination: C,     transform: (index: Int, UInt) -> R): C",
                  "fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(    destination: C,     transform: (index: Int, T) -> R): C"
                ]
              },
              {
                "name": "mapNotNull",
                "description": [
                  "Returns a list containing only the non-null results of applying the given transform function\nto each element in the original collection."
                ],
                "code": [
                  "fun <T, R : Any> Iterable<T>.mapNotNull(    transform: (T) -> R?): List<R>"
                ]
              },
              {
                "name": "mapNotNullTo",
                "description": [
                  "Applies the given transform function to each element in the original collection\nand appends only the non-null results to the given destination."
                ],
                "code": [
                  "fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(    destination: C,     transform: (T) -> R?): C"
                ]
              },
              {
                "name": "mapTo",
                "description": [
                  "Applies the given transform function to each element of the original array\nand appends the results to the given destination.",
                  "Applies the given transform function to each element of the original collection\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> UIntArray.mapTo(    destination: C,     transform: (UInt) -> R): C",
                  "fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(    destination: C,     transform: (T) -> R): C"
                ]
              },
              {
                "name": "maxByOrNull",
                "description": [
                  "Returns the first element yielding the largest value of the given function or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> UIntArray.maxByOrNull(    selector: (UInt) -> R): UInt?",
                  "fun <T, R : Comparable<R>> Iterable<T>.maxByOrNull(    selector: (T) -> R): T?"
                ]
              },
              {
                "name": "maxOf",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each element in the array.",
                  "Returns the largest value among all values produced by selector function\napplied to each element in the collection."
                ],
                "code": [
                  "fun UIntArray.maxOf(selector: (UInt) -> Double): Double",
                  "fun UIntArray.maxOf(selector: (UInt) -> Float): Float",
                  "fun <R : Comparable<R>> UIntArray.maxOf(    selector: (UInt) -> R): R",
                  "fun <T> Iterable<T>.maxOf(selector: (T) -> Double): Double",
                  "fun <T> Iterable<T>.maxOf(selector: (T) -> Float): Float",
                  "fun <T, R : Comparable<R>> Iterable<T>.maxOf(    selector: (T) -> R): R"
                ]
              },
              {
                "name": "maxOfOrNull",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each element in the array or null if there are no elements.",
                  "Returns the largest value among all values produced by selector function\napplied to each element in the collection or null if there are no elements."
                ],
                "code": [
                  "fun UIntArray.maxOfOrNull(    selector: (UInt) -> Double): Double?",
                  "fun UIntArray.maxOfOrNull(selector: (UInt) -> Float): Float?",
                  "fun <R : Comparable<R>> UIntArray.maxOfOrNull(    selector: (UInt) -> R): R?",
                  "fun <T> Iterable<T>.maxOfOrNull(    selector: (T) -> Double): Double?",
                  "fun <T> Iterable<T>.maxOfOrNull(    selector: (T) -> Float): Float?",
                  "fun <T, R : Comparable<R>> Iterable<T>.maxOfOrNull(    selector: (T) -> R): R?"
                ]
              },
              {
                "name": "maxOfWith",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the array.",
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the collection."
                ],
                "code": [
                  "fun <R> UIntArray.maxOfWith(    comparator: Comparator<in R>,     selector: (UInt) -> R): R",
                  "fun <T, R> Iterable<T>.maxOfWith(    comparator: Comparator<in R>,     selector: (T) -> R): R"
                ]
              },
              {
                "name": "maxOfWithOrNull",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the array or null if there are no elements.",
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the collection or null if there are no elements."
                ],
                "code": [
                  "fun <R> UIntArray.maxOfWithOrNull(    comparator: Comparator<in R>,     selector: (UInt) -> R): R?",
                  "fun <T, R> Iterable<T>.maxOfWithOrNull(    comparator: Comparator<in R>,     selector: (T) -> R): R?"
                ]
              },
              {
                "name": "maxOrNull",
                "description": [
                  "Returns the largest element or null if there are no elements."
                ],
                "code": ["fun UIntArray.maxOrNull(): UInt?"]
              },
              {
                "name": "maxWith",
                "description": [
                  "Returns the first element having the largest value according to the provided comparator."
                ],
                "code": [
                  "fun UIntArray.maxWith(comparator: Comparator<in UInt>): UInt",
                  "fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T",
                  "fun UIntArray.maxWith(comparator: Comparator<in UInt>): UInt?"
                ]
              },
              {
                "name": "maxWithOrNull",
                "description": [
                  "Returns the first element having the largest value according to the provided comparator or null if there are no elements."
                ],
                "code": [
                  "fun UIntArray.maxWithOrNull(    comparator: Comparator<in UInt>): UInt?",
                  "fun <T> Iterable<T>.maxWithOrNull(    comparator: Comparator<in T>): T?"
                ]
              },
              {
                "name": "minByOrNull",
                "description": [
                  "Returns the first element yielding the smallest value of the given function or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> UIntArray.minByOrNull(    selector: (UInt) -> R): UInt?",
                  "fun <T, R : Comparable<R>> Iterable<T>.minByOrNull(    selector: (T) -> R): T?"
                ]
              },
              {
                "name": "minOf",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the array.",
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the collection."
                ],
                "code": [
                  "fun UIntArray.minOf(selector: (UInt) -> Double): Double",
                  "fun UIntArray.minOf(selector: (UInt) -> Float): Float",
                  "fun <R : Comparable<R>> UIntArray.minOf(    selector: (UInt) -> R): R",
                  "fun <T> Iterable<T>.minOf(selector: (T) -> Double): Double",
                  "fun <T> Iterable<T>.minOf(selector: (T) -> Float): Float",
                  "fun <T, R : Comparable<R>> Iterable<T>.minOf(    selector: (T) -> R): R"
                ]
              },
              {
                "name": "minOfOrNull",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the array or null if there are no elements.",
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the collection or null if there are no elements."
                ],
                "code": [
                  "fun UIntArray.minOfOrNull(    selector: (UInt) -> Double): Double?",
                  "fun UIntArray.minOfOrNull(selector: (UInt) -> Float): Float?",
                  "fun <R : Comparable<R>> UIntArray.minOfOrNull(    selector: (UInt) -> R): R?",
                  "fun <T> Iterable<T>.minOfOrNull(    selector: (T) -> Double): Double?",
                  "fun <T> Iterable<T>.minOfOrNull(    selector: (T) -> Float): Float?",
                  "fun <T, R : Comparable<R>> Iterable<T>.minOfOrNull(    selector: (T) -> R): R?"
                ]
              },
              {
                "name": "minOfWith",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the array.",
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the collection."
                ],
                "code": [
                  "fun <R> UIntArray.minOfWith(    comparator: Comparator<in R>,     selector: (UInt) -> R): R",
                  "fun <T, R> Iterable<T>.minOfWith(    comparator: Comparator<in R>,     selector: (T) -> R): R"
                ]
              },
              {
                "name": "minOfWithOrNull",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the array or null if there are no elements.",
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the collection or null if there are no elements."
                ],
                "code": [
                  "fun <R> UIntArray.minOfWithOrNull(    comparator: Comparator<in R>,     selector: (UInt) -> R): R?",
                  "fun <T, R> Iterable<T>.minOfWithOrNull(    comparator: Comparator<in R>,     selector: (T) -> R): R?"
                ]
              },
              {
                "name": "minOrNull",
                "description": [
                  "Returns the smallest element or null if there are no elements."
                ],
                "code": ["fun UIntArray.minOrNull(): UInt?"]
              },
              {
                "name": "minus",
                "description": [
                  "Returns a list containing all elements of the original collection without the first occurrence of the given element.",
                  "Returns a list containing all elements of the original collection except the elements contained in the given elements array.",
                  "Returns a list containing all elements of the original collection except the elements contained in the given elements collection.",
                  "Returns a list containing all elements of the original collection except the elements contained in the given elements sequence."
                ],
                "code": [
                  "operator fun <T> Iterable<T>.minus(element: T): List<T>",
                  "operator fun <T> Iterable<T>.minus(    elements: Array<out T>): List<T>",
                  "operator fun <T> Iterable<T>.minus(    elements: Iterable<T>): List<T>",
                  "operator fun <T> Iterable<T>.minus(    elements: Sequence<T>): List<T>"
                ]
              },
              {
                "name": "minusElement",
                "description": [
                  "Returns a list containing all elements of the original collection without the first occurrence of the given element."
                ],
                "code": [
                  "fun <T> Iterable<T>.minusElement(element: T): List<T>"
                ]
              },
              {
                "name": "minWith",
                "description": [
                  "Returns the first element having the smallest value according to the provided comparator."
                ],
                "code": [
                  "fun UIntArray.minWith(comparator: Comparator<in UInt>): UInt",
                  "fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T",
                  "fun UIntArray.minWith(comparator: Comparator<in UInt>): UInt?"
                ]
              },
              {
                "name": "minWithOrNull",
                "description": [
                  "Returns the first element having the smallest value according to the provided comparator or null if there are no elements."
                ],
                "code": [
                  "fun UIntArray.minWithOrNull(    comparator: Comparator<in UInt>): UInt?",
                  "fun <T> Iterable<T>.minWithOrNull(    comparator: Comparator<in T>): T?"
                ]
              },
              {
                "name": "none",
                "description": [
                  "Returns true if the array has no elements.",
                  "Returns true if no elements match the given predicate."
                ],
                "code": [
                  "fun UIntArray.none(): Boolean",
                  "fun UIntArray.none(predicate: (UInt) -> Boolean): Boolean",
                  "fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean"
                ]
              },
              {
                "name": "onEach",
                "description": [
                  "Performs the given action on each element and returns the array itself afterwards.",
                  "Performs the given action on each element and returns the collection itself afterwards."
                ],
                "code": [
                  "fun UIntArray.onEach(action: (UInt) -> Unit): UIntArray",
                  "fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C"
                ]
              },
              {
                "name": "onEachIndexed",
                "description": [
                  "Performs the given action on each element, providing sequential index with the element,\nand returns the array itself afterwards.",
                  "Performs the given action on each element, providing sequential index with the element,\nand returns the collection itself afterwards."
                ],
                "code": [
                  "fun UIntArray.onEachIndexed(    action: (index: Int, UInt) -> Unit): UIntArray",
                  "fun <T, C : Iterable<T>> C.onEachIndexed(    action: (index: Int, T) -> Unit): C"
                ]
              },
              {
                "name": "orEmpty",
                "description": [
                  "Returns this Collection if it's not null and the empty list otherwise."
                ],
                "code": ["fun <T> Collection<T>?.orEmpty(): Collection<T>"]
              },
              {
                "name": "partition",
                "description": [
                  "Splits the original collection into pair of lists,\nwhere first list contains elements for which predicate yielded true,\nwhile second list contains elements for which predicate yielded false."
                ],
                "code": [
                  "fun <T> Iterable<T>.partition(    predicate: (T) -> Boolean): Pair<List<T>, List<T>>"
                ]
              },
              {
                "name": "plus",
                "description": [
                  "Returns an array containing all elements of the original array and then the given element.",
                  "Returns an array containing all elements of the original array and then all elements of the given elements collection.",
                  "Returns an array containing all elements of the original array and then all elements of the given elements array.",
                  "Returns a list containing all elements of the original collection and then the given element.",
                  "Returns a list containing all elements of the original collection and then all elements of the given elements array.",
                  "Returns a list containing all elements of the original collection and then all elements of the given elements collection.",
                  "Returns a list containing all elements of the original collection and then all elements of the given elements sequence."
                ],
                "code": [
                  "operator fun UIntArray.plus(element: UInt): UIntArray",
                  "operator fun UIntArray.plus(    elements: Collection<UInt>): UIntArray",
                  "operator fun UIntArray.plus(elements: UIntArray): UIntArray",
                  "operator fun <T> Iterable<T>.plus(element: T): List<T>",
                  "operator fun <T> Collection<T>.plus(element: T): List<T>",
                  "operator fun <T> Iterable<T>.plus(    elements: Array<out T>): List<T>",
                  "operator fun <T> Collection<T>.plus(    elements: Array<out T>): List<T>",
                  "operator fun <T> Iterable<T>.plus(    elements: Iterable<T>): List<T>",
                  "operator fun <T> Collection<T>.plus(    elements: Iterable<T>): List<T>",
                  "operator fun <T> Iterable<T>.plus(    elements: Sequence<T>): List<T>",
                  "operator fun <T> Collection<T>.plus(    elements: Sequence<T>): List<T>"
                ]
              },
              {
                "name": "plusElement",
                "description": [
                  "Returns a list containing all elements of the original collection and then the given element."
                ],
                "code": [
                  "fun <T> Iterable<T>.plusElement(element: T): List<T>",
                  "fun <T> Collection<T>.plusElement(element: T): List<T>"
                ]
              },
              {
                "name": "random",
                "description": [
                  "Returns a random element from this array.",
                  "Returns a random element from this array using the specified source of randomness."
                ],
                "code": [
                  "fun UIntArray.random(): UInt",
                  "fun UIntArray.random(random: Random): UInt"
                ]
              },
              {
                "name": "randomOrNull",
                "description": [
                  "Returns a random element from this array, or null if this array is empty.",
                  "Returns a random element from this array using the specified source of randomness, or null if this array is empty."
                ],
                "code": [
                  "fun UIntArray.randomOrNull(): UInt?",
                  "fun UIntArray.randomOrNull(random: Random): UInt?"
                ]
              },
              {
                "name": "reduce",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun UIntArray.reduce(    operation: (acc: UInt, UInt) -> UInt): UInt",
                  "fun <S, T : S> Iterable<T>.reduce(    operation: (acc: S, T) -> S): S"
                ]
              },
              {
                "name": "reduceIndexed",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original array.",
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original collection."
                ],
                "code": [
                  "fun UIntArray.reduceIndexed(    operation: (index: Int, acc: UInt, UInt) -> UInt): UInt",
                  "fun <S, T : S> Iterable<T>.reduceIndexed(    operation: (index: Int, acc: S, T) -> S): S"
                ]
              },
              {
                "name": "reduceIndexedOrNull",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original array.",
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original collection."
                ],
                "code": [
                  "fun UIntArray.reduceIndexedOrNull(    operation: (index: Int, acc: UInt, UInt) -> UInt): UInt?",
                  "fun <S, T : S> Iterable<T>.reduceIndexedOrNull(    operation: (index: Int, acc: S, T) -> S): S?"
                ]
              },
              {
                "name": "reduceOrNull",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun UIntArray.reduceOrNull(    operation: (acc: UInt, UInt) -> UInt): UInt?",
                  "fun <S, T : S> Iterable<T>.reduceOrNull(    operation: (acc: S, T) -> S): S?"
                ]
              },
              {
                "name": "reduceRight",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun UIntArray.reduceRight(    operation: (UInt, acc: UInt) -> UInt): UInt"
                ]
              },
              {
                "name": "reduceRightIndexed",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun UIntArray.reduceRightIndexed(    operation: (index: Int, UInt, acc: UInt) -> UInt): UInt"
                ]
              },
              {
                "name": "reduceRightIndexedOrNull",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun UIntArray.reduceRightIndexedOrNull(    operation: (index: Int, UInt, acc: UInt) -> UInt): UInt?"
                ]
              },
              {
                "name": "reduceRightOrNull",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun UIntArray.reduceRightOrNull(    operation: (UInt, acc: UInt) -> UInt): UInt?"
                ]
              },
              {
                "name": "refTo",
                "description": [],
                "code": ["fun UIntArray.refTo(index: Int): CValuesRef<UIntVar>"]
              },
              {
                "name": "requireNoNulls",
                "description": [
                  "Returns an original collection containing all the non-null elements, throwing an IllegalArgumentException if there are any null elements."
                ],
                "code": [
                  "fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T>"
                ]
              },
              {
                "name": "reverse",
                "description": [
                  "Reverses elements in the array in-place.",
                  "Reverses elements of the array in the specified range in-place."
                ],
                "code": [
                  "fun UIntArray.reverse()",
                  "fun UIntArray.reverse(fromIndex: Int, toIndex: Int)"
                ]
              },
              {
                "name": "reversed",
                "description": [
                  "Returns a list with elements in reversed order."
                ],
                "code": ["fun UIntArray.reversed(): List<UInt>"]
              },
              {
                "name": "reversedArray",
                "description": [
                  "Returns an array with elements of this array in reversed order."
                ],
                "code": ["fun UIntArray.reversedArray(): UIntArray"]
              },
              {
                "name": "runningFold",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> UIntArray.runningFold(    initial: R,     operation: (acc: R, UInt) -> R): List<R>",
                  "fun <T, R> Iterable<T>.runningFold(    initial: R,     operation: (acc: R, T) -> R): List<R>"
                ]
              },
              {
                "name": "runningFoldIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with initial value.",
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original collection and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> UIntArray.runningFoldIndexed(    initial: R,     operation: (index: Int, acc: R, UInt) -> R): List<R>",
                  "fun <T, R> Iterable<T>.runningFoldIndexed(    initial: R,     operation: (index: Int, acc: R, T) -> R): List<R>"
                ]
              },
              {
                "name": "runningReduce",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with the first element of this array.",
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with the first element of this collection."
                ],
                "code": [
                  "fun UIntArray.runningReduce(    operation: (acc: UInt, UInt) -> UInt): List<UInt>",
                  "fun <S, T : S> Iterable<T>.runningReduce(    operation: (acc: S, T) -> S): List<S>"
                ]
              },
              {
                "name": "runningReduceIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with the first element of this array.",
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original collection and current accumulator value that starts with the first element of this collection."
                ],
                "code": [
                  "fun UIntArray.runningReduceIndexed(    operation: (index: Int, acc: UInt, UInt) -> UInt): List<UInt>",
                  "fun <S, T : S> Iterable<T>.runningReduceIndexed(    operation: (index: Int, acc: S, T) -> S): List<S>"
                ]
              },
              {
                "name": "scan",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> UIntArray.scan(    initial: R,     operation: (acc: R, UInt) -> R): List<R>",
                  "fun <T, R> Iterable<T>.scan(    initial: R,     operation: (acc: R, T) -> R): List<R>"
                ]
              },
              {
                "name": "scanIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with initial value.",
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original collection and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> UIntArray.scanIndexed(    initial: R,     operation: (index: Int, acc: R, UInt) -> R): List<R>",
                  "fun <T, R> Iterable<T>.scanIndexed(    initial: R,     operation: (index: Int, acc: R, T) -> R): List<R>"
                ]
              },
              {
                "name": "shuffle",
                "description": [
                  "Randomly shuffles elements in this array in-place.",
                  "Randomly shuffles elements in this array in-place using the specified random instance as the source of randomness."
                ],
                "code": [
                  "fun UIntArray.shuffle()",
                  "fun UIntArray.shuffle(random: Random)"
                ]
              },
              {
                "name": "shuffled",
                "description": [
                  "Returns a new list with the elements of this list randomly shuffled\nusing the specified random instance as the source of randomness."
                ],
                "code": [
                  "fun <T> Iterable<T>.shuffled(random: Random): List<T>"
                ]
              },
              {
                "name": "single",
                "description": [
                  "Returns the single element, or throws an exception if the array is empty or has more than one element.",
                  "Returns the single element matching the given predicate, or throws exception if there is no or more than one matching element."
                ],
                "code": [
                  "fun UIntArray.single(): UInt",
                  "fun UIntArray.single(predicate: (UInt) -> Boolean): UInt",
                  "fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T"
                ]
              },
              {
                "name": "singleOrNull",
                "description": [
                  "Returns single element, or null if the array is empty or has more than one element.",
                  "Returns the single element matching the given predicate, or null if element was not found or more than one element was found."
                ],
                "code": [
                  "fun UIntArray.singleOrNull(): UInt?",
                  "fun UIntArray.singleOrNull(    predicate: (UInt) -> Boolean): UInt?",
                  "fun <T> Iterable<T>.singleOrNull(    predicate: (T) -> Boolean): T?"
                ]
              },
              {
                "name": "slice",
                "description": [
                  "Returns a list containing elements at indices in the specified indices range.",
                  "Returns a list containing elements at specified indices."
                ],
                "code": [
                  "fun UIntArray.slice(indices: IntRange): List<UInt>",
                  "fun UIntArray.slice(indices: Iterable<Int>): List<UInt>"
                ]
              },
              {
                "name": "sliceArray",
                "description": [
                  "Returns an array containing elements of this array at specified indices.",
                  "Returns an array containing elements at indices in the specified indices range."
                ],
                "code": [
                  "fun UIntArray.sliceArray(indices: Collection<Int>): UIntArray",
                  "fun UIntArray.sliceArray(indices: IntRange): UIntArray"
                ]
              },
              {
                "name": "sort",
                "description": [
                  "Sorts the array in-place.",
                  "Sorts a range in the array in-place."
                ],
                "code": [
                  "fun UIntArray.sort()",
                  "fun UIntArray.sort(fromIndex: Int = 0, toIndex: Int = size)"
                ]
              },
              {
                "name": "sortDescending",
                "description": [
                  "Sorts elements in the array in-place descending according to their natural sort order.",
                  "Sorts elements of the array in the specified range in-place.\nThe elements are sorted descending according to their natural sort order."
                ],
                "code": [
                  "fun UIntArray.sortDescending()",
                  "fun UIntArray.sortDescending(fromIndex: Int, toIndex: Int)"
                ]
              },
              {
                "name": "sorted",
                "description": [
                  "Returns a list of all elements sorted according to their natural sort order."
                ],
                "code": ["fun UIntArray.sorted(): List<UInt>"]
              },
              {
                "name": "sortedArray",
                "description": [
                  "Returns an array with all elements of this array sorted according to their natural sort order."
                ],
                "code": ["fun UIntArray.sortedArray(): UIntArray"]
              },
              {
                "name": "sortedArrayDescending",
                "description": [
                  "Returns an array with all elements of this array sorted descending according to their natural sort order."
                ],
                "code": ["fun UIntArray.sortedArrayDescending(): UIntArray"]
              },
              {
                "name": "sortedBy",
                "description": [
                  "Returns a list of all elements sorted according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <T, R : Comparable<R>> Iterable<T>.sortedBy(    selector: (T) -> R?): List<T>"
                ]
              },
              {
                "name": "sortedByDescending",
                "description": [
                  "Returns a list of all elements sorted descending according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(    selector: (T) -> R?): List<T>"
                ]
              },
              {
                "name": "sortedDescending",
                "description": [
                  "Returns a list of all elements sorted descending according to their natural sort order."
                ],
                "code": ["fun UIntArray.sortedDescending(): List<UInt>"]
              },
              {
                "name": "sortedWith",
                "description": [
                  "Returns a list of all elements sorted according to the specified comparator."
                ],
                "code": [
                  "fun <T> Iterable<T>.sortedWith(    comparator: Comparator<in T>): List<T>"
                ]
              },
              {
                "name": "subtract",
                "description": [
                  "Returns a set containing all elements that are contained by this collection and not contained by the specified collection."
                ],
                "code": [
                  "infix fun <T> Iterable<T>.subtract(    other: Iterable<T>): Set<T>"
                ]
              },
              {
                "name": "sum",
                "description": [
                  "Returns the sum of all elements in the array."
                ],
                "code": ["fun UIntArray.sum(): UInt"]
              },
              {
                "name": "sumBy",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array.",
                  "Returns the sum of all values produced by selector function applied to each element in the collection."
                ],
                "code": [
                  "fun UIntArray.sumBy(selector: (UInt) -> UInt): UInt",
                  "fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int"
                ]
              },
              {
                "name": "sumByDouble",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array.",
                  "Returns the sum of all values produced by selector function applied to each element in the collection."
                ],
                "code": [
                  "fun UIntArray.sumByDouble(selector: (UInt) -> Double): Double",
                  "fun <T> Iterable<T>.sumByDouble(    selector: (T) -> Double): Double"
                ]
              },
              {
                "name": "sumOf",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array.",
                  "Returns the sum of all values produced by selector function applied to each element in the collection."
                ],
                "code": [
                  "fun UIntArray.sumOf(selector: (UInt) -> Double): Double",
                  "fun UIntArray.sumOf(selector: (UInt) -> Int): Int",
                  "fun UIntArray.sumOf(selector: (UInt) -> Long): Long",
                  "fun UIntArray.sumOf(selector: (UInt) -> UInt): UInt",
                  "fun UIntArray.sumOf(selector: (UInt) -> ULong): ULong",
                  "fun UIntArray.sumOf(    selector: (UInt) -> BigDecimal): BigDecimal",
                  "fun UIntArray.sumOf(    selector: (UInt) -> BigInteger): BigInteger",
                  "fun <T> Iterable<T>.sumOf(selector: (T) -> Double): Double",
                  "fun <T> Iterable<T>.sumOf(selector: (T) -> Int): Int",
                  "fun <T> Iterable<T>.sumOf(selector: (T) -> Long): Long",
                  "fun <T> Iterable<T>.sumOf(selector: (T) -> UInt): UInt",
                  "fun <T> Iterable<T>.sumOf(selector: (T) -> ULong): ULong"
                ]
              },
              {
                "name": "take",
                "description": ["Returns a list containing first n elements."],
                "code": ["fun UIntArray.take(n: Int): List<UInt>"]
              },
              {
                "name": "takeLast",
                "description": ["Returns a list containing last n elements."],
                "code": ["fun UIntArray.takeLast(n: Int): List<UInt>"]
              },
              {
                "name": "takeLastWhile",
                "description": [
                  "Returns a list containing last elements satisfying the given predicate."
                ],
                "code": [
                  "fun UIntArray.takeLastWhile(    predicate: (UInt) -> Boolean): List<UInt>"
                ]
              },
              {
                "name": "takeWhile",
                "description": [
                  "Returns a list containing first elements satisfying the given predicate."
                ],
                "code": [
                  "fun UIntArray.takeWhile(    predicate: (UInt) -> Boolean): List<UInt>",
                  "fun <T> Iterable<T>.takeWhile(    predicate: (T) -> Boolean): List<T>"
                ]
              },
              {
                "name": "toCollection",
                "description": [
                  "Appends all elements to the given destination collection."
                ],
                "code": [
                  "fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(    destination: C): C"
                ]
              },
              {
                "name": "toCValues",
                "description": [],
                "code": ["fun UIntArray.toCValues(): CValues<UIntVar>"]
              },
              {
                "name": "toHashSet",
                "description": ["Returns a new HashSet of all elements."],
                "code": ["fun <T> Iterable<T>.toHashSet(): HashSet<T>"]
              },
              {
                "name": "toIntArray",
                "description": [
                  "Returns an array of type IntArray, which is a copy of this array where each element is a signed reinterpretation\nof the corresponding element of this array."
                ],
                "code": ["fun UIntArray.toIntArray(): IntArray"]
              },
              {
                "name": "toList",
                "description": ["Returns a List containing all elements."],
                "code": ["fun <T> Iterable<T>.toList(): List<T>"]
              },
              {
                "name": "toMutableSet",
                "description": [
                  "Returns a new MutableSet containing all distinct elements from the given collection."
                ],
                "code": ["fun <T> Iterable<T>.toMutableSet(): MutableSet<T>"]
              },
              {
                "name": "toSet",
                "description": ["Returns a Set of all elements."],
                "code": ["fun <T> Iterable<T>.toSet(): Set<T>"]
              },
              {
                "name": "toTypedArray",
                "description": [
                  "Returns a typed object array containing all of the elements of this primitive array."
                ],
                "code": ["fun UIntArray.toTypedArray(): Array<UInt>"]
              },
              {
                "name": "toUIntArray",
                "description": [
                  "Returns an array of UInt containing all of the elements of this collection."
                ],
                "code": ["fun Collection<UInt>.toUIntArray(): UIntArray"]
              },
              {
                "name": "union",
                "description": [
                  "Returns a set containing all distinct elements from both collections."
                ],
                "code": [
                  "infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T>"
                ]
              },
              {
                "name": "windowed",
                "description": [
                  "Returns a list of snapshots of the window of the given size\nsliding along this collection with the given step, where each\nsnapshot is a list.",
                  "Returns a list of results of applying the given transform function to\nan each list representing a view over the window of the given size\nsliding along this collection with the given step."
                ],
                "code": [
                  "fun <T> Iterable<T>.windowed(    size: Int,     step: Int = 1,     partialWindows: Boolean = false): List<List<T>>",
                  "fun <T, R> Iterable<T>.windowed(    size: Int,     step: Int = 1,     partialWindows: Boolean = false,     transform: (List<T>) -> R): List<R>"
                ]
              },
              {
                "name": "withIndex",
                "description": [
                  "Returns a lazy Iterable that wraps each element of the original array\ninto an IndexedValue containing the index of that element and the element itself."
                ],
                "code": [
                  "fun UIntArray.withIndex(): Iterable<IndexedValue<UInt>>"
                ]
              },
              {
                "name": "zip",
                "description": [
                  "Returns a list of pairs built from the elements of this array and the other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of pairs built from the elements of this collection and other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other collection with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest array.",
                  "Returns a list of pairs built from the elements of this collection and the other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this collection and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of pairs built from the elements of this collection and other collection with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this collection and the other collection with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection."
                ],
                "code": [
                  "infix fun <R> UIntArray.zip(    other: Array<out R>): List<Pair<UInt, R>>",
                  "infix fun UIntArray.zip(    other: UIntArray): List<Pair<UInt, UInt>>",
                  "fun <R, V> UIntArray.zip(    other: Array<out R>,     transform: (a: UInt, b: R) -> V): List<V>",
                  "infix fun <R> UIntArray.zip(    other: Iterable<R>): List<Pair<UInt, R>>",
                  "fun <R, V> UIntArray.zip(    other: Iterable<R>,     transform: (a: UInt, b: R) -> V): List<V>",
                  "fun <V> UIntArray.zip(    other: UIntArray,     transform: (a: UInt, b: UInt) -> V): List<V>",
                  "infix fun <T, R> Iterable<T>.zip(    other: Array<out R>): List<Pair<T, R>>",
                  "fun <T, R, V> Iterable<T>.zip(    other: Array<out R>,     transform: (a: T, b: R) -> V): List<V>",
                  "infix fun <T, R> Iterable<T>.zip(    other: Iterable<R>): List<Pair<T, R>>",
                  "fun <T, R, V> Iterable<T>.zip(    other: Iterable<R>,     transform: (a: T, b: R) -> V): List<V>"
                ]
              },
              {
                "name": "zipWithNext",
                "description": [
                  "Returns a list of pairs of each two adjacent elements in this collection.",
                  "Returns a list containing the results of applying the given transform function\nto an each pair of two adjacent elements in this collection."
                ],
                "code": [
                  "fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>>",
                  "fun <T, R> Iterable<T>.zipWithNext(    transform: (a: T, b: T) -> R): List<R>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "ULong",
        "description": [],
        "code": ["class ULong : Comparable<ULong>"],
        "url": "-u-long/index.html",
        "subcategories": [
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "and",
                "description": [
                  "Performs a bitwise AND operation between the two values."
                ],
                "code": ["infix fun and(other: ULong): ULong"]
              },
              {
                "name": "compareTo",
                "description": [
                  "Compares this value with the specified value for order.\nReturns zero if this value is equal to the specified other value, a negative number if it's less than other,\nor a positive number if it's greater than other."
                ],
                "code": [
                  "operator fun compareTo(other: UByte): Int",
                  "operator fun compareTo(other: UShort): Int",
                  "operator fun compareTo(other: UInt): Int",
                  "operator fun compareTo(other: ULong): Int"
                ]
              },
              {
                "name": "dec",
                "description": ["Returns this value decremented by one."],
                "code": ["operator fun dec(): ULong"]
              },
              {
                "name": "div",
                "description": [
                  "Divides this value by the other value, truncating the result to an integer that is closer to zero."
                ],
                "code": [
                  "operator fun div(other: UByte): ULong",
                  "operator fun div(other: UShort): ULong",
                  "operator fun div(other: UInt): ULong",
                  "operator fun div(other: ULong): ULong"
                ]
              },
              {
                "name": "floorDiv",
                "description": [
                  "Divides this value by the other value, flooring the result to an integer that is closer to negative infinity."
                ],
                "code": [
                  "fun floorDiv(other: UByte): ULong",
                  "fun floorDiv(other: UShort): ULong",
                  "fun floorDiv(other: UInt): ULong",
                  "fun floorDiv(other: ULong): ULong"
                ]
              },
              {
                "name": "inc",
                "description": ["Returns this value incremented by one."],
                "code": ["operator fun inc(): ULong"]
              },
              {
                "name": "inv",
                "description": ["Inverts the bits in this value."],
                "code": ["fun inv(): ULong"]
              },
              {
                "name": "minus",
                "description": ["Subtracts the other value from this value."],
                "code": [
                  "operator fun minus(other: UByte): ULong",
                  "operator fun minus(other: UShort): ULong",
                  "operator fun minus(other: UInt): ULong",
                  "operator fun minus(other: ULong): ULong"
                ]
              },
              {
                "name": "mod",
                "description": [
                  "Calculates the remainder of flooring division of this value (dividend) by the other value (divisor)."
                ],
                "code": [
                  "fun mod(other: UByte): UByte",
                  "fun mod(other: UShort): UShort",
                  "fun mod(other: UInt): UInt",
                  "fun mod(other: ULong): ULong"
                ]
              },
              {
                "name": "or",
                "description": [
                  "Performs a bitwise OR operation between the two values."
                ],
                "code": ["infix fun or(other: ULong): ULong"]
              },
              {
                "name": "plus",
                "description": ["Adds the other value to this value."],
                "code": [
                  "operator fun plus(other: UByte): ULong",
                  "operator fun plus(other: UShort): ULong",
                  "operator fun plus(other: UInt): ULong",
                  "operator fun plus(other: ULong): ULong"
                ]
              },
              {
                "name": "rangeTo",
                "description": [
                  "Creates a range from this value to the specified other value."
                ],
                "code": ["operator fun rangeTo(other: ULong): ULongRange"]
              },
              {
                "name": "rangeUntil",
                "description": [
                  "Creates a range from this value up to but excluding the specified other value."
                ],
                "code": ["operator fun rangeUntil(other: ULong): ULongRange"]
              },
              {
                "name": "rem",
                "description": [
                  "Calculates the remainder of truncating division of this value (dividend) by the other value (divisor)."
                ],
                "code": [
                  "operator fun rem(other: UByte): ULong",
                  "operator fun rem(other: UShort): ULong",
                  "operator fun rem(other: UInt): ULong",
                  "operator fun rem(other: ULong): ULong"
                ]
              },
              {
                "name": "shl",
                "description": [
                  "Shifts this value left by the bitCount number of bits."
                ],
                "code": ["infix fun shl(bitCount: Int): ULong"]
              },
              {
                "name": "shr",
                "description": [
                  "Shifts this value right by the bitCount number of bits, filling the leftmost bits with zeros."
                ],
                "code": ["infix fun shr(bitCount: Int): ULong"]
              },
              {
                "name": "times",
                "description": ["Multiplies this value by the other value."],
                "code": [
                  "operator fun times(other: UByte): ULong",
                  "operator fun times(other: UShort): ULong",
                  "operator fun times(other: UInt): ULong",
                  "operator fun times(other: ULong): ULong"
                ]
              },
              {
                "name": "toByte",
                "description": ["Converts this ULong value to Byte."],
                "code": ["fun toByte(): Byte"]
              },
              {
                "name": "toDouble",
                "description": ["Converts this ULong value to Double."],
                "code": ["fun toDouble(): Double"]
              },
              {
                "name": "toFloat",
                "description": ["Converts this ULong value to Float."],
                "code": ["fun toFloat(): Float"]
              },
              {
                "name": "toInt",
                "description": ["Converts this ULong value to Int."],
                "code": ["fun toInt(): Int"]
              },
              {
                "name": "toLong",
                "description": ["Converts this ULong value to Long."],
                "code": ["fun toLong(): Long"]
              },
              {
                "name": "toShort",
                "description": ["Converts this ULong value to Short."],
                "code": ["fun toShort(): Short"]
              },
              {
                "name": "toString",
                "description": [
                  "Returns a string representation of the object."
                ],
                "code": ["fun toString(): String"]
              },
              {
                "name": "toUByte",
                "description": ["Converts this ULong value to UByte."],
                "code": ["fun toUByte(): UByte"]
              },
              {
                "name": "toUInt",
                "description": ["Converts this ULong value to UInt."],
                "code": ["fun toUInt(): UInt"]
              },
              {
                "name": "toULong",
                "description": ["Returns this value."],
                "code": ["fun toULong(): ULong"]
              },
              {
                "name": "toUShort",
                "description": ["Converts this ULong value to UShort."],
                "code": ["fun toUShort(): UShort"]
              },
              {
                "name": "xor",
                "description": [
                  "Performs a bitwise XOR operation between the two values."
                ],
                "code": ["infix fun xor(other: ULong): ULong"]
              }
            ]
          },
          {
            "name": "Companion Object Properties",
            "declarations": [
              {
                "name": "MAX_VALUE",
                "description": [
                  "A constant holding the maximum value an instance of ULong can have."
                ],
                "code": ["const val MAX_VALUE: ULong"]
              },
              {
                "name": "MIN_VALUE",
                "description": [
                  "A constant holding the minimum value an instance of ULong can have."
                ],
                "code": ["const val MIN_VALUE: ULong"]
              },
              {
                "name": "SIZE_BITS",
                "description": [
                  "The number of bits used to represent an instance of ULong in a binary form."
                ],
                "code": ["const val SIZE_BITS: Int"]
              },
              {
                "name": "SIZE_BYTES",
                "description": [
                  "The number of bytes used to represent an instance of ULong in a binary form."
                ],
                "code": ["const val SIZE_BYTES: Int"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "coerceAtLeast",
                "description": [
                  "Ensures that this value is not less than the specified minimumValue."
                ],
                "code": [
                  "fun ULong.coerceAtLeast(minimumValue: ULong): ULong",
                  "fun <T : Comparable<T>> T.coerceAtLeast(minimumValue: T): T"
                ]
              },
              {
                "name": "coerceAtMost",
                "description": [
                  "Ensures that this value is not greater than the specified maximumValue."
                ],
                "code": [
                  "fun ULong.coerceAtMost(maximumValue: ULong): ULong",
                  "fun <T : Comparable<T>> T.coerceAtMost(maximumValue: T): T"
                ]
              },
              {
                "name": "coerceIn",
                "description": [
                  "Ensures that this value lies in the specified range minimumValue..maximumValue.",
                  "Ensures that this value lies in the specified range."
                ],
                "code": [
                  "fun ULong.coerceIn(    minimumValue: ULong,     maximumValue: ULong): ULong",
                  "fun <T : Comparable<T>> T.coerceIn(    minimumValue: T?,     maximumValue: T?): T",
                  "fun ULong.coerceIn(range: ClosedRange<ULong>): ULong",
                  "fun <T : Comparable<T>> T.coerceIn(    range: ClosedFloatingPointRange<T>): T",
                  "fun <T : Comparable<T>> T.coerceIn(range: ClosedRange<T>): T"
                ]
              },
              {
                "name": "compareTo",
                "description": [
                  "Compares this object with the specified object for order. Returns zero if this object is equal\nto the specified other object, a negative number if it's less than other, or a positive number\nif it's greater than other."
                ],
                "code": ["infix fun <T> Comparable<T>.compareTo(other: T): Int"]
              },
              {
                "name": "convert",
                "description": [],
                "code": ["fun <R : Any> ULong.convert(): R"]
              },
              {
                "name": "countLeadingZeroBits",
                "description": [
                  "Counts the number of consecutive most significant bits that are zero in the binary representation of this ULong number."
                ],
                "code": ["fun ULong.countLeadingZeroBits(): Int"]
              },
              {
                "name": "countOneBits",
                "description": [
                  "Counts the number of set bits in the binary representation of this ULong number."
                ],
                "code": ["fun ULong.countOneBits(): Int"]
              },
              {
                "name": "countTrailingZeroBits",
                "description": [
                  "Counts the number of consecutive least significant bits that are zero in the binary representation of this ULong number."
                ],
                "code": ["fun ULong.countTrailingZeroBits(): Int"]
              },
              {
                "name": "downTo",
                "description": [
                  "Returns a progression from this value down to the specified to value with the step -1."
                ],
                "code": ["infix fun ULong.downTo(to: ULong): ULongProgression"]
              },
              {
                "name": "rangeTo",
                "description": [
                  "Creates a range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeTo(    that: T): ClosedRange<T>"
                ]
              },
              {
                "name": "rangeUntil",
                "description": [
                  "Creates an open-ended range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeUntil(    that: T): OpenEndRange<T>"
                ]
              },
              {
                "name": "rotateLeft",
                "description": [
                  "Rotates the binary representation of this ULong number left by the specified bitCount number of bits.\nThe most significant bits pushed out from the left side reenter the number as the least significant bits on the right side."
                ],
                "code": ["fun ULong.rotateLeft(bitCount: Int): ULong"]
              },
              {
                "name": "rotateRight",
                "description": [
                  "Rotates the binary representation of this ULong number right by the specified bitCount number of bits.\nThe least significant bits pushed out from the right side reenter the number as the most significant bits on the left side."
                ],
                "code": ["fun ULong.rotateRight(bitCount: Int): ULong"]
              },
              {
                "name": "takeHighestOneBit",
                "description": [
                  "Returns a number having a single bit set in the position of the most significant set bit of this ULong number,\nor zero, if this number is zero."
                ],
                "code": ["fun ULong.takeHighestOneBit(): ULong"]
              },
              {
                "name": "takeLowestOneBit",
                "description": [
                  "Returns a number having a single bit set in the position of the least significant set bit of this ULong number,\nor zero, if this number is zero."
                ],
                "code": ["fun ULong.takeLowestOneBit(): ULong"]
              },
              {
                "name": "toHexString",
                "description": [
                  "Formats this ULong value using the specified format."
                ],
                "code": [
                  "fun ULong.toHexString(    format: HexFormat = HexFormat.Default): String"
                ]
              },
              {
                "name": "toString",
                "description": [
                  "Returns a string representation of this Long value in the specified radix."
                ],
                "code": ["fun ULong.toString(radix: Int): String"]
              },
              {
                "name": "until",
                "description": [
                  "Returns a range from this value up to but excluding the specified to value."
                ],
                "code": ["infix fun ULong.until(to: ULong): ULongRange"]
              }
            ]
          }
        ]
      },
      {
        "name": "ULongArray",
        "description": [],
        "code": ["class ULongArray : Collection<ULong>"],
        "url": "-u-long-array/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Creates a new array of the specified size, with all elements initialized to zero."
                ],
                "code": ["ULongArray(size: Int)"]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "size",
                "description": ["Returns the number of elements in the array."],
                "code": ["val size: Int"]
              }
            ]
          },
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "contains",
                "description": [],
                "code": ["fun contains(element: ULong): Boolean"]
              },
              {
                "name": "containsAll",
                "description": [],
                "code": [
                  "fun containsAll(elements: Collection<ULong>): Boolean"
                ]
              },
              {
                "name": "get",
                "description": [
                  "Returns the array element at the given index. This method can be called using the index operator."
                ],
                "code": ["operator fun get(index: Int): ULong"]
              },
              {
                "name": "isEmpty",
                "description": [],
                "code": ["fun isEmpty(): Boolean"]
              },
              {
                "name": "iterator",
                "description": [
                  "Creates an iterator over the elements of the array."
                ],
                "code": ["operator fun iterator(): Iterator<ULong>"]
              },
              {
                "name": "set",
                "description": [
                  "Sets the element at the given index to the given value. This method can be called using the index operator."
                ],
                "code": ["operator fun set(index: Int, value: ULong)"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "indices",
                "description": [
                  "Returns the range of valid indices for the array."
                ],
                "code": ["val ULongArray.indices: IntRange"]
              },
              {
                "name": "lastIndex",
                "description": ["Returns the last valid index for the array."],
                "code": ["val ULongArray.lastIndex: Int"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "all",
                "description": [
                  "Returns true if all elements match the given predicate."
                ],
                "code": [
                  "fun ULongArray.all(predicate: (ULong) -> Boolean): Boolean",
                  "fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean"
                ]
              },
              {
                "name": "any",
                "description": [
                  "Returns true if array has at least one element.",
                  "Returns true if at least one element matches the given predicate."
                ],
                "code": [
                  "fun ULongArray.any(): Boolean",
                  "fun ULongArray.any(predicate: (ULong) -> Boolean): Boolean",
                  "fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean"
                ]
              },
              {
                "name": "asIterable",
                "description": ["Returns this collection as an Iterable."],
                "code": ["fun <T> Iterable<T>.asIterable(): Iterable<T>"]
              },
              {
                "name": "asLongArray",
                "description": [
                  "Returns an array of type LongArray, which is a view of this array where each element is a signed reinterpretation\nof the corresponding element of this array."
                ],
                "code": ["fun ULongArray.asLongArray(): LongArray"]
              },
              {
                "name": "asSequence",
                "description": [
                  "Creates a Sequence instance that wraps the original collection returning its elements when being iterated."
                ],
                "code": ["fun <T> Iterable<T>.asSequence(): Sequence<T>"]
              },
              {
                "name": "associate",
                "description": [
                  "Returns a Map containing key-value pairs provided by transform function\napplied to elements of the given collection."
                ],
                "code": [
                  "fun <T, K, V> Iterable<T>.associate(    transform: (T) -> Pair<K, V>): Map<K, V>"
                ]
              },
              {
                "name": "associateBy",
                "description": [
                  "Returns a Map containing the elements from the given collection indexed by the key\nreturned from keySelector function applied to each element.",
                  "Returns a Map containing the values provided by valueTransform and indexed by keySelector functions applied to elements of the given collection."
                ],
                "code": [
                  "fun <T, K> Iterable<T>.associateBy(    keySelector: (T) -> K): Map<K, T>",
                  "fun <T, K, V> Iterable<T>.associateBy(    keySelector: (T) -> K,     valueTransform: (T) -> V): Map<K, V>"
                ]
              },
              {
                "name": "associateByTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function applied to each element of the given collection\nand value is the element itself.",
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function and\nand value is provided by the valueTransform function applied to elements of the given collection."
                ],
                "code": [
                  "fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(    destination: M,     keySelector: (T) -> K): M",
                  "fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(    destination: M,     keySelector: (T) -> K,     valueTransform: (T) -> V): M"
                ]
              },
              {
                "name": "associateTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs\nprovided by transform function applied to each element of the given collection."
                ],
                "code": [
                  "fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(    destination: M,     transform: (T) -> Pair<K, V>): M"
                ]
              },
              {
                "name": "associateWith",
                "description": [
                  "Returns a Map where keys are elements from the given array and values are\nproduced by the valueSelector function applied to each element.",
                  "Returns a Map where keys are elements from the given collection and values are\nproduced by the valueSelector function applied to each element."
                ],
                "code": [
                  "fun <V> ULongArray.associateWith(    valueSelector: (ULong) -> V): Map<ULong, V>",
                  "fun <K, V> Iterable<K>.associateWith(    valueSelector: (K) -> V): Map<K, V>"
                ]
              },
              {
                "name": "associateWithTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs for each element of the given array,\nwhere key is the element itself and value is provided by the valueSelector function applied to that key.",
                  "Populates and returns the destination mutable map with key-value pairs for each element of the given collection,\nwhere key is the element itself and value is provided by the valueSelector function applied to that key."
                ],
                "code": [
                  "fun <V, M : MutableMap<in ULong, in V>> ULongArray.associateWithTo(    destination: M,     valueSelector: (ULong) -> V): M",
                  "fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(    destination: M,     valueSelector: (K) -> V): M"
                ]
              },
              {
                "name": "binarySearch",
                "description": [
                  "Searches the array or the range of the array for the provided element using the binary search algorithm.\nThe array is expected to be sorted, otherwise the result is undefined."
                ],
                "code": [
                  "fun ULongArray.binarySearch(    element: ULong,     fromIndex: Int = 0,     toIndex: Int = size): Int"
                ]
              },
              {
                "name": "chunked",
                "description": [
                  "Splits this collection into a list of lists each not exceeding the given size.",
                  "Splits this collection into several lists each not exceeding the given size\nand applies the given transform function to an each."
                ],
                "code": [
                  "fun <T> Iterable<T>.chunked(size: Int): List<List<T>>",
                  "fun <T, R> Iterable<T>.chunked(    size: Int,     transform: (List<T>) -> R): List<R>"
                ]
              },
              {
                "name": "component1",
                "description": ["Returns 1st element from the array."],
                "code": ["operator fun ULongArray.component1(): ULong"]
              },
              {
                "name": "component2",
                "description": ["Returns 2nd element from the array."],
                "code": ["operator fun ULongArray.component2(): ULong"]
              },
              {
                "name": "component3",
                "description": ["Returns 3rd element from the array."],
                "code": ["operator fun ULongArray.component3(): ULong"]
              },
              {
                "name": "component4",
                "description": ["Returns 4th element from the array."],
                "code": ["operator fun ULongArray.component4(): ULong"]
              },
              {
                "name": "component5",
                "description": ["Returns 5th element from the array."],
                "code": ["operator fun ULongArray.component5(): ULong"]
              },
              {
                "name": "contains",
                "description": [
                  "Returns true if element is found in the collection."
                ],
                "code": [
                  "operator fun <T> Iterable<T>.contains(element: T): Boolean"
                ]
              },
              {
                "name": "containsAll",
                "description": [
                  "Checks if all elements in the specified collection are contained in this collection."
                ],
                "code": [
                  "fun <T> Collection<T>.containsAll(    elements: Collection<T>): Boolean"
                ]
              },
              {
                "name": "contentEquals",
                "description": [
                  "Returns true if the two specified arrays are structurally equal to one another,\ni.e. contain the same number of the same elements in the same order."
                ],
                "code": [
                  "infix fun ULongArray?.contentEquals(    other: ULongArray?): Boolean",
                  "infix fun ULongArray.contentEquals(    other: ULongArray): Boolean"
                ]
              },
              {
                "name": "contentHashCode",
                "description": [
                  "Returns a hash code based on the contents of this array as if it is List."
                ],
                "code": [
                  "fun ULongArray?.contentHashCode(): Int",
                  "fun ULongArray.contentHashCode(): Int"
                ]
              },
              {
                "name": "contentToString",
                "description": [
                  "Returns a string representation of the contents of the specified array as if it is List."
                ],
                "code": [
                  "fun ULongArray?.contentToString(): String",
                  "fun ULongArray.contentToString(): String"
                ]
              },
              {
                "name": "copyInto",
                "description": [
                  "Copies this array or its subrange into the destination array and returns that array."
                ],
                "code": [
                  "fun ULongArray.copyInto(    destination: ULongArray,     destinationOffset: Int = 0,     startIndex: Int = 0,     endIndex: Int = size): ULongArray"
                ]
              },
              {
                "name": "copyOf",
                "description": [
                  "Returns new array which is a copy of the original array.",
                  "Returns new array which is a copy of the original array, resized to the given newSize.\nThe copy is either truncated or padded at the end with zero values if necessary."
                ],
                "code": [
                  "fun ULongArray.copyOf(): ULongArray",
                  "fun ULongArray.copyOf(newSize: Int): ULongArray"
                ]
              },
              {
                "name": "copyOfRange",
                "description": [
                  "Returns a new array which is a copy of the specified range of the original array."
                ],
                "code": [
                  "fun ULongArray.copyOfRange(    fromIndex: Int,     toIndex: Int): ULongArray"
                ]
              },
              {
                "name": "count",
                "description": [
                  "Returns the number of elements matching the given predicate."
                ],
                "code": [
                  "fun ULongArray.count(predicate: (ULong) -> Boolean): Int",
                  "fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int"
                ]
              },
              {
                "name": "distinct",
                "description": [
                  "Returns a list containing only distinct elements from the given collection."
                ],
                "code": ["fun <T> Iterable<T>.distinct(): List<T>"]
              },
              {
                "name": "distinctBy",
                "description": [
                  "Returns a list containing only elements from the given collection\nhaving distinct keys returned by the given selector function."
                ],
                "code": [
                  "fun <T, K> Iterable<T>.distinctBy(    selector: (T) -> K): List<T>"
                ]
              },
              {
                "name": "drop",
                "description": [
                  "Returns a list containing all elements except first n elements."
                ],
                "code": ["fun ULongArray.drop(n: Int): List<ULong>"]
              },
              {
                "name": "dropLast",
                "description": [
                  "Returns a list containing all elements except last n elements."
                ],
                "code": ["fun ULongArray.dropLast(n: Int): List<ULong>"]
              },
              {
                "name": "dropLastWhile",
                "description": [
                  "Returns a list containing all elements except last elements that satisfy the given predicate."
                ],
                "code": [
                  "fun ULongArray.dropLastWhile(    predicate: (ULong) -> Boolean): List<ULong>"
                ]
              },
              {
                "name": "dropWhile",
                "description": [
                  "Returns a list containing all elements except first elements that satisfy the given predicate."
                ],
                "code": [
                  "fun ULongArray.dropWhile(    predicate: (ULong) -> Boolean): List<ULong>",
                  "fun <T> Iterable<T>.dropWhile(    predicate: (T) -> Boolean): List<T>"
                ]
              },
              {
                "name": "elementAtOrElse",
                "description": [
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array.",
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this collection."
                ],
                "code": [
                  "fun ULongArray.elementAtOrElse(    index: Int,     defaultValue: (Int) -> ULong): ULong",
                  "fun <T> Iterable<T>.elementAtOrElse(    index: Int,     defaultValue: (Int) -> T): T"
                ]
              },
              {
                "name": "elementAtOrNull",
                "description": [
                  "Returns an element at the given index or null if the index is out of bounds of this array."
                ],
                "code": ["fun ULongArray.elementAtOrNull(index: Int): ULong?"]
              },
              {
                "name": "fill",
                "description": [
                  "Fills this array or its subrange with the specified element value."
                ],
                "code": [
                  "fun ULongArray.fill(    element: ULong,     fromIndex: Int = 0,     toIndex: Int = size)"
                ]
              },
              {
                "name": "filter",
                "description": [
                  "Returns a list containing only elements matching the given predicate."
                ],
                "code": [
                  "fun ULongArray.filter(    predicate: (ULong) -> Boolean): List<ULong>",
                  "fun <T> Iterable<T>.filter(    predicate: (T) -> Boolean): List<T>"
                ]
              },
              {
                "name": "filterIndexed",
                "description": [
                  "Returns a list containing only elements matching the given predicate."
                ],
                "code": [
                  "fun ULongArray.filterIndexed(    predicate: (index: Int, ULong) -> Boolean): List<ULong>",
                  "fun <T> Iterable<T>.filterIndexed(    predicate: (index: Int, T) -> Boolean): List<T>"
                ]
              },
              {
                "name": "filterIndexedTo",
                "description": [
                  "Appends all elements matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in ULong>> ULongArray.filterIndexedTo(    destination: C,     predicate: (index: Int, ULong) -> Boolean): C",
                  "fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(    destination: C,     predicate: (index: Int, T) -> Boolean): C"
                ]
              },
              {
                "name": "filterIsInstance",
                "description": [
                  "Returns a list containing all elements that are instances of specified type parameter R."
                ],
                "code": ["fun <R> Iterable<*>.filterIsInstance(): List<R>"]
              },
              {
                "name": "filterIsInstanceTo",
                "description": [
                  "Appends all elements that are instances of specified type parameter R to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(    destination: C): C"
                ]
              },
              {
                "name": "filterNot",
                "description": [
                  "Returns a list containing all elements not matching the given predicate."
                ],
                "code": [
                  "fun ULongArray.filterNot(    predicate: (ULong) -> Boolean): List<ULong>",
                  "fun <T> Iterable<T>.filterNot(    predicate: (T) -> Boolean): List<T>"
                ]
              },
              {
                "name": "filterNotNull",
                "description": [
                  "Returns a list containing all elements that are not null."
                ],
                "code": ["fun <T : Any> Iterable<T?>.filterNotNull(): List<T>"]
              },
              {
                "name": "filterNotNullTo",
                "description": [
                  "Appends all elements that are not null to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(    destination: C): C"
                ]
              },
              {
                "name": "filterNotTo",
                "description": [
                  "Appends all elements not matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in ULong>> ULongArray.filterNotTo(    destination: C,     predicate: (ULong) -> Boolean): C",
                  "fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(    destination: C,     predicate: (T) -> Boolean): C"
                ]
              },
              {
                "name": "filterTo",
                "description": [
                  "Appends all elements matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in ULong>> ULongArray.filterTo(    destination: C,     predicate: (ULong) -> Boolean): C",
                  "fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(    destination: C,     predicate: (T) -> Boolean): C"
                ]
              },
              {
                "name": "find",
                "description": [
                  "Returns the first element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun ULongArray.find(predicate: (ULong) -> Boolean): ULong?",
                  "fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T?"
                ]
              },
              {
                "name": "findLast",
                "description": [
                  "Returns the last element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun ULongArray.findLast(    predicate: (ULong) -> Boolean): ULong?",
                  "fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T?"
                ]
              },
              {
                "name": "first",
                "description": [
                  "Returns the first element.",
                  "Returns the first element matching the given predicate."
                ],
                "code": [
                  "fun ULongArray.first(): ULong",
                  "fun ULongArray.first(predicate: (ULong) -> Boolean): ULong",
                  "fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T"
                ]
              },
              {
                "name": "firstNotNullOf",
                "description": [
                  "Returns the first non-null value produced by transform function being applied to elements of this collection in iteration order,\nor throws NoSuchElementException if no non-null value was produced."
                ],
                "code": [
                  "fun <T, R : Any> Iterable<T>.firstNotNullOf(    transform: (T) -> R?): R"
                ]
              },
              {
                "name": "firstNotNullOfOrNull",
                "description": [
                  "Returns the first non-null value produced by transform function being applied to elements of this collection in iteration order,\nor null if no non-null value was produced."
                ],
                "code": [
                  "fun <T, R : Any> Iterable<T>.firstNotNullOfOrNull(    transform: (T) -> R?): R?"
                ]
              },
              {
                "name": "firstOrNull",
                "description": [
                  "Returns the first element, or null if the array is empty.",
                  "Returns the first element matching the given predicate, or null if element was not found."
                ],
                "code": [
                  "fun ULongArray.firstOrNull(): ULong?",
                  "fun ULongArray.firstOrNull(    predicate: (ULong) -> Boolean): ULong?",
                  "fun <T> Iterable<T>.firstOrNull(    predicate: (T) -> Boolean): T?"
                ]
              },
              {
                "name": "flatMap",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element of original array.",
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element of original collection."
                ],
                "code": [
                  "fun <R> ULongArray.flatMap(    transform: (ULong) -> Iterable<R>): List<R>",
                  "fun <T, R> Iterable<T>.flatMap(    transform: (T) -> Iterable<R>): List<R>",
                  "fun <T, R> Iterable<T>.flatMap(    transform: (T) -> Sequence<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexed",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element\nand its index in the original array.",
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element\nand its index in the original collection."
                ],
                "code": [
                  "fun <R> ULongArray.flatMapIndexed(    transform: (index: Int, ULong) -> Iterable<R>): List<R>",
                  "fun <T, R> Iterable<T>.flatMapIndexed(    transform: (index: Int, T) -> Iterable<R>): List<R>",
                  "fun <T, R> Iterable<T>.flatMapIndexed(    transform: (index: Int, T) -> Sequence<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexedTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each element\nand its index in the original array, to the given destination.",
                  "Appends all elements yielded from results of transform function being invoked on each element\nand its index in the original collection, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> ULongArray.flatMapIndexedTo(    destination: C,     transform: (index: Int, ULong) -> Iterable<R>): C",
                  "fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(    destination: C,     transform: (index: Int, T) -> Iterable<R>): C",
                  "fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(    destination: C,     transform: (index: Int, T) -> Sequence<R>): C"
                ]
              },
              {
                "name": "flatMapTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each element of original array, to the given destination.",
                  "Appends all elements yielded from results of transform function being invoked on each element of original collection, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> ULongArray.flatMapTo(    destination: C,     transform: (ULong) -> Iterable<R>): C",
                  "fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(    destination: C,     transform: (T) -> Iterable<R>): C",
                  "fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(    destination: C,     transform: (T) -> Sequence<R>): C"
                ]
              },
              {
                "name": "fold",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun <R> ULongArray.fold(    initial: R,     operation: (acc: R, ULong) -> R): R",
                  "fun <T, R> Iterable<T>.fold(    initial: R,     operation: (acc: R, T) -> R): R"
                ]
              },
              {
                "name": "foldIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element with its index in the original array.",
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element with its index in the original collection."
                ],
                "code": [
                  "fun <R> ULongArray.foldIndexed(    initial: R,     operation: (index: Int, acc: R, ULong) -> R): R",
                  "fun <T, R> Iterable<T>.foldIndexed(    initial: R,     operation: (index: Int, acc: R, T) -> R): R"
                ]
              },
              {
                "name": "foldRight",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun <R> ULongArray.foldRight(    initial: R,     operation: (ULong, acc: R) -> R): R"
                ]
              },
              {
                "name": "foldRightIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun <R> ULongArray.foldRightIndexed(    initial: R,     operation: (index: Int, ULong, acc: R) -> R): R"
                ]
              },
              {
                "name": "forEach",
                "description": ["Performs the given action on each element."],
                "code": [
                  "fun ULongArray.forEach(action: (ULong) -> Unit)",
                  "fun <T> Iterable<T>.forEach(action: (T) -> Unit)"
                ]
              },
              {
                "name": "forEachIndexed",
                "description": [
                  "Performs the given action on each element, providing sequential index with the element."
                ],
                "code": [
                  "fun ULongArray.forEachIndexed(    action: (index: Int, ULong) -> Unit)",
                  "fun <T> Iterable<T>.forEachIndexed(    action: (index: Int, T) -> Unit)"
                ]
              },
              {
                "name": "getOrElse",
                "description": [
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
                ],
                "code": [
                  "fun ULongArray.getOrElse(    index: Int,     defaultValue: (Int) -> ULong): ULong"
                ]
              },
              {
                "name": "getOrNull",
                "description": [
                  "Returns an element at the given index or null if the index is out of bounds of this array."
                ],
                "code": ["fun ULongArray.getOrNull(index: Int): ULong?"]
              },
              {
                "name": "groupBy",
                "description": [
                  "Groups elements of the original array by the key returned by the given keySelector function\napplied to each element and returns a map where each group key is associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original array\nby the key returned by the given keySelector function applied to the element\nand returns a map where each group key is associated with a list of corresponding values.",
                  "Groups elements of the original collection by the key returned by the given keySelector function\napplied to each element and returns a map where each group key is associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original collection\nby the key returned by the given keySelector function applied to the element\nand returns a map where each group key is associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K> ULongArray.groupBy(    keySelector: (ULong) -> K): Map<K, List<ULong>>",
                  "fun <K, V> ULongArray.groupBy(    keySelector: (ULong) -> K,     valueTransform: (ULong) -> V): Map<K, List<V>>",
                  "fun <T, K> Iterable<T>.groupBy(    keySelector: (T) -> K): Map<K, List<T>>",
                  "fun <T, K, V> Iterable<T>.groupBy(    keySelector: (T) -> K,     valueTransform: (T) -> V): Map<K, List<V>>"
                ]
              },
              {
                "name": "groupByTo",
                "description": [
                  "Groups elements of the original array by the key returned by the given keySelector function\napplied to each element and puts to the destination map each group key associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original array\nby the key returned by the given keySelector function applied to the element\nand puts to the destination map each group key associated with a list of corresponding values.",
                  "Groups elements of the original collection by the key returned by the given keySelector function\napplied to each element and puts to the destination map each group key associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original collection\nby the key returned by the given keySelector function applied to the element\nand puts to the destination map each group key associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K, M : MutableMap<in K, MutableList<ULong>>> ULongArray.groupByTo(    destination: M,     keySelector: (ULong) -> K): M",
                  "fun <K, V, M : MutableMap<in K, MutableList<V>>> ULongArray.groupByTo(    destination: M,     keySelector: (ULong) -> K,     valueTransform: (ULong) -> V): M",
                  "fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(    destination: M,     keySelector: (T) -> K): M",
                  "fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(    destination: M,     keySelector: (T) -> K,     valueTransform: (T) -> V): M"
                ]
              },
              {
                "name": "groupingBy",
                "description": [
                  "Creates a Grouping source from a collection to be used later with one of group-and-fold operations\nusing the specified keySelector function to extract a key from each element."
                ],
                "code": [
                  "fun <T, K> Iterable<T>.groupingBy(    keySelector: (T) -> K): Grouping<T, K>"
                ]
              },
              {
                "name": "ifEmpty",
                "description": [
                  "Returns this array if it's not empty\nor the result of calling defaultValue function if the array is empty."
                ],
                "code": [
                  "fun <C, R> C.ifEmpty(    defaultValue: () -> R): R where C : Array<*>, C : R"
                ]
              },
              {
                "name": "indexOf",
                "description": [
                  "Returns first index of element, or -1 if the array does not contain element.",
                  "Returns first index of element, or -1 if the collection does not contain element."
                ],
                "code": [
                  "fun ULongArray.indexOf(element: ULong): Int",
                  "fun <T> Iterable<T>.indexOf(element: T): Int"
                ]
              },
              {
                "name": "indexOfFirst",
                "description": [
                  "Returns index of the first element matching the given predicate, or -1 if the array does not contain such element.",
                  "Returns index of the first element matching the given predicate, or -1 if the collection does not contain such element."
                ],
                "code": [
                  "fun ULongArray.indexOfFirst(    predicate: (ULong) -> Boolean): Int",
                  "fun <T> Iterable<T>.indexOfFirst(    predicate: (T) -> Boolean): Int"
                ]
              },
              {
                "name": "indexOfLast",
                "description": [
                  "Returns index of the last element matching the given predicate, or -1 if the array does not contain such element.",
                  "Returns index of the last element matching the given predicate, or -1 if the collection does not contain such element."
                ],
                "code": [
                  "fun ULongArray.indexOfLast(    predicate: (ULong) -> Boolean): Int",
                  "fun <T> Iterable<T>.indexOfLast(    predicate: (T) -> Boolean): Int"
                ]
              },
              {
                "name": "intersect",
                "description": [
                  "Returns a set containing all elements that are contained by both this collection and the specified collection."
                ],
                "code": [
                  "infix fun <T> Iterable<T>.intersect(    other: Iterable<T>): Set<T>"
                ]
              },
              {
                "name": "isNotEmpty",
                "description": ["Returns true if the collection is not empty."],
                "code": ["fun <T> Collection<T>.isNotEmpty(): Boolean"]
              },
              {
                "name": "isNullOrEmpty",
                "description": [
                  "Returns true if this nullable collection is either null or empty."
                ],
                "code": ["fun <T> Collection<T>?.isNullOrEmpty(): Boolean"]
              },
              {
                "name": "joinTo",
                "description": [
                  "Appends the string from all the elements separated using separator and using the given prefix and postfix if supplied."
                ],
                "code": [
                  "fun <T, A : Appendable> Iterable<T>.joinTo(    buffer: A,     separator: CharSequence = \", \",     prefix: CharSequence = \"\",     postfix: CharSequence = \"\",     limit: Int = -1,     truncated: CharSequence = \"...\",     transform: ((T) -> CharSequence)? = null): A"
                ]
              },
              {
                "name": "joinToString",
                "description": [
                  "Creates a string from all the elements separated using separator and using the given prefix and postfix if supplied."
                ],
                "code": [
                  "fun <T> Iterable<T>.joinToString(    separator: CharSequence = \", \",     prefix: CharSequence = \"\",     postfix: CharSequence = \"\",     limit: Int = -1,     truncated: CharSequence = \"...\",     transform: ((T) -> CharSequence)? = null): String"
                ]
              },
              {
                "name": "last",
                "description": [
                  "Returns the last element.",
                  "Returns the last element matching the given predicate."
                ],
                "code": [
                  "fun ULongArray.last(): ULong",
                  "fun ULongArray.last(predicate: (ULong) -> Boolean): ULong",
                  "fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T"
                ]
              },
              {
                "name": "lastIndexOf",
                "description": [
                  "Returns last index of element, or -1 if the array does not contain element.",
                  "Returns last index of element, or -1 if the collection does not contain element."
                ],
                "code": [
                  "fun ULongArray.lastIndexOf(element: ULong): Int",
                  "fun <T> Iterable<T>.lastIndexOf(element: T): Int"
                ]
              },
              {
                "name": "lastOrNull",
                "description": [
                  "Returns the last element, or null if the array is empty.",
                  "Returns the last element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun ULongArray.lastOrNull(): ULong?",
                  "fun ULongArray.lastOrNull(    predicate: (ULong) -> Boolean): ULong?",
                  "fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T?"
                ]
              },
              {
                "name": "map",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each element in the original array.",
                  "Returns a list containing the results of applying the given transform function\nto each element in the original collection."
                ],
                "code": [
                  "fun <R> ULongArray.map(transform: (ULong) -> R): List<R>",
                  "fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexed",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each element and its index in the original array.",
                  "Returns a list containing the results of applying the given transform function\nto each element and its index in the original collection."
                ],
                "code": [
                  "fun <R> ULongArray.mapIndexed(    transform: (index: Int, ULong) -> R): List<R>",
                  "fun <T, R> Iterable<T>.mapIndexed(    transform: (index: Int, T) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexedNotNull",
                "description": [
                  "Returns a list containing only the non-null results of applying the given transform function\nto each element and its index in the original collection."
                ],
                "code": [
                  "fun <T, R : Any> Iterable<T>.mapIndexedNotNull(    transform: (index: Int, T) -> R?): List<R>"
                ]
              },
              {
                "name": "mapIndexedNotNullTo",
                "description": [
                  "Applies the given transform function to each element and its index in the original collection\nand appends only the non-null results to the given destination."
                ],
                "code": [
                  "fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(    destination: C,     transform: (index: Int, T) -> R?): C"
                ]
              },
              {
                "name": "mapIndexedTo",
                "description": [
                  "Applies the given transform function to each element and its index in the original array\nand appends the results to the given destination.",
                  "Applies the given transform function to each element and its index in the original collection\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> ULongArray.mapIndexedTo(    destination: C,     transform: (index: Int, ULong) -> R): C",
                  "fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(    destination: C,     transform: (index: Int, T) -> R): C"
                ]
              },
              {
                "name": "mapNotNull",
                "description": [
                  "Returns a list containing only the non-null results of applying the given transform function\nto each element in the original collection."
                ],
                "code": [
                  "fun <T, R : Any> Iterable<T>.mapNotNull(    transform: (T) -> R?): List<R>"
                ]
              },
              {
                "name": "mapNotNullTo",
                "description": [
                  "Applies the given transform function to each element in the original collection\nand appends only the non-null results to the given destination."
                ],
                "code": [
                  "fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(    destination: C,     transform: (T) -> R?): C"
                ]
              },
              {
                "name": "mapTo",
                "description": [
                  "Applies the given transform function to each element of the original array\nand appends the results to the given destination.",
                  "Applies the given transform function to each element of the original collection\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> ULongArray.mapTo(    destination: C,     transform: (ULong) -> R): C",
                  "fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(    destination: C,     transform: (T) -> R): C"
                ]
              },
              {
                "name": "maxByOrNull",
                "description": [
                  "Returns the first element yielding the largest value of the given function or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> ULongArray.maxByOrNull(    selector: (ULong) -> R): ULong?",
                  "fun <T, R : Comparable<R>> Iterable<T>.maxByOrNull(    selector: (T) -> R): T?"
                ]
              },
              {
                "name": "maxOf",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each element in the array.",
                  "Returns the largest value among all values produced by selector function\napplied to each element in the collection."
                ],
                "code": [
                  "fun ULongArray.maxOf(selector: (ULong) -> Double): Double",
                  "fun ULongArray.maxOf(selector: (ULong) -> Float): Float",
                  "fun <R : Comparable<R>> ULongArray.maxOf(    selector: (ULong) -> R): R",
                  "fun <T> Iterable<T>.maxOf(selector: (T) -> Double): Double",
                  "fun <T> Iterable<T>.maxOf(selector: (T) -> Float): Float",
                  "fun <T, R : Comparable<R>> Iterable<T>.maxOf(    selector: (T) -> R): R"
                ]
              },
              {
                "name": "maxOfOrNull",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each element in the array or null if there are no elements.",
                  "Returns the largest value among all values produced by selector function\napplied to each element in the collection or null if there are no elements."
                ],
                "code": [
                  "fun ULongArray.maxOfOrNull(    selector: (ULong) -> Double): Double?",
                  "fun ULongArray.maxOfOrNull(    selector: (ULong) -> Float): Float?",
                  "fun <R : Comparable<R>> ULongArray.maxOfOrNull(    selector: (ULong) -> R): R?",
                  "fun <T> Iterable<T>.maxOfOrNull(    selector: (T) -> Double): Double?",
                  "fun <T> Iterable<T>.maxOfOrNull(    selector: (T) -> Float): Float?",
                  "fun <T, R : Comparable<R>> Iterable<T>.maxOfOrNull(    selector: (T) -> R): R?"
                ]
              },
              {
                "name": "maxOfWith",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the array.",
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the collection."
                ],
                "code": [
                  "fun <R> ULongArray.maxOfWith(    comparator: Comparator<in R>,     selector: (ULong) -> R): R",
                  "fun <T, R> Iterable<T>.maxOfWith(    comparator: Comparator<in R>,     selector: (T) -> R): R"
                ]
              },
              {
                "name": "maxOfWithOrNull",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the array or null if there are no elements.",
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the collection or null if there are no elements."
                ],
                "code": [
                  "fun <R> ULongArray.maxOfWithOrNull(    comparator: Comparator<in R>,     selector: (ULong) -> R): R?",
                  "fun <T, R> Iterable<T>.maxOfWithOrNull(    comparator: Comparator<in R>,     selector: (T) -> R): R?"
                ]
              },
              {
                "name": "maxOrNull",
                "description": [
                  "Returns the largest element or null if there are no elements."
                ],
                "code": ["fun ULongArray.maxOrNull(): ULong?"]
              },
              {
                "name": "maxWith",
                "description": [
                  "Returns the first element having the largest value according to the provided comparator."
                ],
                "code": [
                  "fun ULongArray.maxWith(    comparator: Comparator<in ULong>): ULong",
                  "fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T",
                  "fun ULongArray.maxWith(    comparator: Comparator<in ULong>): ULong?"
                ]
              },
              {
                "name": "maxWithOrNull",
                "description": [
                  "Returns the first element having the largest value according to the provided comparator or null if there are no elements."
                ],
                "code": [
                  "fun ULongArray.maxWithOrNull(    comparator: Comparator<in ULong>): ULong?",
                  "fun <T> Iterable<T>.maxWithOrNull(    comparator: Comparator<in T>): T?"
                ]
              },
              {
                "name": "minByOrNull",
                "description": [
                  "Returns the first element yielding the smallest value of the given function or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> ULongArray.minByOrNull(    selector: (ULong) -> R): ULong?",
                  "fun <T, R : Comparable<R>> Iterable<T>.minByOrNull(    selector: (T) -> R): T?"
                ]
              },
              {
                "name": "minOf",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the array.",
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the collection."
                ],
                "code": [
                  "fun ULongArray.minOf(selector: (ULong) -> Double): Double",
                  "fun ULongArray.minOf(selector: (ULong) -> Float): Float",
                  "fun <R : Comparable<R>> ULongArray.minOf(    selector: (ULong) -> R): R",
                  "fun <T> Iterable<T>.minOf(selector: (T) -> Double): Double",
                  "fun <T> Iterable<T>.minOf(selector: (T) -> Float): Float",
                  "fun <T, R : Comparable<R>> Iterable<T>.minOf(    selector: (T) -> R): R"
                ]
              },
              {
                "name": "minOfOrNull",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the array or null if there are no elements.",
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the collection or null if there are no elements."
                ],
                "code": [
                  "fun ULongArray.minOfOrNull(    selector: (ULong) -> Double): Double?",
                  "fun ULongArray.minOfOrNull(    selector: (ULong) -> Float): Float?",
                  "fun <R : Comparable<R>> ULongArray.minOfOrNull(    selector: (ULong) -> R): R?",
                  "fun <T> Iterable<T>.minOfOrNull(    selector: (T) -> Double): Double?",
                  "fun <T> Iterable<T>.minOfOrNull(    selector: (T) -> Float): Float?",
                  "fun <T, R : Comparable<R>> Iterable<T>.minOfOrNull(    selector: (T) -> R): R?"
                ]
              },
              {
                "name": "minOfWith",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the array.",
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the collection."
                ],
                "code": [
                  "fun <R> ULongArray.minOfWith(    comparator: Comparator<in R>,     selector: (ULong) -> R): R",
                  "fun <T, R> Iterable<T>.minOfWith(    comparator: Comparator<in R>,     selector: (T) -> R): R"
                ]
              },
              {
                "name": "minOfWithOrNull",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the array or null if there are no elements.",
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the collection or null if there are no elements."
                ],
                "code": [
                  "fun <R> ULongArray.minOfWithOrNull(    comparator: Comparator<in R>,     selector: (ULong) -> R): R?",
                  "fun <T, R> Iterable<T>.minOfWithOrNull(    comparator: Comparator<in R>,     selector: (T) -> R): R?"
                ]
              },
              {
                "name": "minOrNull",
                "description": [
                  "Returns the smallest element or null if there are no elements."
                ],
                "code": ["fun ULongArray.minOrNull(): ULong?"]
              },
              {
                "name": "minus",
                "description": [
                  "Returns a list containing all elements of the original collection without the first occurrence of the given element.",
                  "Returns a list containing all elements of the original collection except the elements contained in the given elements array.",
                  "Returns a list containing all elements of the original collection except the elements contained in the given elements collection.",
                  "Returns a list containing all elements of the original collection except the elements contained in the given elements sequence."
                ],
                "code": [
                  "operator fun <T> Iterable<T>.minus(element: T): List<T>",
                  "operator fun <T> Iterable<T>.minus(    elements: Array<out T>): List<T>",
                  "operator fun <T> Iterable<T>.minus(    elements: Iterable<T>): List<T>",
                  "operator fun <T> Iterable<T>.minus(    elements: Sequence<T>): List<T>"
                ]
              },
              {
                "name": "minusElement",
                "description": [
                  "Returns a list containing all elements of the original collection without the first occurrence of the given element."
                ],
                "code": [
                  "fun <T> Iterable<T>.minusElement(element: T): List<T>"
                ]
              },
              {
                "name": "minWith",
                "description": [
                  "Returns the first element having the smallest value according to the provided comparator."
                ],
                "code": [
                  "fun ULongArray.minWith(    comparator: Comparator<in ULong>): ULong",
                  "fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T",
                  "fun ULongArray.minWith(    comparator: Comparator<in ULong>): ULong?"
                ]
              },
              {
                "name": "minWithOrNull",
                "description": [
                  "Returns the first element having the smallest value according to the provided comparator or null if there are no elements."
                ],
                "code": [
                  "fun ULongArray.minWithOrNull(    comparator: Comparator<in ULong>): ULong?",
                  "fun <T> Iterable<T>.minWithOrNull(    comparator: Comparator<in T>): T?"
                ]
              },
              {
                "name": "none",
                "description": [
                  "Returns true if the array has no elements.",
                  "Returns true if no elements match the given predicate."
                ],
                "code": [
                  "fun ULongArray.none(): Boolean",
                  "fun ULongArray.none(predicate: (ULong) -> Boolean): Boolean",
                  "fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean"
                ]
              },
              {
                "name": "onEach",
                "description": [
                  "Performs the given action on each element and returns the array itself afterwards.",
                  "Performs the given action on each element and returns the collection itself afterwards."
                ],
                "code": [
                  "fun ULongArray.onEach(action: (ULong) -> Unit): ULongArray",
                  "fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C"
                ]
              },
              {
                "name": "onEachIndexed",
                "description": [
                  "Performs the given action on each element, providing sequential index with the element,\nand returns the array itself afterwards.",
                  "Performs the given action on each element, providing sequential index with the element,\nand returns the collection itself afterwards."
                ],
                "code": [
                  "fun ULongArray.onEachIndexed(    action: (index: Int, ULong) -> Unit): ULongArray",
                  "fun <T, C : Iterable<T>> C.onEachIndexed(    action: (index: Int, T) -> Unit): C"
                ]
              },
              {
                "name": "orEmpty",
                "description": [
                  "Returns this Collection if it's not null and the empty list otherwise."
                ],
                "code": ["fun <T> Collection<T>?.orEmpty(): Collection<T>"]
              },
              {
                "name": "partition",
                "description": [
                  "Splits the original collection into pair of lists,\nwhere first list contains elements for which predicate yielded true,\nwhile second list contains elements for which predicate yielded false."
                ],
                "code": [
                  "fun <T> Iterable<T>.partition(    predicate: (T) -> Boolean): Pair<List<T>, List<T>>"
                ]
              },
              {
                "name": "plus",
                "description": [
                  "Returns an array containing all elements of the original array and then the given element.",
                  "Returns an array containing all elements of the original array and then all elements of the given elements collection.",
                  "Returns an array containing all elements of the original array and then all elements of the given elements array.",
                  "Returns a list containing all elements of the original collection and then the given element.",
                  "Returns a list containing all elements of the original collection and then all elements of the given elements array.",
                  "Returns a list containing all elements of the original collection and then all elements of the given elements collection.",
                  "Returns a list containing all elements of the original collection and then all elements of the given elements sequence."
                ],
                "code": [
                  "operator fun ULongArray.plus(element: ULong): ULongArray",
                  "operator fun ULongArray.plus(    elements: Collection<ULong>): ULongArray",
                  "operator fun ULongArray.plus(    elements: ULongArray): ULongArray",
                  "operator fun <T> Iterable<T>.plus(element: T): List<T>",
                  "operator fun <T> Collection<T>.plus(element: T): List<T>",
                  "operator fun <T> Iterable<T>.plus(    elements: Array<out T>): List<T>",
                  "operator fun <T> Collection<T>.plus(    elements: Array<out T>): List<T>",
                  "operator fun <T> Iterable<T>.plus(    elements: Iterable<T>): List<T>",
                  "operator fun <T> Collection<T>.plus(    elements: Iterable<T>): List<T>",
                  "operator fun <T> Iterable<T>.plus(    elements: Sequence<T>): List<T>",
                  "operator fun <T> Collection<T>.plus(    elements: Sequence<T>): List<T>"
                ]
              },
              {
                "name": "plusElement",
                "description": [
                  "Returns a list containing all elements of the original collection and then the given element."
                ],
                "code": [
                  "fun <T> Iterable<T>.plusElement(element: T): List<T>",
                  "fun <T> Collection<T>.plusElement(element: T): List<T>"
                ]
              },
              {
                "name": "random",
                "description": [
                  "Returns a random element from this array.",
                  "Returns a random element from this array using the specified source of randomness."
                ],
                "code": [
                  "fun ULongArray.random(): ULong",
                  "fun ULongArray.random(random: Random): ULong"
                ]
              },
              {
                "name": "randomOrNull",
                "description": [
                  "Returns a random element from this array, or null if this array is empty.",
                  "Returns a random element from this array using the specified source of randomness, or null if this array is empty."
                ],
                "code": [
                  "fun ULongArray.randomOrNull(): ULong?",
                  "fun ULongArray.randomOrNull(random: Random): ULong?"
                ]
              },
              {
                "name": "reduce",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun ULongArray.reduce(    operation: (acc: ULong, ULong) -> ULong): ULong",
                  "fun <S, T : S> Iterable<T>.reduce(    operation: (acc: S, T) -> S): S"
                ]
              },
              {
                "name": "reduceIndexed",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original array.",
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original collection."
                ],
                "code": [
                  "fun ULongArray.reduceIndexed(    operation: (index: Int, acc: ULong, ULong) -> ULong): ULong",
                  "fun <S, T : S> Iterable<T>.reduceIndexed(    operation: (index: Int, acc: S, T) -> S): S"
                ]
              },
              {
                "name": "reduceIndexedOrNull",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original array.",
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original collection."
                ],
                "code": [
                  "fun ULongArray.reduceIndexedOrNull(    operation: (index: Int, acc: ULong, ULong) -> ULong): ULong?",
                  "fun <S, T : S> Iterable<T>.reduceIndexedOrNull(    operation: (index: Int, acc: S, T) -> S): S?"
                ]
              },
              {
                "name": "reduceOrNull",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun ULongArray.reduceOrNull(    operation: (acc: ULong, ULong) -> ULong): ULong?",
                  "fun <S, T : S> Iterable<T>.reduceOrNull(    operation: (acc: S, T) -> S): S?"
                ]
              },
              {
                "name": "reduceRight",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun ULongArray.reduceRight(    operation: (ULong, acc: ULong) -> ULong): ULong"
                ]
              },
              {
                "name": "reduceRightIndexed",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun ULongArray.reduceRightIndexed(    operation: (index: Int, ULong, acc: ULong) -> ULong): ULong"
                ]
              },
              {
                "name": "reduceRightIndexedOrNull",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun ULongArray.reduceRightIndexedOrNull(    operation: (index: Int, ULong, acc: ULong) -> ULong): ULong?"
                ]
              },
              {
                "name": "reduceRightOrNull",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun ULongArray.reduceRightOrNull(    operation: (ULong, acc: ULong) -> ULong): ULong?"
                ]
              },
              {
                "name": "refTo",
                "description": [],
                "code": [
                  "fun ULongArray.refTo(index: Int): CValuesRef<ULongVar>"
                ]
              },
              {
                "name": "requireNoNulls",
                "description": [
                  "Returns an original collection containing all the non-null elements, throwing an IllegalArgumentException if there are any null elements."
                ],
                "code": [
                  "fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T>"
                ]
              },
              {
                "name": "reverse",
                "description": [
                  "Reverses elements in the array in-place.",
                  "Reverses elements of the array in the specified range in-place."
                ],
                "code": [
                  "fun ULongArray.reverse()",
                  "fun ULongArray.reverse(fromIndex: Int, toIndex: Int)"
                ]
              },
              {
                "name": "reversed",
                "description": [
                  "Returns a list with elements in reversed order."
                ],
                "code": ["fun ULongArray.reversed(): List<ULong>"]
              },
              {
                "name": "reversedArray",
                "description": [
                  "Returns an array with elements of this array in reversed order."
                ],
                "code": ["fun ULongArray.reversedArray(): ULongArray"]
              },
              {
                "name": "runningFold",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> ULongArray.runningFold(    initial: R,     operation: (acc: R, ULong) -> R): List<R>",
                  "fun <T, R> Iterable<T>.runningFold(    initial: R,     operation: (acc: R, T) -> R): List<R>"
                ]
              },
              {
                "name": "runningFoldIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with initial value.",
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original collection and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> ULongArray.runningFoldIndexed(    initial: R,     operation: (index: Int, acc: R, ULong) -> R): List<R>",
                  "fun <T, R> Iterable<T>.runningFoldIndexed(    initial: R,     operation: (index: Int, acc: R, T) -> R): List<R>"
                ]
              },
              {
                "name": "runningReduce",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with the first element of this array.",
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with the first element of this collection."
                ],
                "code": [
                  "fun ULongArray.runningReduce(    operation: (acc: ULong, ULong) -> ULong): List<ULong>",
                  "fun <S, T : S> Iterable<T>.runningReduce(    operation: (acc: S, T) -> S): List<S>"
                ]
              },
              {
                "name": "runningReduceIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with the first element of this array.",
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original collection and current accumulator value that starts with the first element of this collection."
                ],
                "code": [
                  "fun ULongArray.runningReduceIndexed(    operation: (index: Int, acc: ULong, ULong) -> ULong): List<ULong>",
                  "fun <S, T : S> Iterable<T>.runningReduceIndexed(    operation: (index: Int, acc: S, T) -> S): List<S>"
                ]
              },
              {
                "name": "scan",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> ULongArray.scan(    initial: R,     operation: (acc: R, ULong) -> R): List<R>",
                  "fun <T, R> Iterable<T>.scan(    initial: R,     operation: (acc: R, T) -> R): List<R>"
                ]
              },
              {
                "name": "scanIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with initial value.",
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original collection and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> ULongArray.scanIndexed(    initial: R,     operation: (index: Int, acc: R, ULong) -> R): List<R>",
                  "fun <T, R> Iterable<T>.scanIndexed(    initial: R,     operation: (index: Int, acc: R, T) -> R): List<R>"
                ]
              },
              {
                "name": "shuffle",
                "description": [
                  "Randomly shuffles elements in this array in-place.",
                  "Randomly shuffles elements in this array in-place using the specified random instance as the source of randomness."
                ],
                "code": [
                  "fun ULongArray.shuffle()",
                  "fun ULongArray.shuffle(random: Random)"
                ]
              },
              {
                "name": "shuffled",
                "description": [
                  "Returns a new list with the elements of this list randomly shuffled\nusing the specified random instance as the source of randomness."
                ],
                "code": [
                  "fun <T> Iterable<T>.shuffled(random: Random): List<T>"
                ]
              },
              {
                "name": "single",
                "description": [
                  "Returns the single element, or throws an exception if the array is empty or has more than one element.",
                  "Returns the single element matching the given predicate, or throws exception if there is no or more than one matching element."
                ],
                "code": [
                  "fun ULongArray.single(): ULong",
                  "fun ULongArray.single(predicate: (ULong) -> Boolean): ULong",
                  "fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T"
                ]
              },
              {
                "name": "singleOrNull",
                "description": [
                  "Returns single element, or null if the array is empty or has more than one element.",
                  "Returns the single element matching the given predicate, or null if element was not found or more than one element was found."
                ],
                "code": [
                  "fun ULongArray.singleOrNull(): ULong?",
                  "fun ULongArray.singleOrNull(    predicate: (ULong) -> Boolean): ULong?",
                  "fun <T> Iterable<T>.singleOrNull(    predicate: (T) -> Boolean): T?"
                ]
              },
              {
                "name": "slice",
                "description": [
                  "Returns a list containing elements at indices in the specified indices range.",
                  "Returns a list containing elements at specified indices."
                ],
                "code": [
                  "fun ULongArray.slice(indices: IntRange): List<ULong>",
                  "fun ULongArray.slice(indices: Iterable<Int>): List<ULong>"
                ]
              },
              {
                "name": "sliceArray",
                "description": [
                  "Returns an array containing elements of this array at specified indices.",
                  "Returns an array containing elements at indices in the specified indices range."
                ],
                "code": [
                  "fun ULongArray.sliceArray(    indices: Collection<Int>): ULongArray",
                  "fun ULongArray.sliceArray(indices: IntRange): ULongArray"
                ]
              },
              {
                "name": "sort",
                "description": [
                  "Sorts the array in-place.",
                  "Sorts a range in the array in-place."
                ],
                "code": [
                  "fun ULongArray.sort()",
                  "fun ULongArray.sort(fromIndex: Int = 0, toIndex: Int = size)"
                ]
              },
              {
                "name": "sortDescending",
                "description": [
                  "Sorts elements in the array in-place descending according to their natural sort order.",
                  "Sorts elements of the array in the specified range in-place.\nThe elements are sorted descending according to their natural sort order."
                ],
                "code": [
                  "fun ULongArray.sortDescending()",
                  "fun ULongArray.sortDescending(fromIndex: Int, toIndex: Int)"
                ]
              },
              {
                "name": "sorted",
                "description": [
                  "Returns a list of all elements sorted according to their natural sort order."
                ],
                "code": ["fun ULongArray.sorted(): List<ULong>"]
              },
              {
                "name": "sortedArray",
                "description": [
                  "Returns an array with all elements of this array sorted according to their natural sort order."
                ],
                "code": ["fun ULongArray.sortedArray(): ULongArray"]
              },
              {
                "name": "sortedArrayDescending",
                "description": [
                  "Returns an array with all elements of this array sorted descending according to their natural sort order."
                ],
                "code": ["fun ULongArray.sortedArrayDescending(): ULongArray"]
              },
              {
                "name": "sortedBy",
                "description": [
                  "Returns a list of all elements sorted according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <T, R : Comparable<R>> Iterable<T>.sortedBy(    selector: (T) -> R?): List<T>"
                ]
              },
              {
                "name": "sortedByDescending",
                "description": [
                  "Returns a list of all elements sorted descending according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(    selector: (T) -> R?): List<T>"
                ]
              },
              {
                "name": "sortedDescending",
                "description": [
                  "Returns a list of all elements sorted descending according to their natural sort order."
                ],
                "code": ["fun ULongArray.sortedDescending(): List<ULong>"]
              },
              {
                "name": "sortedWith",
                "description": [
                  "Returns a list of all elements sorted according to the specified comparator."
                ],
                "code": [
                  "fun <T> Iterable<T>.sortedWith(    comparator: Comparator<in T>): List<T>"
                ]
              },
              {
                "name": "subtract",
                "description": [
                  "Returns a set containing all elements that are contained by this collection and not contained by the specified collection."
                ],
                "code": [
                  "infix fun <T> Iterable<T>.subtract(    other: Iterable<T>): Set<T>"
                ]
              },
              {
                "name": "sum",
                "description": [
                  "Returns the sum of all elements in the array."
                ],
                "code": ["fun ULongArray.sum(): ULong"]
              },
              {
                "name": "sumBy",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array.",
                  "Returns the sum of all values produced by selector function applied to each element in the collection."
                ],
                "code": [
                  "fun ULongArray.sumBy(selector: (ULong) -> UInt): UInt",
                  "fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int"
                ]
              },
              {
                "name": "sumByDouble",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array.",
                  "Returns the sum of all values produced by selector function applied to each element in the collection."
                ],
                "code": [
                  "fun ULongArray.sumByDouble(    selector: (ULong) -> Double): Double",
                  "fun <T> Iterable<T>.sumByDouble(    selector: (T) -> Double): Double"
                ]
              },
              {
                "name": "sumOf",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array.",
                  "Returns the sum of all values produced by selector function applied to each element in the collection."
                ],
                "code": [
                  "fun ULongArray.sumOf(selector: (ULong) -> Double): Double",
                  "fun ULongArray.sumOf(selector: (ULong) -> Int): Int",
                  "fun ULongArray.sumOf(selector: (ULong) -> Long): Long",
                  "fun ULongArray.sumOf(selector: (ULong) -> UInt): UInt",
                  "fun ULongArray.sumOf(selector: (ULong) -> ULong): ULong",
                  "fun ULongArray.sumOf(    selector: (ULong) -> BigDecimal): BigDecimal",
                  "fun ULongArray.sumOf(    selector: (ULong) -> BigInteger): BigInteger",
                  "fun <T> Iterable<T>.sumOf(selector: (T) -> Double): Double",
                  "fun <T> Iterable<T>.sumOf(selector: (T) -> Int): Int",
                  "fun <T> Iterable<T>.sumOf(selector: (T) -> Long): Long",
                  "fun <T> Iterable<T>.sumOf(selector: (T) -> UInt): UInt",
                  "fun <T> Iterable<T>.sumOf(selector: (T) -> ULong): ULong"
                ]
              },
              {
                "name": "take",
                "description": ["Returns a list containing first n elements."],
                "code": ["fun ULongArray.take(n: Int): List<ULong>"]
              },
              {
                "name": "takeLast",
                "description": ["Returns a list containing last n elements."],
                "code": ["fun ULongArray.takeLast(n: Int): List<ULong>"]
              },
              {
                "name": "takeLastWhile",
                "description": [
                  "Returns a list containing last elements satisfying the given predicate."
                ],
                "code": [
                  "fun ULongArray.takeLastWhile(    predicate: (ULong) -> Boolean): List<ULong>"
                ]
              },
              {
                "name": "takeWhile",
                "description": [
                  "Returns a list containing first elements satisfying the given predicate."
                ],
                "code": [
                  "fun ULongArray.takeWhile(    predicate: (ULong) -> Boolean): List<ULong>",
                  "fun <T> Iterable<T>.takeWhile(    predicate: (T) -> Boolean): List<T>"
                ]
              },
              {
                "name": "toCollection",
                "description": [
                  "Appends all elements to the given destination collection."
                ],
                "code": [
                  "fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(    destination: C): C"
                ]
              },
              {
                "name": "toCValues",
                "description": [],
                "code": ["fun ULongArray.toCValues(): CValues<ULongVar>"]
              },
              {
                "name": "toHashSet",
                "description": ["Returns a new HashSet of all elements."],
                "code": ["fun <T> Iterable<T>.toHashSet(): HashSet<T>"]
              },
              {
                "name": "toList",
                "description": ["Returns a List containing all elements."],
                "code": ["fun <T> Iterable<T>.toList(): List<T>"]
              },
              {
                "name": "toLongArray",
                "description": [
                  "Returns an array of type LongArray, which is a copy of this array where each element is a signed reinterpretation\nof the corresponding element of this array."
                ],
                "code": ["fun ULongArray.toLongArray(): LongArray"]
              },
              {
                "name": "toMutableSet",
                "description": [
                  "Returns a new MutableSet containing all distinct elements from the given collection."
                ],
                "code": ["fun <T> Iterable<T>.toMutableSet(): MutableSet<T>"]
              },
              {
                "name": "toSet",
                "description": ["Returns a Set of all elements."],
                "code": ["fun <T> Iterable<T>.toSet(): Set<T>"]
              },
              {
                "name": "toTypedArray",
                "description": [
                  "Returns a typed object array containing all of the elements of this primitive array."
                ],
                "code": ["fun ULongArray.toTypedArray(): Array<ULong>"]
              },
              {
                "name": "toULongArray",
                "description": [
                  "Returns an array of ULong containing all of the elements of this collection."
                ],
                "code": ["fun Collection<ULong>.toULongArray(): ULongArray"]
              },
              {
                "name": "union",
                "description": [
                  "Returns a set containing all distinct elements from both collections."
                ],
                "code": [
                  "infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T>"
                ]
              },
              {
                "name": "windowed",
                "description": [
                  "Returns a list of snapshots of the window of the given size\nsliding along this collection with the given step, where each\nsnapshot is a list.",
                  "Returns a list of results of applying the given transform function to\nan each list representing a view over the window of the given size\nsliding along this collection with the given step."
                ],
                "code": [
                  "fun <T> Iterable<T>.windowed(    size: Int,     step: Int = 1,     partialWindows: Boolean = false): List<List<T>>",
                  "fun <T, R> Iterable<T>.windowed(    size: Int,     step: Int = 1,     partialWindows: Boolean = false,     transform: (List<T>) -> R): List<R>"
                ]
              },
              {
                "name": "withIndex",
                "description": [
                  "Returns a lazy Iterable that wraps each element of the original array\ninto an IndexedValue containing the index of that element and the element itself."
                ],
                "code": [
                  "fun ULongArray.withIndex(): Iterable<IndexedValue<ULong>>"
                ]
              },
              {
                "name": "zip",
                "description": [
                  "Returns a list of pairs built from the elements of this array and the other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of pairs built from the elements of this collection and other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other collection with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest array.",
                  "Returns a list of pairs built from the elements of this collection and the other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this collection and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of pairs built from the elements of this collection and other collection with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this collection and the other collection with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection."
                ],
                "code": [
                  "infix fun <R> ULongArray.zip(    other: Array<out R>): List<Pair<ULong, R>>",
                  "infix fun ULongArray.zip(    other: ULongArray): List<Pair<ULong, ULong>>",
                  "fun <R, V> ULongArray.zip(    other: Array<out R>,     transform: (a: ULong, b: R) -> V): List<V>",
                  "infix fun <R> ULongArray.zip(    other: Iterable<R>): List<Pair<ULong, R>>",
                  "fun <R, V> ULongArray.zip(    other: Iterable<R>,     transform: (a: ULong, b: R) -> V): List<V>",
                  "fun <V> ULongArray.zip(    other: ULongArray,     transform: (a: ULong, b: ULong) -> V): List<V>",
                  "infix fun <T, R> Iterable<T>.zip(    other: Array<out R>): List<Pair<T, R>>",
                  "fun <T, R, V> Iterable<T>.zip(    other: Array<out R>,     transform: (a: T, b: R) -> V): List<V>",
                  "infix fun <T, R> Iterable<T>.zip(    other: Iterable<R>): List<Pair<T, R>>",
                  "fun <T, R, V> Iterable<T>.zip(    other: Iterable<R>,     transform: (a: T, b: R) -> V): List<V>"
                ]
              },
              {
                "name": "zipWithNext",
                "description": [
                  "Returns a list of pairs of each two adjacent elements in this collection.",
                  "Returns a list containing the results of applying the given transform function\nto an each pair of two adjacent elements in this collection."
                ],
                "code": [
                  "fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>>",
                  "fun <T, R> Iterable<T>.zipWithNext(    transform: (a: T, b: T) -> R): List<R>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "Unit",
        "description": [
          "The type with only one value: the Unit object. This type corresponds to the void type in Java."
        ],
        "code": ["object Unit"],
        "url": "-unit/index.html",
        "subcategories": [
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "toString",
                "description": [
                  "Returns a string representation of the object."
                ],
                "code": ["fun toString(): String"]
              }
            ]
          }
        ]
      },
      {
        "name": "UShort",
        "description": [],
        "code": ["class UShort : Comparable<UShort>"],
        "url": "-u-short/index.html",
        "subcategories": [
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "and",
                "description": [
                  "Performs a bitwise AND operation between the two values."
                ],
                "code": ["infix fun and(other: UShort): UShort"]
              },
              {
                "name": "compareTo",
                "description": [
                  "Compares this value with the specified value for order.\nReturns zero if this value is equal to the specified other value, a negative number if it's less than other,\nor a positive number if it's greater than other."
                ],
                "code": [
                  "operator fun compareTo(other: UByte): Int",
                  "operator fun compareTo(other: UShort): Int",
                  "operator fun compareTo(other: UInt): Int",
                  "operator fun compareTo(other: ULong): Int"
                ]
              },
              {
                "name": "dec",
                "description": ["Returns this value decremented by one."],
                "code": ["operator fun dec(): UShort"]
              },
              {
                "name": "div",
                "description": [
                  "Divides this value by the other value, truncating the result to an integer that is closer to zero."
                ],
                "code": [
                  "operator fun div(other: UByte): UInt",
                  "operator fun div(other: UShort): UInt",
                  "operator fun div(other: UInt): UInt",
                  "operator fun div(other: ULong): ULong"
                ]
              },
              {
                "name": "floorDiv",
                "description": [
                  "Divides this value by the other value, flooring the result to an integer that is closer to negative infinity."
                ],
                "code": [
                  "fun floorDiv(other: UByte): UInt",
                  "fun floorDiv(other: UShort): UInt",
                  "fun floorDiv(other: UInt): UInt",
                  "fun floorDiv(other: ULong): ULong"
                ]
              },
              {
                "name": "inc",
                "description": ["Returns this value incremented by one."],
                "code": ["operator fun inc(): UShort"]
              },
              {
                "name": "inv",
                "description": ["Inverts the bits in this value."],
                "code": ["fun inv(): UShort"]
              },
              {
                "name": "minus",
                "description": ["Subtracts the other value from this value."],
                "code": [
                  "operator fun minus(other: UByte): UInt",
                  "operator fun minus(other: UShort): UInt",
                  "operator fun minus(other: UInt): UInt",
                  "operator fun minus(other: ULong): ULong"
                ]
              },
              {
                "name": "mod",
                "description": [
                  "Calculates the remainder of flooring division of this value (dividend) by the other value (divisor)."
                ],
                "code": [
                  "fun mod(other: UByte): UByte",
                  "fun mod(other: UShort): UShort",
                  "fun mod(other: UInt): UInt",
                  "fun mod(other: ULong): ULong"
                ]
              },
              {
                "name": "or",
                "description": [
                  "Performs a bitwise OR operation between the two values."
                ],
                "code": ["infix fun or(other: UShort): UShort"]
              },
              {
                "name": "plus",
                "description": ["Adds the other value to this value."],
                "code": [
                  "operator fun plus(other: UByte): UInt",
                  "operator fun plus(other: UShort): UInt",
                  "operator fun plus(other: UInt): UInt",
                  "operator fun plus(other: ULong): ULong"
                ]
              },
              {
                "name": "rangeTo",
                "description": [
                  "Creates a range from this value to the specified other value."
                ],
                "code": ["operator fun rangeTo(other: UShort): UIntRange"]
              },
              {
                "name": "rangeUntil",
                "description": [
                  "Creates a range from this value up to but excluding the specified other value."
                ],
                "code": ["operator fun rangeUntil(other: UShort): UIntRange"]
              },
              {
                "name": "rem",
                "description": [
                  "Calculates the remainder of truncating division of this value (dividend) by the other value (divisor)."
                ],
                "code": [
                  "operator fun rem(other: UByte): UInt",
                  "operator fun rem(other: UShort): UInt",
                  "operator fun rem(other: UInt): UInt",
                  "operator fun rem(other: ULong): ULong"
                ]
              },
              {
                "name": "times",
                "description": ["Multiplies this value by the other value."],
                "code": [
                  "operator fun times(other: UByte): UInt",
                  "operator fun times(other: UShort): UInt",
                  "operator fun times(other: UInt): UInt",
                  "operator fun times(other: ULong): ULong"
                ]
              },
              {
                "name": "toByte",
                "description": ["Converts this UShort value to Byte."],
                "code": ["fun toByte(): Byte"]
              },
              {
                "name": "toDouble",
                "description": ["Converts this UShort value to Double."],
                "code": ["fun toDouble(): Double"]
              },
              {
                "name": "toFloat",
                "description": ["Converts this UShort value to Float."],
                "code": ["fun toFloat(): Float"]
              },
              {
                "name": "toInt",
                "description": ["Converts this UShort value to Int."],
                "code": ["fun toInt(): Int"]
              },
              {
                "name": "toLong",
                "description": ["Converts this UShort value to Long."],
                "code": ["fun toLong(): Long"]
              },
              {
                "name": "toShort",
                "description": ["Converts this UShort value to Short."],
                "code": ["fun toShort(): Short"]
              },
              {
                "name": "toString",
                "description": [
                  "Returns a string representation of the object."
                ],
                "code": ["fun toString(): String"]
              },
              {
                "name": "toUByte",
                "description": ["Converts this UShort value to UByte."],
                "code": ["fun toUByte(): UByte"]
              },
              {
                "name": "toUInt",
                "description": ["Converts this UShort value to UInt."],
                "code": ["fun toUInt(): UInt"]
              },
              {
                "name": "toULong",
                "description": ["Converts this UShort value to ULong."],
                "code": ["fun toULong(): ULong"]
              },
              {
                "name": "toUShort",
                "description": ["Returns this value."],
                "code": ["fun toUShort(): UShort"]
              },
              {
                "name": "xor",
                "description": [
                  "Performs a bitwise XOR operation between the two values."
                ],
                "code": ["infix fun xor(other: UShort): UShort"]
              }
            ]
          },
          {
            "name": "Companion Object Properties",
            "declarations": [
              {
                "name": "MAX_VALUE",
                "description": [
                  "A constant holding the maximum value an instance of UShort can have."
                ],
                "code": ["const val MAX_VALUE: UShort"]
              },
              {
                "name": "MIN_VALUE",
                "description": [
                  "A constant holding the minimum value an instance of UShort can have."
                ],
                "code": ["const val MIN_VALUE: UShort"]
              },
              {
                "name": "SIZE_BITS",
                "description": [
                  "The number of bits used to represent an instance of UShort in a binary form."
                ],
                "code": ["const val SIZE_BITS: Int"]
              },
              {
                "name": "SIZE_BYTES",
                "description": [
                  "The number of bytes used to represent an instance of UShort in a binary form."
                ],
                "code": ["const val SIZE_BYTES: Int"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "coerceAtLeast",
                "description": [
                  "Ensures that this value is not less than the specified minimumValue."
                ],
                "code": [
                  "fun UShort.coerceAtLeast(minimumValue: UShort): UShort",
                  "fun <T : Comparable<T>> T.coerceAtLeast(minimumValue: T): T"
                ]
              },
              {
                "name": "coerceAtMost",
                "description": [
                  "Ensures that this value is not greater than the specified maximumValue."
                ],
                "code": [
                  "fun UShort.coerceAtMost(maximumValue: UShort): UShort",
                  "fun <T : Comparable<T>> T.coerceAtMost(maximumValue: T): T"
                ]
              },
              {
                "name": "coerceIn",
                "description": [
                  "Ensures that this value lies in the specified range minimumValue..maximumValue.",
                  "Ensures that this value lies in the specified range."
                ],
                "code": [
                  "fun UShort.coerceIn(    minimumValue: UShort,     maximumValue: UShort): UShort",
                  "fun <T : Comparable<T>> T.coerceIn(    minimumValue: T?,     maximumValue: T?): T",
                  "fun <T : Comparable<T>> T.coerceIn(    range: ClosedFloatingPointRange<T>): T",
                  "fun <T : Comparable<T>> T.coerceIn(range: ClosedRange<T>): T"
                ]
              },
              {
                "name": "compareTo",
                "description": [
                  "Compares this object with the specified object for order. Returns zero if this object is equal\nto the specified other object, a negative number if it's less than other, or a positive number\nif it's greater than other."
                ],
                "code": ["infix fun <T> Comparable<T>.compareTo(other: T): Int"]
              },
              {
                "name": "convert",
                "description": [],
                "code": ["fun <R : Any> UShort.convert(): R"]
              },
              {
                "name": "countLeadingZeroBits",
                "description": [
                  "Counts the number of consecutive most significant bits that are zero in the binary representation of this UShort number."
                ],
                "code": ["fun UShort.countLeadingZeroBits(): Int"]
              },
              {
                "name": "countOneBits",
                "description": [
                  "Counts the number of set bits in the binary representation of this UShort number."
                ],
                "code": ["fun UShort.countOneBits(): Int"]
              },
              {
                "name": "countTrailingZeroBits",
                "description": [
                  "Counts the number of consecutive least significant bits that are zero in the binary representation of this UShort number."
                ],
                "code": ["fun UShort.countTrailingZeroBits(): Int"]
              },
              {
                "name": "downTo",
                "description": [
                  "Returns a progression from this value down to the specified to value with the step -1."
                ],
                "code": ["infix fun UShort.downTo(to: UShort): UIntProgression"]
              },
              {
                "name": "rangeTo",
                "description": [
                  "Creates a range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeTo(    that: T): ClosedRange<T>"
                ]
              },
              {
                "name": "rangeUntil",
                "description": [
                  "Creates an open-ended range from this Comparable value to the specified that value."
                ],
                "code": [
                  "operator fun <T : Comparable<T>> T.rangeUntil(    that: T): OpenEndRange<T>"
                ]
              },
              {
                "name": "rotateLeft",
                "description": [
                  "Rotates the binary representation of this UShort number left by the specified bitCount number of bits.\nThe most significant bits pushed out from the left side reenter the number as the least significant bits on the right side."
                ],
                "code": ["fun UShort.rotateLeft(bitCount: Int): UShort"]
              },
              {
                "name": "rotateRight",
                "description": [
                  "Rotates the binary representation of this UShort number right by the specified bitCount number of bits.\nThe least significant bits pushed out from the right side reenter the number as the most significant bits on the left side."
                ],
                "code": ["fun UShort.rotateRight(bitCount: Int): UShort"]
              },
              {
                "name": "takeHighestOneBit",
                "description": [
                  "Returns a number having a single bit set in the position of the most significant set bit of this UShort number,\nor zero, if this number is zero."
                ],
                "code": ["fun UShort.takeHighestOneBit(): UShort"]
              },
              {
                "name": "takeLowestOneBit",
                "description": [
                  "Returns a number having a single bit set in the position of the least significant set bit of this UShort number,\nor zero, if this number is zero."
                ],
                "code": ["fun UShort.takeLowestOneBit(): UShort"]
              },
              {
                "name": "toHexString",
                "description": [
                  "Formats this UShort value using the specified format."
                ],
                "code": [
                  "fun UShort.toHexString(    format: HexFormat = HexFormat.Default): String"
                ]
              },
              {
                "name": "toString",
                "description": [
                  "Returns a string representation of this Short value in the specified radix."
                ],
                "code": ["fun UShort.toString(radix: Int): String"]
              },
              {
                "name": "until",
                "description": [
                  "Returns a range from this value up to but excluding the specified to value."
                ],
                "code": ["infix fun UShort.until(to: UShort): UIntRange"]
              }
            ]
          }
        ]
      },
      {
        "name": "UShortArray",
        "description": [],
        "code": ["class UShortArray : Collection<UShort>"],
        "url": "-u-short-array/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Creates a new array of the specified size, with all elements initialized to zero."
                ],
                "code": ["UShortArray(size: Int)"]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "size",
                "description": ["Returns the number of elements in the array."],
                "code": ["val size: Int"]
              }
            ]
          },
          {
            "name": "Functions",
            "declarations": [
              {
                "name": "contains",
                "description": [],
                "code": ["fun contains(element: UShort): Boolean"]
              },
              {
                "name": "containsAll",
                "description": [],
                "code": [
                  "fun containsAll(elements: Collection<UShort>): Boolean"
                ]
              },
              {
                "name": "get",
                "description": [
                  "Returns the array element at the given index. This method can be called using the index operator."
                ],
                "code": ["operator fun get(index: Int): UShort"]
              },
              {
                "name": "isEmpty",
                "description": [],
                "code": ["fun isEmpty(): Boolean"]
              },
              {
                "name": "iterator",
                "description": [
                  "Creates an iterator over the elements of the array."
                ],
                "code": ["operator fun iterator(): Iterator<UShort>"]
              },
              {
                "name": "set",
                "description": [
                  "Sets the element at the given index to the given value. This method can be called using the index operator."
                ],
                "code": ["operator fun set(index: Int, value: UShort)"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "indices",
                "description": [
                  "Returns the range of valid indices for the array."
                ],
                "code": ["val UShortArray.indices: IntRange"]
              },
              {
                "name": "lastIndex",
                "description": ["Returns the last valid index for the array."],
                "code": ["val UShortArray.lastIndex: Int"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "all",
                "description": [
                  "Returns true if all elements match the given predicate."
                ],
                "code": [
                  "fun UShortArray.all(predicate: (UShort) -> Boolean): Boolean",
                  "fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean"
                ]
              },
              {
                "name": "any",
                "description": [
                  "Returns true if array has at least one element.",
                  "Returns true if at least one element matches the given predicate."
                ],
                "code": [
                  "fun UShortArray.any(): Boolean",
                  "fun UShortArray.any(predicate: (UShort) -> Boolean): Boolean",
                  "fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean"
                ]
              },
              {
                "name": "asIterable",
                "description": ["Returns this collection as an Iterable."],
                "code": ["fun <T> Iterable<T>.asIterable(): Iterable<T>"]
              },
              {
                "name": "asSequence",
                "description": [
                  "Creates a Sequence instance that wraps the original collection returning its elements when being iterated."
                ],
                "code": ["fun <T> Iterable<T>.asSequence(): Sequence<T>"]
              },
              {
                "name": "asShortArray",
                "description": [
                  "Returns an array of type ShortArray, which is a view of this array where each element is a signed reinterpretation\nof the corresponding element of this array."
                ],
                "code": ["fun UShortArray.asShortArray(): ShortArray"]
              },
              {
                "name": "associate",
                "description": [
                  "Returns a Map containing key-value pairs provided by transform function\napplied to elements of the given collection."
                ],
                "code": [
                  "fun <T, K, V> Iterable<T>.associate(    transform: (T) -> Pair<K, V>): Map<K, V>"
                ]
              },
              {
                "name": "associateBy",
                "description": [
                  "Returns a Map containing the elements from the given collection indexed by the key\nreturned from keySelector function applied to each element.",
                  "Returns a Map containing the values provided by valueTransform and indexed by keySelector functions applied to elements of the given collection."
                ],
                "code": [
                  "fun <T, K> Iterable<T>.associateBy(    keySelector: (T) -> K): Map<K, T>",
                  "fun <T, K, V> Iterable<T>.associateBy(    keySelector: (T) -> K,     valueTransform: (T) -> V): Map<K, V>"
                ]
              },
              {
                "name": "associateByTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function applied to each element of the given collection\nand value is the element itself.",
                  "Populates and returns the destination mutable map with key-value pairs,\nwhere key is provided by the keySelector function and\nand value is provided by the valueTransform function applied to elements of the given collection."
                ],
                "code": [
                  "fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(    destination: M,     keySelector: (T) -> K): M",
                  "fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(    destination: M,     keySelector: (T) -> K,     valueTransform: (T) -> V): M"
                ]
              },
              {
                "name": "associateTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs\nprovided by transform function applied to each element of the given collection."
                ],
                "code": [
                  "fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(    destination: M,     transform: (T) -> Pair<K, V>): M"
                ]
              },
              {
                "name": "associateWith",
                "description": [
                  "Returns a Map where keys are elements from the given array and values are\nproduced by the valueSelector function applied to each element.",
                  "Returns a Map where keys are elements from the given collection and values are\nproduced by the valueSelector function applied to each element."
                ],
                "code": [
                  "fun <V> UShortArray.associateWith(    valueSelector: (UShort) -> V): Map<UShort, V>",
                  "fun <K, V> Iterable<K>.associateWith(    valueSelector: (K) -> V): Map<K, V>"
                ]
              },
              {
                "name": "associateWithTo",
                "description": [
                  "Populates and returns the destination mutable map with key-value pairs for each element of the given array,\nwhere key is the element itself and value is provided by the valueSelector function applied to that key.",
                  "Populates and returns the destination mutable map with key-value pairs for each element of the given collection,\nwhere key is the element itself and value is provided by the valueSelector function applied to that key."
                ],
                "code": [
                  "fun <V, M : MutableMap<in UShort, in V>> UShortArray.associateWithTo(    destination: M,     valueSelector: (UShort) -> V): M",
                  "fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(    destination: M,     valueSelector: (K) -> V): M"
                ]
              },
              {
                "name": "binarySearch",
                "description": [
                  "Searches the array or the range of the array for the provided element using the binary search algorithm.\nThe array is expected to be sorted, otherwise the result is undefined."
                ],
                "code": [
                  "fun UShortArray.binarySearch(    element: UShort,     fromIndex: Int = 0,     toIndex: Int = size): Int"
                ]
              },
              {
                "name": "chunked",
                "description": [
                  "Splits this collection into a list of lists each not exceeding the given size.",
                  "Splits this collection into several lists each not exceeding the given size\nand applies the given transform function to an each."
                ],
                "code": [
                  "fun <T> Iterable<T>.chunked(size: Int): List<List<T>>",
                  "fun <T, R> Iterable<T>.chunked(    size: Int,     transform: (List<T>) -> R): List<R>"
                ]
              },
              {
                "name": "component1",
                "description": ["Returns 1st element from the array."],
                "code": ["operator fun UShortArray.component1(): UShort"]
              },
              {
                "name": "component2",
                "description": ["Returns 2nd element from the array."],
                "code": ["operator fun UShortArray.component2(): UShort"]
              },
              {
                "name": "component3",
                "description": ["Returns 3rd element from the array."],
                "code": ["operator fun UShortArray.component3(): UShort"]
              },
              {
                "name": "component4",
                "description": ["Returns 4th element from the array."],
                "code": ["operator fun UShortArray.component4(): UShort"]
              },
              {
                "name": "component5",
                "description": ["Returns 5th element from the array."],
                "code": ["operator fun UShortArray.component5(): UShort"]
              },
              {
                "name": "contains",
                "description": [
                  "Returns true if element is found in the collection."
                ],
                "code": [
                  "operator fun <T> Iterable<T>.contains(element: T): Boolean"
                ]
              },
              {
                "name": "containsAll",
                "description": [
                  "Checks if all elements in the specified collection are contained in this collection."
                ],
                "code": [
                  "fun <T> Collection<T>.containsAll(    elements: Collection<T>): Boolean"
                ]
              },
              {
                "name": "contentEquals",
                "description": [
                  "Returns true if the two specified arrays are structurally equal to one another,\ni.e. contain the same number of the same elements in the same order."
                ],
                "code": [
                  "infix fun UShortArray?.contentEquals(    other: UShortArray?): Boolean",
                  "infix fun UShortArray.contentEquals(    other: UShortArray): Boolean"
                ]
              },
              {
                "name": "contentHashCode",
                "description": [
                  "Returns a hash code based on the contents of this array as if it is List."
                ],
                "code": [
                  "fun UShortArray?.contentHashCode(): Int",
                  "fun UShortArray.contentHashCode(): Int"
                ]
              },
              {
                "name": "contentToString",
                "description": [
                  "Returns a string representation of the contents of the specified array as if it is List."
                ],
                "code": [
                  "fun UShortArray?.contentToString(): String",
                  "fun UShortArray.contentToString(): String"
                ]
              },
              {
                "name": "copyInto",
                "description": [
                  "Copies this array or its subrange into the destination array and returns that array."
                ],
                "code": [
                  "fun UShortArray.copyInto(    destination: UShortArray,     destinationOffset: Int = 0,     startIndex: Int = 0,     endIndex: Int = size): UShortArray"
                ]
              },
              {
                "name": "copyOf",
                "description": [
                  "Returns new array which is a copy of the original array.",
                  "Returns new array which is a copy of the original array, resized to the given newSize.\nThe copy is either truncated or padded at the end with zero values if necessary."
                ],
                "code": [
                  "fun UShortArray.copyOf(): UShortArray",
                  "fun UShortArray.copyOf(newSize: Int): UShortArray"
                ]
              },
              {
                "name": "copyOfRange",
                "description": [
                  "Returns a new array which is a copy of the specified range of the original array."
                ],
                "code": [
                  "fun UShortArray.copyOfRange(    fromIndex: Int,     toIndex: Int): UShortArray"
                ]
              },
              {
                "name": "count",
                "description": [
                  "Returns the number of elements matching the given predicate."
                ],
                "code": [
                  "fun UShortArray.count(predicate: (UShort) -> Boolean): Int",
                  "fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int"
                ]
              },
              {
                "name": "distinct",
                "description": [
                  "Returns a list containing only distinct elements from the given collection."
                ],
                "code": ["fun <T> Iterable<T>.distinct(): List<T>"]
              },
              {
                "name": "distinctBy",
                "description": [
                  "Returns a list containing only elements from the given collection\nhaving distinct keys returned by the given selector function."
                ],
                "code": [
                  "fun <T, K> Iterable<T>.distinctBy(    selector: (T) -> K): List<T>"
                ]
              },
              {
                "name": "drop",
                "description": [
                  "Returns a list containing all elements except first n elements."
                ],
                "code": ["fun UShortArray.drop(n: Int): List<UShort>"]
              },
              {
                "name": "dropLast",
                "description": [
                  "Returns a list containing all elements except last n elements."
                ],
                "code": ["fun UShortArray.dropLast(n: Int): List<UShort>"]
              },
              {
                "name": "dropLastWhile",
                "description": [
                  "Returns a list containing all elements except last elements that satisfy the given predicate."
                ],
                "code": [
                  "fun UShortArray.dropLastWhile(    predicate: (UShort) -> Boolean): List<UShort>"
                ]
              },
              {
                "name": "dropWhile",
                "description": [
                  "Returns a list containing all elements except first elements that satisfy the given predicate."
                ],
                "code": [
                  "fun UShortArray.dropWhile(    predicate: (UShort) -> Boolean): List<UShort>",
                  "fun <T> Iterable<T>.dropWhile(    predicate: (T) -> Boolean): List<T>"
                ]
              },
              {
                "name": "elementAtOrElse",
                "description": [
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array.",
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this collection."
                ],
                "code": [
                  "fun UShortArray.elementAtOrElse(    index: Int,     defaultValue: (Int) -> UShort): UShort",
                  "fun <T> Iterable<T>.elementAtOrElse(    index: Int,     defaultValue: (Int) -> T): T"
                ]
              },
              {
                "name": "elementAtOrNull",
                "description": [
                  "Returns an element at the given index or null if the index is out of bounds of this array."
                ],
                "code": ["fun UShortArray.elementAtOrNull(index: Int): UShort?"]
              },
              {
                "name": "fill",
                "description": [
                  "Fills this array or its subrange with the specified element value."
                ],
                "code": [
                  "fun UShortArray.fill(    element: UShort,     fromIndex: Int = 0,     toIndex: Int = size)"
                ]
              },
              {
                "name": "filter",
                "description": [
                  "Returns a list containing only elements matching the given predicate."
                ],
                "code": [
                  "fun UShortArray.filter(    predicate: (UShort) -> Boolean): List<UShort>",
                  "fun <T> Iterable<T>.filter(    predicate: (T) -> Boolean): List<T>"
                ]
              },
              {
                "name": "filterIndexed",
                "description": [
                  "Returns a list containing only elements matching the given predicate."
                ],
                "code": [
                  "fun UShortArray.filterIndexed(    predicate: (index: Int, UShort) -> Boolean): List<UShort>",
                  "fun <T> Iterable<T>.filterIndexed(    predicate: (index: Int, T) -> Boolean): List<T>"
                ]
              },
              {
                "name": "filterIndexedTo",
                "description": [
                  "Appends all elements matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in UShort>> UShortArray.filterIndexedTo(    destination: C,     predicate: (index: Int, UShort) -> Boolean): C",
                  "fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(    destination: C,     predicate: (index: Int, T) -> Boolean): C"
                ]
              },
              {
                "name": "filterIsInstance",
                "description": [
                  "Returns a list containing all elements that are instances of specified type parameter R."
                ],
                "code": ["fun <R> Iterable<*>.filterIsInstance(): List<R>"]
              },
              {
                "name": "filterIsInstanceTo",
                "description": [
                  "Appends all elements that are instances of specified type parameter R to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(    destination: C): C"
                ]
              },
              {
                "name": "filterNot",
                "description": [
                  "Returns a list containing all elements not matching the given predicate."
                ],
                "code": [
                  "fun UShortArray.filterNot(    predicate: (UShort) -> Boolean): List<UShort>",
                  "fun <T> Iterable<T>.filterNot(    predicate: (T) -> Boolean): List<T>"
                ]
              },
              {
                "name": "filterNotNull",
                "description": [
                  "Returns a list containing all elements that are not null."
                ],
                "code": ["fun <T : Any> Iterable<T?>.filterNotNull(): List<T>"]
              },
              {
                "name": "filterNotNullTo",
                "description": [
                  "Appends all elements that are not null to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(    destination: C): C"
                ]
              },
              {
                "name": "filterNotTo",
                "description": [
                  "Appends all elements not matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in UShort>> UShortArray.filterNotTo(    destination: C,     predicate: (UShort) -> Boolean): C",
                  "fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(    destination: C,     predicate: (T) -> Boolean): C"
                ]
              },
              {
                "name": "filterTo",
                "description": [
                  "Appends all elements matching the given predicate to the given destination."
                ],
                "code": [
                  "fun <C : MutableCollection<in UShort>> UShortArray.filterTo(    destination: C,     predicate: (UShort) -> Boolean): C",
                  "fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(    destination: C,     predicate: (T) -> Boolean): C"
                ]
              },
              {
                "name": "find",
                "description": [
                  "Returns the first element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun UShortArray.find(predicate: (UShort) -> Boolean): UShort?",
                  "fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T?"
                ]
              },
              {
                "name": "findLast",
                "description": [
                  "Returns the last element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun UShortArray.findLast(    predicate: (UShort) -> Boolean): UShort?",
                  "fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T?"
                ]
              },
              {
                "name": "first",
                "description": [
                  "Returns the first element.",
                  "Returns the first element matching the given predicate."
                ],
                "code": [
                  "fun UShortArray.first(): UShort",
                  "fun UShortArray.first(predicate: (UShort) -> Boolean): UShort",
                  "fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T"
                ]
              },
              {
                "name": "firstNotNullOf",
                "description": [
                  "Returns the first non-null value produced by transform function being applied to elements of this collection in iteration order,\nor throws NoSuchElementException if no non-null value was produced."
                ],
                "code": [
                  "fun <T, R : Any> Iterable<T>.firstNotNullOf(    transform: (T) -> R?): R"
                ]
              },
              {
                "name": "firstNotNullOfOrNull",
                "description": [
                  "Returns the first non-null value produced by transform function being applied to elements of this collection in iteration order,\nor null if no non-null value was produced."
                ],
                "code": [
                  "fun <T, R : Any> Iterable<T>.firstNotNullOfOrNull(    transform: (T) -> R?): R?"
                ]
              },
              {
                "name": "firstOrNull",
                "description": [
                  "Returns the first element, or null if the array is empty.",
                  "Returns the first element matching the given predicate, or null if element was not found."
                ],
                "code": [
                  "fun UShortArray.firstOrNull(): UShort?",
                  "fun UShortArray.firstOrNull(    predicate: (UShort) -> Boolean): UShort?",
                  "fun <T> Iterable<T>.firstOrNull(    predicate: (T) -> Boolean): T?"
                ]
              },
              {
                "name": "flatMap",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element of original array.",
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element of original collection."
                ],
                "code": [
                  "fun <R> UShortArray.flatMap(    transform: (UShort) -> Iterable<R>): List<R>",
                  "fun <T, R> Iterable<T>.flatMap(    transform: (T) -> Iterable<R>): List<R>",
                  "fun <T, R> Iterable<T>.flatMap(    transform: (T) -> Sequence<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexed",
                "description": [
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element\nand its index in the original array.",
                  "Returns a single list of all elements yielded from results of transform function being invoked on each element\nand its index in the original collection."
                ],
                "code": [
                  "fun <R> UShortArray.flatMapIndexed(    transform: (index: Int, UShort) -> Iterable<R>): List<R>",
                  "fun <T, R> Iterable<T>.flatMapIndexed(    transform: (index: Int, T) -> Iterable<R>): List<R>",
                  "fun <T, R> Iterable<T>.flatMapIndexed(    transform: (index: Int, T) -> Sequence<R>): List<R>"
                ]
              },
              {
                "name": "flatMapIndexedTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each element\nand its index in the original array, to the given destination.",
                  "Appends all elements yielded from results of transform function being invoked on each element\nand its index in the original collection, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> UShortArray.flatMapIndexedTo(    destination: C,     transform: (index: Int, UShort) -> Iterable<R>): C",
                  "fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(    destination: C,     transform: (index: Int, T) -> Iterable<R>): C",
                  "fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(    destination: C,     transform: (index: Int, T) -> Sequence<R>): C"
                ]
              },
              {
                "name": "flatMapTo",
                "description": [
                  "Appends all elements yielded from results of transform function being invoked on each element of original array, to the given destination.",
                  "Appends all elements yielded from results of transform function being invoked on each element of original collection, to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> UShortArray.flatMapTo(    destination: C,     transform: (UShort) -> Iterable<R>): C",
                  "fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(    destination: C,     transform: (T) -> Iterable<R>): C",
                  "fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(    destination: C,     transform: (T) -> Sequence<R>): C"
                ]
              },
              {
                "name": "fold",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun <R> UShortArray.fold(    initial: R,     operation: (acc: R, UShort) -> R): R",
                  "fun <T, R> Iterable<T>.fold(    initial: R,     operation: (acc: R, T) -> R): R"
                ]
              },
              {
                "name": "foldIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element with its index in the original array.",
                  "Accumulates value starting with initial value and applying operation from left to right\nto current accumulator value and each element with its index in the original collection."
                ],
                "code": [
                  "fun <R> UShortArray.foldIndexed(    initial: R,     operation: (index: Int, acc: R, UShort) -> R): R",
                  "fun <T, R> Iterable<T>.foldIndexed(    initial: R,     operation: (index: Int, acc: R, T) -> R): R"
                ]
              },
              {
                "name": "foldRight",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun <R> UShortArray.foldRight(    initial: R,     operation: (UShort, acc: R) -> R): R"
                ]
              },
              {
                "name": "foldRightIndexed",
                "description": [
                  "Accumulates value starting with initial value and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun <R> UShortArray.foldRightIndexed(    initial: R,     operation: (index: Int, UShort, acc: R) -> R): R"
                ]
              },
              {
                "name": "forEach",
                "description": ["Performs the given action on each element."],
                "code": [
                  "fun UShortArray.forEach(action: (UShort) -> Unit)",
                  "fun <T> Iterable<T>.forEach(action: (T) -> Unit)"
                ]
              },
              {
                "name": "forEachIndexed",
                "description": [
                  "Performs the given action on each element, providing sequential index with the element."
                ],
                "code": [
                  "fun UShortArray.forEachIndexed(    action: (index: Int, UShort) -> Unit)",
                  "fun <T> Iterable<T>.forEachIndexed(    action: (index: Int, T) -> Unit)"
                ]
              },
              {
                "name": "getOrElse",
                "description": [
                  "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
                ],
                "code": [
                  "fun UShortArray.getOrElse(    index: Int,     defaultValue: (Int) -> UShort): UShort"
                ]
              },
              {
                "name": "getOrNull",
                "description": [
                  "Returns an element at the given index or null if the index is out of bounds of this array."
                ],
                "code": ["fun UShortArray.getOrNull(index: Int): UShort?"]
              },
              {
                "name": "groupBy",
                "description": [
                  "Groups elements of the original array by the key returned by the given keySelector function\napplied to each element and returns a map where each group key is associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original array\nby the key returned by the given keySelector function applied to the element\nand returns a map where each group key is associated with a list of corresponding values.",
                  "Groups elements of the original collection by the key returned by the given keySelector function\napplied to each element and returns a map where each group key is associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original collection\nby the key returned by the given keySelector function applied to the element\nand returns a map where each group key is associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K> UShortArray.groupBy(    keySelector: (UShort) -> K): Map<K, List<UShort>>",
                  "fun <K, V> UShortArray.groupBy(    keySelector: (UShort) -> K,     valueTransform: (UShort) -> V): Map<K, List<V>>",
                  "fun <T, K> Iterable<T>.groupBy(    keySelector: (T) -> K): Map<K, List<T>>",
                  "fun <T, K, V> Iterable<T>.groupBy(    keySelector: (T) -> K,     valueTransform: (T) -> V): Map<K, List<V>>"
                ]
              },
              {
                "name": "groupByTo",
                "description": [
                  "Groups elements of the original array by the key returned by the given keySelector function\napplied to each element and puts to the destination map each group key associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original array\nby the key returned by the given keySelector function applied to the element\nand puts to the destination map each group key associated with a list of corresponding values.",
                  "Groups elements of the original collection by the key returned by the given keySelector function\napplied to each element and puts to the destination map each group key associated with a list of corresponding elements.",
                  "Groups values returned by the valueTransform function applied to each element of the original collection\nby the key returned by the given keySelector function applied to the element\nand puts to the destination map each group key associated with a list of corresponding values."
                ],
                "code": [
                  "fun <K, M : MutableMap<in K, MutableList<UShort>>> UShortArray.groupByTo(    destination: M,     keySelector: (UShort) -> K): M",
                  "fun <K, V, M : MutableMap<in K, MutableList<V>>> UShortArray.groupByTo(    destination: M,     keySelector: (UShort) -> K,     valueTransform: (UShort) -> V): M",
                  "fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(    destination: M,     keySelector: (T) -> K): M",
                  "fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(    destination: M,     keySelector: (T) -> K,     valueTransform: (T) -> V): M"
                ]
              },
              {
                "name": "groupingBy",
                "description": [
                  "Creates a Grouping source from a collection to be used later with one of group-and-fold operations\nusing the specified keySelector function to extract a key from each element."
                ],
                "code": [
                  "fun <T, K> Iterable<T>.groupingBy(    keySelector: (T) -> K): Grouping<T, K>"
                ]
              },
              {
                "name": "ifEmpty",
                "description": [
                  "Returns this array if it's not empty\nor the result of calling defaultValue function if the array is empty."
                ],
                "code": [
                  "fun <C, R> C.ifEmpty(    defaultValue: () -> R): R where C : Array<*>, C : R"
                ]
              },
              {
                "name": "indexOf",
                "description": [
                  "Returns first index of element, or -1 if the array does not contain element.",
                  "Returns first index of element, or -1 if the collection does not contain element."
                ],
                "code": [
                  "fun UShortArray.indexOf(element: UShort): Int",
                  "fun <T> Iterable<T>.indexOf(element: T): Int"
                ]
              },
              {
                "name": "indexOfFirst",
                "description": [
                  "Returns index of the first element matching the given predicate, or -1 if the array does not contain such element.",
                  "Returns index of the first element matching the given predicate, or -1 if the collection does not contain such element."
                ],
                "code": [
                  "fun UShortArray.indexOfFirst(    predicate: (UShort) -> Boolean): Int",
                  "fun <T> Iterable<T>.indexOfFirst(    predicate: (T) -> Boolean): Int"
                ]
              },
              {
                "name": "indexOfLast",
                "description": [
                  "Returns index of the last element matching the given predicate, or -1 if the array does not contain such element.",
                  "Returns index of the last element matching the given predicate, or -1 if the collection does not contain such element."
                ],
                "code": [
                  "fun UShortArray.indexOfLast(    predicate: (UShort) -> Boolean): Int",
                  "fun <T> Iterable<T>.indexOfLast(    predicate: (T) -> Boolean): Int"
                ]
              },
              {
                "name": "intersect",
                "description": [
                  "Returns a set containing all elements that are contained by both this collection and the specified collection."
                ],
                "code": [
                  "infix fun <T> Iterable<T>.intersect(    other: Iterable<T>): Set<T>"
                ]
              },
              {
                "name": "isNotEmpty",
                "description": ["Returns true if the collection is not empty."],
                "code": ["fun <T> Collection<T>.isNotEmpty(): Boolean"]
              },
              {
                "name": "isNullOrEmpty",
                "description": [
                  "Returns true if this nullable collection is either null or empty."
                ],
                "code": ["fun <T> Collection<T>?.isNullOrEmpty(): Boolean"]
              },
              {
                "name": "joinTo",
                "description": [
                  "Appends the string from all the elements separated using separator and using the given prefix and postfix if supplied."
                ],
                "code": [
                  "fun <T, A : Appendable> Iterable<T>.joinTo(    buffer: A,     separator: CharSequence = \", \",     prefix: CharSequence = \"\",     postfix: CharSequence = \"\",     limit: Int = -1,     truncated: CharSequence = \"...\",     transform: ((T) -> CharSequence)? = null): A"
                ]
              },
              {
                "name": "joinToString",
                "description": [
                  "Creates a string from all the elements separated using separator and using the given prefix and postfix if supplied."
                ],
                "code": [
                  "fun <T> Iterable<T>.joinToString(    separator: CharSequence = \", \",     prefix: CharSequence = \"\",     postfix: CharSequence = \"\",     limit: Int = -1,     truncated: CharSequence = \"...\",     transform: ((T) -> CharSequence)? = null): String"
                ]
              },
              {
                "name": "last",
                "description": [
                  "Returns the last element.",
                  "Returns the last element matching the given predicate."
                ],
                "code": [
                  "fun UShortArray.last(): UShort",
                  "fun UShortArray.last(predicate: (UShort) -> Boolean): UShort",
                  "fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T"
                ]
              },
              {
                "name": "lastIndexOf",
                "description": [
                  "Returns last index of element, or -1 if the array does not contain element.",
                  "Returns last index of element, or -1 if the collection does not contain element."
                ],
                "code": [
                  "fun UShortArray.lastIndexOf(element: UShort): Int",
                  "fun <T> Iterable<T>.lastIndexOf(element: T): Int"
                ]
              },
              {
                "name": "lastOrNull",
                "description": [
                  "Returns the last element, or null if the array is empty.",
                  "Returns the last element matching the given predicate, or null if no such element was found."
                ],
                "code": [
                  "fun UShortArray.lastOrNull(): UShort?",
                  "fun UShortArray.lastOrNull(    predicate: (UShort) -> Boolean): UShort?",
                  "fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T?"
                ]
              },
              {
                "name": "map",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each element in the original array.",
                  "Returns a list containing the results of applying the given transform function\nto each element in the original collection."
                ],
                "code": [
                  "fun <R> UShortArray.map(transform: (UShort) -> R): List<R>",
                  "fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexed",
                "description": [
                  "Returns a list containing the results of applying the given transform function\nto each element and its index in the original array.",
                  "Returns a list containing the results of applying the given transform function\nto each element and its index in the original collection."
                ],
                "code": [
                  "fun <R> UShortArray.mapIndexed(    transform: (index: Int, UShort) -> R): List<R>",
                  "fun <T, R> Iterable<T>.mapIndexed(    transform: (index: Int, T) -> R): List<R>"
                ]
              },
              {
                "name": "mapIndexedNotNull",
                "description": [
                  "Returns a list containing only the non-null results of applying the given transform function\nto each element and its index in the original collection."
                ],
                "code": [
                  "fun <T, R : Any> Iterable<T>.mapIndexedNotNull(    transform: (index: Int, T) -> R?): List<R>"
                ]
              },
              {
                "name": "mapIndexedNotNullTo",
                "description": [
                  "Applies the given transform function to each element and its index in the original collection\nand appends only the non-null results to the given destination."
                ],
                "code": [
                  "fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(    destination: C,     transform: (index: Int, T) -> R?): C"
                ]
              },
              {
                "name": "mapIndexedTo",
                "description": [
                  "Applies the given transform function to each element and its index in the original array\nand appends the results to the given destination.",
                  "Applies the given transform function to each element and its index in the original collection\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> UShortArray.mapIndexedTo(    destination: C,     transform: (index: Int, UShort) -> R): C",
                  "fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(    destination: C,     transform: (index: Int, T) -> R): C"
                ]
              },
              {
                "name": "mapNotNull",
                "description": [
                  "Returns a list containing only the non-null results of applying the given transform function\nto each element in the original collection."
                ],
                "code": [
                  "fun <T, R : Any> Iterable<T>.mapNotNull(    transform: (T) -> R?): List<R>"
                ]
              },
              {
                "name": "mapNotNullTo",
                "description": [
                  "Applies the given transform function to each element in the original collection\nand appends only the non-null results to the given destination."
                ],
                "code": [
                  "fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(    destination: C,     transform: (T) -> R?): C"
                ]
              },
              {
                "name": "mapTo",
                "description": [
                  "Applies the given transform function to each element of the original array\nand appends the results to the given destination.",
                  "Applies the given transform function to each element of the original collection\nand appends the results to the given destination."
                ],
                "code": [
                  "fun <R, C : MutableCollection<in R>> UShortArray.mapTo(    destination: C,     transform: (UShort) -> R): C",
                  "fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(    destination: C,     transform: (T) -> R): C"
                ]
              },
              {
                "name": "maxByOrNull",
                "description": [
                  "Returns the first element yielding the largest value of the given function or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> UShortArray.maxByOrNull(    selector: (UShort) -> R): UShort?",
                  "fun <T, R : Comparable<R>> Iterable<T>.maxByOrNull(    selector: (T) -> R): T?"
                ]
              },
              {
                "name": "maxOf",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each element in the array.",
                  "Returns the largest value among all values produced by selector function\napplied to each element in the collection."
                ],
                "code": [
                  "fun UShortArray.maxOf(selector: (UShort) -> Double): Double",
                  "fun UShortArray.maxOf(selector: (UShort) -> Float): Float",
                  "fun <R : Comparable<R>> UShortArray.maxOf(    selector: (UShort) -> R): R",
                  "fun <T> Iterable<T>.maxOf(selector: (T) -> Double): Double",
                  "fun <T> Iterable<T>.maxOf(selector: (T) -> Float): Float",
                  "fun <T, R : Comparable<R>> Iterable<T>.maxOf(    selector: (T) -> R): R"
                ]
              },
              {
                "name": "maxOfOrNull",
                "description": [
                  "Returns the largest value among all values produced by selector function\napplied to each element in the array or null if there are no elements.",
                  "Returns the largest value among all values produced by selector function\napplied to each element in the collection or null if there are no elements."
                ],
                "code": [
                  "fun UShortArray.maxOfOrNull(    selector: (UShort) -> Double): Double?",
                  "fun UShortArray.maxOfOrNull(    selector: (UShort) -> Float): Float?",
                  "fun <R : Comparable<R>> UShortArray.maxOfOrNull(    selector: (UShort) -> R): R?",
                  "fun <T> Iterable<T>.maxOfOrNull(    selector: (T) -> Double): Double?",
                  "fun <T> Iterable<T>.maxOfOrNull(    selector: (T) -> Float): Float?",
                  "fun <T, R : Comparable<R>> Iterable<T>.maxOfOrNull(    selector: (T) -> R): R?"
                ]
              },
              {
                "name": "maxOfWith",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the array.",
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the collection."
                ],
                "code": [
                  "fun <R> UShortArray.maxOfWith(    comparator: Comparator<in R>,     selector: (UShort) -> R): R",
                  "fun <T, R> Iterable<T>.maxOfWith(    comparator: Comparator<in R>,     selector: (T) -> R): R"
                ]
              },
              {
                "name": "maxOfWithOrNull",
                "description": [
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the array or null if there are no elements.",
                  "Returns the largest value according to the provided comparator\namong all values produced by selector function applied to each element in the collection or null if there are no elements."
                ],
                "code": [
                  "fun <R> UShortArray.maxOfWithOrNull(    comparator: Comparator<in R>,     selector: (UShort) -> R): R?",
                  "fun <T, R> Iterable<T>.maxOfWithOrNull(    comparator: Comparator<in R>,     selector: (T) -> R): R?"
                ]
              },
              {
                "name": "maxOrNull",
                "description": [
                  "Returns the largest element or null if there are no elements."
                ],
                "code": ["fun UShortArray.maxOrNull(): UShort?"]
              },
              {
                "name": "maxWith",
                "description": [
                  "Returns the first element having the largest value according to the provided comparator."
                ],
                "code": [
                  "fun UShortArray.maxWith(    comparator: Comparator<in UShort>): UShort",
                  "fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T",
                  "fun UShortArray.maxWith(    comparator: Comparator<in UShort>): UShort?"
                ]
              },
              {
                "name": "maxWithOrNull",
                "description": [
                  "Returns the first element having the largest value according to the provided comparator or null if there are no elements."
                ],
                "code": [
                  "fun UShortArray.maxWithOrNull(    comparator: Comparator<in UShort>): UShort?",
                  "fun <T> Iterable<T>.maxWithOrNull(    comparator: Comparator<in T>): T?"
                ]
              },
              {
                "name": "minByOrNull",
                "description": [
                  "Returns the first element yielding the smallest value of the given function or null if there are no elements."
                ],
                "code": [
                  "fun <R : Comparable<R>> UShortArray.minByOrNull(    selector: (UShort) -> R): UShort?",
                  "fun <T, R : Comparable<R>> Iterable<T>.minByOrNull(    selector: (T) -> R): T?"
                ]
              },
              {
                "name": "minOf",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the array.",
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the collection."
                ],
                "code": [
                  "fun UShortArray.minOf(selector: (UShort) -> Double): Double",
                  "fun UShortArray.minOf(selector: (UShort) -> Float): Float",
                  "fun <R : Comparable<R>> UShortArray.minOf(    selector: (UShort) -> R): R",
                  "fun <T> Iterable<T>.minOf(selector: (T) -> Double): Double",
                  "fun <T> Iterable<T>.minOf(selector: (T) -> Float): Float",
                  "fun <T, R : Comparable<R>> Iterable<T>.minOf(    selector: (T) -> R): R"
                ]
              },
              {
                "name": "minOfOrNull",
                "description": [
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the array or null if there are no elements.",
                  "Returns the smallest value among all values produced by selector function\napplied to each element in the collection or null if there are no elements."
                ],
                "code": [
                  "fun UShortArray.minOfOrNull(    selector: (UShort) -> Double): Double?",
                  "fun UShortArray.minOfOrNull(    selector: (UShort) -> Float): Float?",
                  "fun <R : Comparable<R>> UShortArray.minOfOrNull(    selector: (UShort) -> R): R?",
                  "fun <T> Iterable<T>.minOfOrNull(    selector: (T) -> Double): Double?",
                  "fun <T> Iterable<T>.minOfOrNull(    selector: (T) -> Float): Float?",
                  "fun <T, R : Comparable<R>> Iterable<T>.minOfOrNull(    selector: (T) -> R): R?"
                ]
              },
              {
                "name": "minOfWith",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the array.",
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the collection."
                ],
                "code": [
                  "fun <R> UShortArray.minOfWith(    comparator: Comparator<in R>,     selector: (UShort) -> R): R",
                  "fun <T, R> Iterable<T>.minOfWith(    comparator: Comparator<in R>,     selector: (T) -> R): R"
                ]
              },
              {
                "name": "minOfWithOrNull",
                "description": [
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the array or null if there are no elements.",
                  "Returns the smallest value according to the provided comparator\namong all values produced by selector function applied to each element in the collection or null if there are no elements."
                ],
                "code": [
                  "fun <R> UShortArray.minOfWithOrNull(    comparator: Comparator<in R>,     selector: (UShort) -> R): R?",
                  "fun <T, R> Iterable<T>.minOfWithOrNull(    comparator: Comparator<in R>,     selector: (T) -> R): R?"
                ]
              },
              {
                "name": "minOrNull",
                "description": [
                  "Returns the smallest element or null if there are no elements."
                ],
                "code": ["fun UShortArray.minOrNull(): UShort?"]
              },
              {
                "name": "minus",
                "description": [
                  "Returns a list containing all elements of the original collection without the first occurrence of the given element.",
                  "Returns a list containing all elements of the original collection except the elements contained in the given elements array.",
                  "Returns a list containing all elements of the original collection except the elements contained in the given elements collection.",
                  "Returns a list containing all elements of the original collection except the elements contained in the given elements sequence."
                ],
                "code": [
                  "operator fun <T> Iterable<T>.minus(element: T): List<T>",
                  "operator fun <T> Iterable<T>.minus(    elements: Array<out T>): List<T>",
                  "operator fun <T> Iterable<T>.minus(    elements: Iterable<T>): List<T>",
                  "operator fun <T> Iterable<T>.minus(    elements: Sequence<T>): List<T>"
                ]
              },
              {
                "name": "minusElement",
                "description": [
                  "Returns a list containing all elements of the original collection without the first occurrence of the given element."
                ],
                "code": [
                  "fun <T> Iterable<T>.minusElement(element: T): List<T>"
                ]
              },
              {
                "name": "minWith",
                "description": [
                  "Returns the first element having the smallest value according to the provided comparator."
                ],
                "code": [
                  "fun UShortArray.minWith(    comparator: Comparator<in UShort>): UShort",
                  "fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T",
                  "fun UShortArray.minWith(    comparator: Comparator<in UShort>): UShort?"
                ]
              },
              {
                "name": "minWithOrNull",
                "description": [
                  "Returns the first element having the smallest value according to the provided comparator or null if there are no elements."
                ],
                "code": [
                  "fun UShortArray.minWithOrNull(    comparator: Comparator<in UShort>): UShort?",
                  "fun <T> Iterable<T>.minWithOrNull(    comparator: Comparator<in T>): T?"
                ]
              },
              {
                "name": "none",
                "description": [
                  "Returns true if the array has no elements.",
                  "Returns true if no elements match the given predicate."
                ],
                "code": [
                  "fun UShortArray.none(): Boolean",
                  "fun UShortArray.none(predicate: (UShort) -> Boolean): Boolean",
                  "fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean"
                ]
              },
              {
                "name": "onEach",
                "description": [
                  "Performs the given action on each element and returns the array itself afterwards.",
                  "Performs the given action on each element and returns the collection itself afterwards."
                ],
                "code": [
                  "fun UShortArray.onEach(action: (UShort) -> Unit): UShortArray",
                  "fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C"
                ]
              },
              {
                "name": "onEachIndexed",
                "description": [
                  "Performs the given action on each element, providing sequential index with the element,\nand returns the array itself afterwards.",
                  "Performs the given action on each element, providing sequential index with the element,\nand returns the collection itself afterwards."
                ],
                "code": [
                  "fun UShortArray.onEachIndexed(    action: (index: Int, UShort) -> Unit): UShortArray",
                  "fun <T, C : Iterable<T>> C.onEachIndexed(    action: (index: Int, T) -> Unit): C"
                ]
              },
              {
                "name": "orEmpty",
                "description": [
                  "Returns this Collection if it's not null and the empty list otherwise."
                ],
                "code": ["fun <T> Collection<T>?.orEmpty(): Collection<T>"]
              },
              {
                "name": "partition",
                "description": [
                  "Splits the original collection into pair of lists,\nwhere first list contains elements for which predicate yielded true,\nwhile second list contains elements for which predicate yielded false."
                ],
                "code": [
                  "fun <T> Iterable<T>.partition(    predicate: (T) -> Boolean): Pair<List<T>, List<T>>"
                ]
              },
              {
                "name": "plus",
                "description": [
                  "Returns an array containing all elements of the original array and then the given element.",
                  "Returns an array containing all elements of the original array and then all elements of the given elements collection.",
                  "Returns an array containing all elements of the original array and then all elements of the given elements array.",
                  "Returns a list containing all elements of the original collection and then the given element.",
                  "Returns a list containing all elements of the original collection and then all elements of the given elements array.",
                  "Returns a list containing all elements of the original collection and then all elements of the given elements collection.",
                  "Returns a list containing all elements of the original collection and then all elements of the given elements sequence."
                ],
                "code": [
                  "operator fun UShortArray.plus(element: UShort): UShortArray",
                  "operator fun UShortArray.plus(    elements: Collection<UShort>): UShortArray",
                  "operator fun UShortArray.plus(    elements: UShortArray): UShortArray",
                  "operator fun <T> Iterable<T>.plus(element: T): List<T>",
                  "operator fun <T> Collection<T>.plus(element: T): List<T>",
                  "operator fun <T> Iterable<T>.plus(    elements: Array<out T>): List<T>",
                  "operator fun <T> Collection<T>.plus(    elements: Array<out T>): List<T>",
                  "operator fun <T> Iterable<T>.plus(    elements: Iterable<T>): List<T>",
                  "operator fun <T> Collection<T>.plus(    elements: Iterable<T>): List<T>",
                  "operator fun <T> Iterable<T>.plus(    elements: Sequence<T>): List<T>",
                  "operator fun <T> Collection<T>.plus(    elements: Sequence<T>): List<T>"
                ]
              },
              {
                "name": "plusElement",
                "description": [
                  "Returns a list containing all elements of the original collection and then the given element."
                ],
                "code": [
                  "fun <T> Iterable<T>.plusElement(element: T): List<T>",
                  "fun <T> Collection<T>.plusElement(element: T): List<T>"
                ]
              },
              {
                "name": "random",
                "description": [
                  "Returns a random element from this array.",
                  "Returns a random element from this array using the specified source of randomness."
                ],
                "code": [
                  "fun UShortArray.random(): UShort",
                  "fun UShortArray.random(random: Random): UShort"
                ]
              },
              {
                "name": "randomOrNull",
                "description": [
                  "Returns a random element from this array, or null if this array is empty.",
                  "Returns a random element from this array using the specified source of randomness, or null if this array is empty."
                ],
                "code": [
                  "fun UShortArray.randomOrNull(): UShort?",
                  "fun UShortArray.randomOrNull(random: Random): UShort?"
                ]
              },
              {
                "name": "reduce",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun UShortArray.reduce(    operation: (acc: UShort, UShort) -> UShort): UShort",
                  "fun <S, T : S> Iterable<T>.reduce(    operation: (acc: S, T) -> S): S"
                ]
              },
              {
                "name": "reduceIndexed",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original array.",
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original collection."
                ],
                "code": [
                  "fun UShortArray.reduceIndexed(    operation: (index: Int, acc: UShort, UShort) -> UShort): UShort",
                  "fun <S, T : S> Iterable<T>.reduceIndexed(    operation: (index: Int, acc: S, T) -> S): S"
                ]
              },
              {
                "name": "reduceIndexedOrNull",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original array.",
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element with its index in the original collection."
                ],
                "code": [
                  "fun UShortArray.reduceIndexedOrNull(    operation: (index: Int, acc: UShort, UShort) -> UShort): UShort?",
                  "fun <S, T : S> Iterable<T>.reduceIndexedOrNull(    operation: (index: Int, acc: S, T) -> S): S?"
                ]
              },
              {
                "name": "reduceOrNull",
                "description": [
                  "Accumulates value starting with the first element and applying operation from left to right\nto current accumulator value and each element."
                ],
                "code": [
                  "fun UShortArray.reduceOrNull(    operation: (acc: UShort, UShort) -> UShort): UShort?",
                  "fun <S, T : S> Iterable<T>.reduceOrNull(    operation: (acc: S, T) -> S): S?"
                ]
              },
              {
                "name": "reduceRight",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun UShortArray.reduceRight(    operation: (UShort, acc: UShort) -> UShort): UShort"
                ]
              },
              {
                "name": "reduceRightIndexed",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun UShortArray.reduceRightIndexed(    operation: (index: Int, UShort, acc: UShort) -> UShort): UShort"
                ]
              },
              {
                "name": "reduceRightIndexedOrNull",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element with its index in the original array and current accumulator value."
                ],
                "code": [
                  "fun UShortArray.reduceRightIndexedOrNull(    operation: (index: Int, UShort, acc: UShort) -> UShort): UShort?"
                ]
              },
              {
                "name": "reduceRightOrNull",
                "description": [
                  "Accumulates value starting with the last element and applying operation from right to left\nto each element and current accumulator value."
                ],
                "code": [
                  "fun UShortArray.reduceRightOrNull(    operation: (UShort, acc: UShort) -> UShort): UShort?"
                ]
              },
              {
                "name": "refTo",
                "description": [],
                "code": [
                  "fun UShortArray.refTo(index: Int): CValuesRef<UShortVar>"
                ]
              },
              {
                "name": "requireNoNulls",
                "description": [
                  "Returns an original collection containing all the non-null elements, throwing an IllegalArgumentException if there are any null elements."
                ],
                "code": [
                  "fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T>"
                ]
              },
              {
                "name": "reverse",
                "description": [
                  "Reverses elements in the array in-place.",
                  "Reverses elements of the array in the specified range in-place."
                ],
                "code": [
                  "fun UShortArray.reverse()",
                  "fun UShortArray.reverse(fromIndex: Int, toIndex: Int)"
                ]
              },
              {
                "name": "reversed",
                "description": [
                  "Returns a list with elements in reversed order."
                ],
                "code": ["fun UShortArray.reversed(): List<UShort>"]
              },
              {
                "name": "reversedArray",
                "description": [
                  "Returns an array with elements of this array in reversed order."
                ],
                "code": ["fun UShortArray.reversedArray(): UShortArray"]
              },
              {
                "name": "runningFold",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> UShortArray.runningFold(    initial: R,     operation: (acc: R, UShort) -> R): List<R>",
                  "fun <T, R> Iterable<T>.runningFold(    initial: R,     operation: (acc: R, T) -> R): List<R>"
                ]
              },
              {
                "name": "runningFoldIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with initial value.",
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original collection and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> UShortArray.runningFoldIndexed(    initial: R,     operation: (index: Int, acc: R, UShort) -> R): List<R>",
                  "fun <T, R> Iterable<T>.runningFoldIndexed(    initial: R,     operation: (index: Int, acc: R, T) -> R): List<R>"
                ]
              },
              {
                "name": "runningReduce",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with the first element of this array.",
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with the first element of this collection."
                ],
                "code": [
                  "fun UShortArray.runningReduce(    operation: (acc: UShort, UShort) -> UShort): List<UShort>",
                  "fun <S, T : S> Iterable<T>.runningReduce(    operation: (acc: S, T) -> S): List<S>"
                ]
              },
              {
                "name": "runningReduceIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with the first element of this array.",
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original collection and current accumulator value that starts with the first element of this collection."
                ],
                "code": [
                  "fun UShortArray.runningReduceIndexed(    operation: (index: Int, acc: UShort, UShort) -> UShort): List<UShort>",
                  "fun <S, T : S> Iterable<T>.runningReduceIndexed(    operation: (index: Int, acc: S, T) -> S): List<S>"
                ]
              },
              {
                "name": "scan",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> UShortArray.scan(    initial: R,     operation: (acc: R, UShort) -> R): List<R>",
                  "fun <T, R> Iterable<T>.scan(    initial: R,     operation: (acc: R, T) -> R): List<R>"
                ]
              },
              {
                "name": "scanIndexed",
                "description": [
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original array and current accumulator value that starts with initial value.",
                  "Returns a list containing successive accumulation values generated by applying operation from left to right\nto each element, its index in the original collection and current accumulator value that starts with initial value."
                ],
                "code": [
                  "fun <R> UShortArray.scanIndexed(    initial: R,     operation: (index: Int, acc: R, UShort) -> R): List<R>",
                  "fun <T, R> Iterable<T>.scanIndexed(    initial: R,     operation: (index: Int, acc: R, T) -> R): List<R>"
                ]
              },
              {
                "name": "shuffle",
                "description": [
                  "Randomly shuffles elements in this array in-place.",
                  "Randomly shuffles elements in this array in-place using the specified random instance as the source of randomness."
                ],
                "code": [
                  "fun UShortArray.shuffle()",
                  "fun UShortArray.shuffle(random: Random)"
                ]
              },
              {
                "name": "shuffled",
                "description": [
                  "Returns a new list with the elements of this list randomly shuffled\nusing the specified random instance as the source of randomness."
                ],
                "code": [
                  "fun <T> Iterable<T>.shuffled(random: Random): List<T>"
                ]
              },
              {
                "name": "single",
                "description": [
                  "Returns the single element, or throws an exception if the array is empty or has more than one element.",
                  "Returns the single element matching the given predicate, or throws exception if there is no or more than one matching element."
                ],
                "code": [
                  "fun UShortArray.single(): UShort",
                  "fun UShortArray.single(    predicate: (UShort) -> Boolean): UShort",
                  "fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T"
                ]
              },
              {
                "name": "singleOrNull",
                "description": [
                  "Returns single element, or null if the array is empty or has more than one element.",
                  "Returns the single element matching the given predicate, or null if element was not found or more than one element was found."
                ],
                "code": [
                  "fun UShortArray.singleOrNull(): UShort?",
                  "fun UShortArray.singleOrNull(    predicate: (UShort) -> Boolean): UShort?",
                  "fun <T> Iterable<T>.singleOrNull(    predicate: (T) -> Boolean): T?"
                ]
              },
              {
                "name": "slice",
                "description": [
                  "Returns a list containing elements at indices in the specified indices range.",
                  "Returns a list containing elements at specified indices."
                ],
                "code": [
                  "fun UShortArray.slice(indices: IntRange): List<UShort>",
                  "fun UShortArray.slice(indices: Iterable<Int>): List<UShort>"
                ]
              },
              {
                "name": "sliceArray",
                "description": [
                  "Returns an array containing elements of this array at specified indices.",
                  "Returns an array containing elements at indices in the specified indices range."
                ],
                "code": [
                  "fun UShortArray.sliceArray(    indices: Collection<Int>): UShortArray",
                  "fun UShortArray.sliceArray(indices: IntRange): UShortArray"
                ]
              },
              {
                "name": "sort",
                "description": [
                  "Sorts the array in-place.",
                  "Sorts a range in the array in-place."
                ],
                "code": [
                  "fun UShortArray.sort()",
                  "fun UShortArray.sort(fromIndex: Int = 0, toIndex: Int = size)"
                ]
              },
              {
                "name": "sortDescending",
                "description": [
                  "Sorts elements in the array in-place descending according to their natural sort order.",
                  "Sorts elements of the array in the specified range in-place.\nThe elements are sorted descending according to their natural sort order."
                ],
                "code": [
                  "fun UShortArray.sortDescending()",
                  "fun UShortArray.sortDescending(fromIndex: Int, toIndex: Int)"
                ]
              },
              {
                "name": "sorted",
                "description": [
                  "Returns a list of all elements sorted according to their natural sort order."
                ],
                "code": ["fun UShortArray.sorted(): List<UShort>"]
              },
              {
                "name": "sortedArray",
                "description": [
                  "Returns an array with all elements of this array sorted according to their natural sort order."
                ],
                "code": ["fun UShortArray.sortedArray(): UShortArray"]
              },
              {
                "name": "sortedArrayDescending",
                "description": [
                  "Returns an array with all elements of this array sorted descending according to their natural sort order."
                ],
                "code": ["fun UShortArray.sortedArrayDescending(): UShortArray"]
              },
              {
                "name": "sortedBy",
                "description": [
                  "Returns a list of all elements sorted according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <T, R : Comparable<R>> Iterable<T>.sortedBy(    selector: (T) -> R?): List<T>"
                ]
              },
              {
                "name": "sortedByDescending",
                "description": [
                  "Returns a list of all elements sorted descending according to natural sort order of the value returned by specified selector function."
                ],
                "code": [
                  "fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(    selector: (T) -> R?): List<T>"
                ]
              },
              {
                "name": "sortedDescending",
                "description": [
                  "Returns a list of all elements sorted descending according to their natural sort order."
                ],
                "code": ["fun UShortArray.sortedDescending(): List<UShort>"]
              },
              {
                "name": "sortedWith",
                "description": [
                  "Returns a list of all elements sorted according to the specified comparator."
                ],
                "code": [
                  "fun <T> Iterable<T>.sortedWith(    comparator: Comparator<in T>): List<T>"
                ]
              },
              {
                "name": "subtract",
                "description": [
                  "Returns a set containing all elements that are contained by this collection and not contained by the specified collection."
                ],
                "code": [
                  "infix fun <T> Iterable<T>.subtract(    other: Iterable<T>): Set<T>"
                ]
              },
              {
                "name": "sum",
                "description": [
                  "Returns the sum of all elements in the array."
                ],
                "code": ["fun UShortArray.sum(): UInt"]
              },
              {
                "name": "sumBy",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array.",
                  "Returns the sum of all values produced by selector function applied to each element in the collection."
                ],
                "code": [
                  "fun UShortArray.sumBy(selector: (UShort) -> UInt): UInt",
                  "fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int"
                ]
              },
              {
                "name": "sumByDouble",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array.",
                  "Returns the sum of all values produced by selector function applied to each element in the collection."
                ],
                "code": [
                  "fun UShortArray.sumByDouble(    selector: (UShort) -> Double): Double",
                  "fun <T> Iterable<T>.sumByDouble(    selector: (T) -> Double): Double"
                ]
              },
              {
                "name": "sumOf",
                "description": [
                  "Returns the sum of all values produced by selector function applied to each element in the array.",
                  "Returns the sum of all values produced by selector function applied to each element in the collection."
                ],
                "code": [
                  "fun UShortArray.sumOf(selector: (UShort) -> Double): Double",
                  "fun UShortArray.sumOf(selector: (UShort) -> Int): Int",
                  "fun UShortArray.sumOf(selector: (UShort) -> Long): Long",
                  "fun UShortArray.sumOf(selector: (UShort) -> UInt): UInt",
                  "fun UShortArray.sumOf(selector: (UShort) -> ULong): ULong",
                  "fun UShortArray.sumOf(    selector: (UShort) -> BigDecimal): BigDecimal",
                  "fun UShortArray.sumOf(    selector: (UShort) -> BigInteger): BigInteger",
                  "fun <T> Iterable<T>.sumOf(selector: (T) -> Double): Double",
                  "fun <T> Iterable<T>.sumOf(selector: (T) -> Int): Int",
                  "fun <T> Iterable<T>.sumOf(selector: (T) -> Long): Long",
                  "fun <T> Iterable<T>.sumOf(selector: (T) -> UInt): UInt",
                  "fun <T> Iterable<T>.sumOf(selector: (T) -> ULong): ULong"
                ]
              },
              {
                "name": "take",
                "description": ["Returns a list containing first n elements."],
                "code": ["fun UShortArray.take(n: Int): List<UShort>"]
              },
              {
                "name": "takeLast",
                "description": ["Returns a list containing last n elements."],
                "code": ["fun UShortArray.takeLast(n: Int): List<UShort>"]
              },
              {
                "name": "takeLastWhile",
                "description": [
                  "Returns a list containing last elements satisfying the given predicate."
                ],
                "code": [
                  "fun UShortArray.takeLastWhile(    predicate: (UShort) -> Boolean): List<UShort>"
                ]
              },
              {
                "name": "takeWhile",
                "description": [
                  "Returns a list containing first elements satisfying the given predicate."
                ],
                "code": [
                  "fun UShortArray.takeWhile(    predicate: (UShort) -> Boolean): List<UShort>",
                  "fun <T> Iterable<T>.takeWhile(    predicate: (T) -> Boolean): List<T>"
                ]
              },
              {
                "name": "toCollection",
                "description": [
                  "Appends all elements to the given destination collection."
                ],
                "code": [
                  "fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(    destination: C): C"
                ]
              },
              {
                "name": "toCValues",
                "description": [],
                "code": ["fun UShortArray.toCValues(): CValues<UShortVar>"]
              },
              {
                "name": "toHashSet",
                "description": ["Returns a new HashSet of all elements."],
                "code": ["fun <T> Iterable<T>.toHashSet(): HashSet<T>"]
              },
              {
                "name": "toList",
                "description": ["Returns a List containing all elements."],
                "code": ["fun <T> Iterable<T>.toList(): List<T>"]
              },
              {
                "name": "toMutableSet",
                "description": [
                  "Returns a new MutableSet containing all distinct elements from the given collection."
                ],
                "code": ["fun <T> Iterable<T>.toMutableSet(): MutableSet<T>"]
              },
              {
                "name": "toSet",
                "description": ["Returns a Set of all elements."],
                "code": ["fun <T> Iterable<T>.toSet(): Set<T>"]
              },
              {
                "name": "toShortArray",
                "description": [
                  "Returns an array of type ShortArray, which is a copy of this array where each element is a signed reinterpretation\nof the corresponding element of this array."
                ],
                "code": ["fun UShortArray.toShortArray(): ShortArray"]
              },
              {
                "name": "toTypedArray",
                "description": [
                  "Returns a typed object array containing all of the elements of this primitive array."
                ],
                "code": ["fun UShortArray.toTypedArray(): Array<UShort>"]
              },
              {
                "name": "toUShortArray",
                "description": [
                  "Returns an array of UShort containing all of the elements of this collection."
                ],
                "code": ["fun Collection<UShort>.toUShortArray(): UShortArray"]
              },
              {
                "name": "union",
                "description": [
                  "Returns a set containing all distinct elements from both collections."
                ],
                "code": [
                  "infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T>"
                ]
              },
              {
                "name": "windowed",
                "description": [
                  "Returns a list of snapshots of the window of the given size\nsliding along this collection with the given step, where each\nsnapshot is a list.",
                  "Returns a list of results of applying the given transform function to\nan each list representing a view over the window of the given size\nsliding along this collection with the given step."
                ],
                "code": [
                  "fun <T> Iterable<T>.windowed(    size: Int,     step: Int = 1,     partialWindows: Boolean = false): List<List<T>>",
                  "fun <T, R> Iterable<T>.windowed(    size: Int,     step: Int = 1,     partialWindows: Boolean = false,     transform: (List<T>) -> R): List<R>"
                ]
              },
              {
                "name": "withIndex",
                "description": [
                  "Returns a lazy Iterable that wraps each element of the original array\ninto an IndexedValue containing the index of that element and the element itself."
                ],
                "code": [
                  "fun UShortArray.withIndex(): Iterable<IndexedValue<UShort>>"
                ]
              },
              {
                "name": "zip",
                "description": [
                  "Returns a list of pairs built from the elements of this array and the other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of pairs built from the elements of this collection and other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other collection with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this array and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest array.",
                  "Returns a list of pairs built from the elements of this collection and the other array with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this collection and the other array with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection.",
                  "Returns a list of pairs built from the elements of this collection and other collection with the same index.\nThe returned list has length of the shortest collection.",
                  "Returns a list of values built from the elements of this collection and the other collection with the same index\nusing the provided transform function applied to each pair of elements.\nThe returned list has length of the shortest collection."
                ],
                "code": [
                  "infix fun <R> UShortArray.zip(    other: Array<out R>): List<Pair<UShort, R>>",
                  "infix fun UShortArray.zip(    other: UShortArray): List<Pair<UShort, UShort>>",
                  "fun <R, V> UShortArray.zip(    other: Array<out R>,     transform: (a: UShort, b: R) -> V): List<V>",
                  "infix fun <R> UShortArray.zip(    other: Iterable<R>): List<Pair<UShort, R>>",
                  "fun <R, V> UShortArray.zip(    other: Iterable<R>,     transform: (a: UShort, b: R) -> V): List<V>",
                  "fun <V> UShortArray.zip(    other: UShortArray,     transform: (a: UShort, b: UShort) -> V): List<V>",
                  "infix fun <T, R> Iterable<T>.zip(    other: Array<out R>): List<Pair<T, R>>",
                  "fun <T, R, V> Iterable<T>.zip(    other: Array<out R>,     transform: (a: T, b: R) -> V): List<V>",
                  "infix fun <T, R> Iterable<T>.zip(    other: Iterable<R>): List<Pair<T, R>>",
                  "fun <T, R, V> Iterable<T>.zip(    other: Iterable<R>,     transform: (a: T, b: R) -> V): List<V>"
                ]
              },
              {
                "name": "zipWithNext",
                "description": [
                  "Returns a list of pairs of each two adjacent elements in this collection.",
                  "Returns a list containing the results of applying the given transform function\nto an each pair of two adjacent elements in this collection."
                ],
                "code": [
                  "fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>>",
                  "fun <T, R> Iterable<T>.zipWithNext(    transform: (a: T, b: T) -> R): List<R>"
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "name": "Annotations",
    "subcategories": [
      {
        "name": "BuilderInference",
        "description": [
          "Allows to infer generic type arguments of a function from the calls in the annotated function parameter of that function."
        ],
        "code": ["annotation class BuilderInference"],
        "url": "-builder-inference/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Allows to infer generic type arguments of a function from the calls in the annotated function parameter of that function."
                ],
                "code": ["BuilderInference()"]
              }
            ]
          }
        ]
      },
      {
        "name": "ContextFunctionTypeParams",
        "description": [
          "Signifies that the annotated functional type has the prefix of size count for context receivers.\nThus, @ContextFunctionTypeParams(2) @ExtensionFunctionType Function4<String, Int, Double, Byte, Unit> is a normalized representation of\ncontext(String, Int) Double.(Byte) -> Unit."
        ],
        "code": ["annotation class ContextFunctionTypeParams"],
        "url": "-context-function-type-params/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Signifies that the annotated functional type has the prefix of size count for context receivers.\nThus, @ContextFunctionTypeParams(2) @ExtensionFunctionType Function4<String, Int, Double, Byte, Unit> is a normalized representation of\ncontext(String, Int) Double.(Byte) -> Unit."
                ],
                "code": ["<init>(count: Int)"]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              { "name": "count", "description": [], "code": ["val count: Int"] }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "annotationClass",
                "description": [
                  "Returns a KClass instance corresponding to the annotation type of this annotation."
                ],
                "code": [
                  "val <T : Annotation> T.annotationClass: KClass<out T>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "Deprecated",
        "description": ["Marks the annotated declaration as deprecated."],
        "code": ["annotation class Deprecated"],
        "url": "-deprecated/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Marks the annotated declaration as deprecated."
                ],
                "code": [
                  "<init>(    message: String,     replaceWith: ReplaceWith = ReplaceWith(\"\"),     level: DeprecationLevel = DeprecationLevel.WARNING)"
                ]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "level",
                "description": [
                  "Specifies how the deprecated element usages are reported in code.\nSee the DeprecationLevel enum for the possible values."
                ],
                "code": ["val level: DeprecationLevel"]
              },
              {
                "name": "message",
                "description": [
                  "The message explaining the deprecation and recommending an alternative API to use."
                ],
                "code": ["val message: String"]
              },
              {
                "name": "replaceWith",
                "description": [
                  "If present, specifies a code fragment which should be used as a replacement for\nthe deprecated API usage."
                ],
                "code": ["val replaceWith: ReplaceWith"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "annotationClass",
                "description": [
                  "Returns a KClass instance corresponding to the annotation type of this annotation."
                ],
                "code": [
                  "val <T : Annotation> T.annotationClass: KClass<out T>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "DeprecatedSinceKotlin",
        "description": [
          "Marks the annotated declaration as deprecated. In contrast to Deprecated, severity of the reported diagnostic is not a constant value,\nbut differs depending on the API version of the usage (the value of the -api-version argument when compiling the module where\nthe usage is located). If the API version is greater or equal than hiddenSince, the declaration will not be accessible from the code\n(as if it was deprecated with level DeprecationLevel.HIDDEN), otherwise if the API version is greater or equal than errorSince,\nthe usage will be marked as an error (as with DeprecationLevel.ERROR), otherwise if the API version is greater or equal\nthan warningSince, the usage will be marked as a warning (as with DeprecationLevel.WARNING), otherwise the annotation is ignored."
        ],
        "code": ["annotation class DeprecatedSinceKotlin"],
        "url": "-deprecated-since-kotlin/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Marks the annotated declaration as deprecated. In contrast to Deprecated, severity of the reported diagnostic is not a constant value,\nbut differs depending on the API version of the usage (the value of the -api-version argument when compiling the module where\nthe usage is located). If the API version is greater or equal than hiddenSince, the declaration will not be accessible from the code\n(as if it was deprecated with level DeprecationLevel.HIDDEN), otherwise if the API version is greater or equal than errorSince,\nthe usage will be marked as an error (as with DeprecationLevel.ERROR), otherwise if the API version is greater or equal\nthan warningSince, the usage will be marked as a warning (as with DeprecationLevel.WARNING), otherwise the annotation is ignored."
                ],
                "code": [
                  "<init>(    warningSince: String = \"\",     errorSince: String = \"\",     hiddenSince: String = \"\")"
                ]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "errorSince",
                "description": [
                  "the version, since which this deprecation should be reported as a error."
                ],
                "code": ["val errorSince: String"]
              },
              {
                "name": "hiddenSince",
                "description": [
                  "the version, since which the annotated declaration should not be available in code."
                ],
                "code": ["val hiddenSince: String"]
              },
              {
                "name": "warningSince",
                "description": [
                  "the version, since which this deprecation should be reported as a warning."
                ],
                "code": ["val warningSince: String"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "annotationClass",
                "description": [
                  "Returns a KClass instance corresponding to the annotation type of this annotation."
                ],
                "code": [
                  "val <T : Annotation> T.annotationClass: KClass<out T>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "DslMarker",
        "description": [
          "When applied to annotation class X specifies that X defines a DSL language"
        ],
        "code": ["annotation class DslMarker"],
        "url": "-dsl-marker/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "When applied to annotation class X specifies that X defines a DSL language"
                ],
                "code": ["<init>()"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "annotationClass",
                "description": [
                  "Returns a KClass instance corresponding to the annotation type of this annotation."
                ],
                "code": [
                  "val <T : Annotation> T.annotationClass: KClass<out T>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "ExperimentalMultiplatform",
        "description": ["The experimental multiplatform support API marker."],
        "code": ["annotation class ExperimentalMultiplatform"],
        "url": "-experimental-multiplatform/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "The experimental multiplatform support API marker."
                ],
                "code": ["ExperimentalMultiplatform()"]
              }
            ]
          }
        ]
      },
      {
        "name": "ExperimentalStdlibApi",
        "description": [
          "This annotation marks the standard library API that is considered experimental and is not subject to the\ngeneral compatibility guarantees given for the standard library:\nthe behavior of such API may be changed or the API may be removed completely in any further release."
        ],
        "code": ["annotation class ExperimentalStdlibApi"],
        "url": "-experimental-stdlib-api/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "This annotation marks the standard library API that is considered experimental and is not subject to the\ngeneral compatibility guarantees given for the standard library:\nthe behavior of such API may be changed or the API may be removed completely in any further release."
                ],
                "code": ["ExperimentalStdlibApi()"]
              }
            ]
          }
        ]
      },
      {
        "name": "ExperimentalSubclassOptIn",
        "description": [
          "This annotation marks the experimental preview of the language feature SubclassOptInRequired."
        ],
        "code": ["annotation class ExperimentalSubclassOptIn"],
        "url": "-experimental-subclass-opt-in/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "This annotation marks the experimental preview of the language feature SubclassOptInRequired."
                ],
                "code": ["ExperimentalSubclassOptIn()"]
              }
            ]
          }
        ]
      },
      {
        "name": "ExperimentalUnsignedTypes",
        "description": [
          "Marks the API that is dependent on the experimental unsigned types, including those types themselves."
        ],
        "code": ["annotation class ExperimentalUnsignedTypes"],
        "url": "-experimental-unsigned-types/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Marks the API that is dependent on the experimental unsigned types, including those types themselves."
                ],
                "code": ["ExperimentalUnsignedTypes()"]
              }
            ]
          }
        ]
      },
      {
        "name": "ExtensionFunctionType",
        "description": [
          "Signifies that the annotated functional type represents an extension function."
        ],
        "code": ["annotation class ExtensionFunctionType"],
        "url": "-extension-function-type/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Signifies that the annotated functional type represents an extension function."
                ],
                "code": ["<init>()"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "annotationClass",
                "description": [
                  "Returns a KClass instance corresponding to the annotation type of this annotation."
                ],
                "code": [
                  "val <T : Annotation> T.annotationClass: KClass<out T>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "Metadata",
        "description": [
          "This annotation is present on any class file produced by the Kotlin compiler and is read by the compiler and reflection.\nParameters have very short JVM names on purpose: these names appear in all generated class files, and we'd like to reduce their size."
        ],
        "code": ["annotation class Metadata"],
        "url": "-metadata/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "This annotation is present on any class file produced by the Kotlin compiler and is read by the compiler and reflection.\nParameters have very short JVM names on purpose: these names appear in all generated class files, and we'd like to reduce their size."
                ],
                "code": [
                  "Metadata(    kind: Int = 1,     metadataVersion: IntArray = [],     bytecodeVersion: IntArray = [1, 0, 3],     data1: Array<String> = [],     data2: Array<String> = [],     extraString: String = \"\",     packageName: String = \"\",     extraInt: Int = 0)"
                ]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "bytecodeVersion",
                "description": [
                  "The version of the bytecode interface (naming conventions, signatures) of the class file annotated with this annotation."
                ],
                "code": ["val bytecodeVersion: IntArray"]
              },
              {
                "name": "data1",
                "description": [
                  "Metadata in a custom format. The format may be different (or even absent) for different kinds."
                ],
                "code": ["val data1: Array<String>"]
              },
              {
                "name": "data2",
                "description": [
                  "An addition to data1: array of strings which occur in metadata, written in plain text so that strings already present\nin the constant pool are reused. These strings may be then indexed in the metadata by an integer index in this array."
                ],
                "code": ["val data2: Array<String>"]
              },
              {
                "name": "extraInt",
                "description": [
                  "An extra int. Bits of this number represent the following flags:"
                ],
                "code": ["val extraInt: Int"]
              },
              {
                "name": "extraString",
                "description": [
                  "An extra string. For a multi-file part class, internal name of the facade class."
                ],
                "code": ["val extraString: String"]
              },
              {
                "name": "kind",
                "description": [
                  "A kind of the metadata this annotation encodes. Kotlin compiler recognizes the following kinds (see KotlinClassHeader.Kind):"
                ],
                "code": ["val kind: Int"]
              },
              {
                "name": "metadataVersion",
                "description": [
                  "The version of the metadata provided in the arguments of this annotation."
                ],
                "code": ["val metadataVersion: IntArray"]
              },
              {
                "name": "packageName",
                "description": [
                  "Fully qualified name of the package this class is located in, from Kotlin's point of view, or empty string if this name\ndoes not differ from the JVM's package FQ name. These names can be different in case the JvmPackageName annotation is used.\nNote that this information is also stored in the corresponding module's .kotlin_module file."
                ],
                "code": ["val packageName: String"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "annotationClass",
                "description": [
                  "Returns a KClass instance corresponding to the annotation type of this annotation."
                ],
                "code": [
                  "val <T : Annotation> T.annotationClass: KClass<out T>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "OptIn",
        "description": [
          "Allows to use the API denoted by the given markers in the annotated file, declaration, or expression.\nIf a declaration is annotated with OptIn, its usages are not required to opt in to that API."
        ],
        "code": ["annotation class OptIn"],
        "url": "-opt-in/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Allows to use the API denoted by the given markers in the annotated file, declaration, or expression.\nIf a declaration is annotated with OptIn, its usages are not required to opt in to that API."
                ],
                "code": ["OptIn(vararg markerClass: KClass<out Annotation>)"]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "markerClass",
                "description": [
                  "specifies marker annotations that require explicit opt-in."
                ],
                "code": [
                  "vararg val markerClass: Array<out KClass<out Annotation>>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "OptionalExpectation",
        "description": [
          "Marks an expected annotation class that it isn't required to have actual counterparts in all platforms."
        ],
        "code": ["annotation class OptionalExpectation"],
        "url": "-optional-expectation/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Marks an expected annotation class that it isn't required to have actual counterparts in all platforms."
                ],
                "code": ["OptionalExpectation()"]
              }
            ]
          }
        ]
      },
      {
        "name": "OverloadResolutionByLambdaReturnType",
        "description": [
          "Enables overload selection based on the type of the value returned from lambda argument."
        ],
        "code": ["annotation class OverloadResolutionByLambdaReturnType"],
        "url": "-overload-resolution-by-lambda-return-type/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Enables overload selection based on the type of the value returned from lambda argument."
                ],
                "code": ["OverloadResolutionByLambdaReturnType()"]
              }
            ]
          }
        ]
      },
      {
        "name": "ParameterName",
        "description": [
          "Annotates type arguments of functional type and holds corresponding parameter name specified by the user in type declaration (if any)."
        ],
        "code": ["annotation class ParameterName"],
        "url": "-parameter-name/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Annotates type arguments of functional type and holds corresponding parameter name specified by the user in type declaration (if any)."
                ],
                "code": ["<init>(name: String)"]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "name",
                "description": [],
                "code": ["val name: String"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "annotationClass",
                "description": [
                  "Returns a KClass instance corresponding to the annotation type of this annotation."
                ],
                "code": [
                  "val <T : Annotation> T.annotationClass: KClass<out T>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "PublishedApi",
        "description": [
          "When applied to a class or a member with internal visibility allows to use it from public inline functions and\nmakes it effectively public."
        ],
        "code": ["annotation class PublishedApi"],
        "url": "-published-api/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "When applied to a class or a member with internal visibility allows to use it from public inline functions and\nmakes it effectively public."
                ],
                "code": ["<init>()"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "annotationClass",
                "description": [
                  "Returns a KClass instance corresponding to the annotation type of this annotation."
                ],
                "code": [
                  "val <T : Annotation> T.annotationClass: KClass<out T>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "ReplaceWith",
        "description": [
          "Specifies a code fragment that can be used to replace a deprecated function, property or class. Tools such\nas IDEs can automatically apply the replacements specified through this annotation."
        ],
        "code": ["annotation class ReplaceWith"],
        "url": "-replace-with/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Specifies a code fragment that can be used to replace a deprecated function, property or class. Tools such\nas IDEs can automatically apply the replacements specified through this annotation."
                ],
                "code": ["<init>(expression: String, vararg imports: String)"]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "expression",
                "description": [
                  "the replacement expression. The replacement expression is interpreted in the context\n    of the symbol being used, and can reference members of enclosing classes etc.\n    For function calls, the replacement expression may contain argument names of the deprecated function,\n    which will be substituted with actual parameters used in the call being updated. The imports used in the file\n    containing the deprecated function or property are NOT accessible; if the replacement expression refers\n    on any of those imports, they need to be specified explicitly in the imports parameter."
                ],
                "code": ["val expression: String"]
              },
              {
                "name": "imports",
                "description": [
                  "the qualified names that need to be imported in order for the references in the\n    replacement expression to be resolved correctly."
                ],
                "code": ["vararg val imports: Array<out String>"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "annotationClass",
                "description": [
                  "Returns a KClass instance corresponding to the annotation type of this annotation."
                ],
                "code": [
                  "val <T : Annotation> T.annotationClass: KClass<out T>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "RequiresOptIn",
        "description": [
          "Signals that the annotated annotation class is a marker of an API that requires an explicit opt-in."
        ],
        "code": ["annotation class RequiresOptIn"],
        "url": "-requires-opt-in/index.html",
        "subcategories": [
          {
            "name": "Type scopes",
            "declarations": [
              {
                "name": "Level",
                "description": [
                  "Severity of the diagnostic that should be reported on usages which did not explicitly opted into\nthe API either by using OptIn or by being annotated with the corresponding marker annotation."
                ],
                "code": ["enum class Level"]
              }
            ]
          },
          {
            "name": "Lexical scopes",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Signals that the annotated annotation class is a marker of an API that requires an explicit opt-in."
                ],
                "code": [
                  "RequiresOptIn(    message: String = \"\",     level: Level = Level.ERROR)"
                ]
              }
            ]
          },
          {
            "name": "Overridden declarations",
            "declarations": [
              {
                "name": "level",
                "description": [
                  "specifies how usages of API without an explicit opt-in are reported in code."
                ],
                "code": ["val level: Level"]
              },
              {
                "name": "message",
                "description": [
                  "message to be reported on usages of API without an explicit opt-in, or empty string for the default message.\n    The default message is: \"This declaration is experimental and its usage should be marked with 'Marker'\n    or '@OptIn(Marker::class)'\", where Marker is the opt-in requirement marker."
                ],
                "code": ["val message: String"]
              }
            ]
          },
          { "name": "Types", "declarations": [] },
          { "name": "Constructors", "declarations": [] },
          { "name": "Properties", "declarations": [] }
        ]
      },
      {
        "name": "SinceKotlin",
        "description": [
          "Specifies the first version of Kotlin where a declaration has appeared.\nUsing the declaration and specifying an older API version (via the -api-version command line option) will result in an error."
        ],
        "code": ["annotation class SinceKotlin"],
        "url": "-since-kotlin/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Specifies the first version of Kotlin where a declaration has appeared.\nUsing the declaration and specifying an older API version (via the -api-version command line option) will result in an error."
                ],
                "code": ["<init>(version: String)"]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "version",
                "description": [
                  "the version in the following formats: <major>.<minor> or <major>.<minor>.<patch>, where major, minor and patch\nare non-negative integer numbers without leading zeros."
                ],
                "code": ["val version: String"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "annotationClass",
                "description": [
                  "Returns a KClass instance corresponding to the annotation type of this annotation."
                ],
                "code": [
                  "val <T : Annotation> T.annotationClass: KClass<out T>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "SubclassOptInRequired",
        "description": [
          "Annotation that marks open for subclassing classes and interfaces, and makes implementation\nand extension of such declarations as requiring an explicit opt-in."
        ],
        "code": ["annotation class SubclassOptInRequired"],
        "url": "-subclass-opt-in-required/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Annotation that marks open for subclassing classes and interfaces, and makes implementation\nand extension of such declarations as requiring an explicit opt-in."
                ],
                "code": [
                  "SubclassOptInRequired(markerClass: KClass<out Annotation>)"
                ]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "markerClass",
                "description": [
                  "specifies marker annotation that require explicit opt-in."
                ],
                "code": ["val markerClass: KClass<out Annotation>"]
              }
            ]
          }
        ]
      },
      {
        "name": "Suppress",
        "description": [
          "Suppresses the given compilation warnings in the annotated element."
        ],
        "code": ["annotation class Suppress"],
        "url": "-suppress/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "Suppresses the given compilation warnings in the annotated element."
                ],
                "code": ["<init>(vararg names: String)"]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "names",
                "description": [
                  "names of the compiler diagnostics to suppress."
                ],
                "code": ["vararg val names: Array<out String>"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "annotationClass",
                "description": [
                  "Returns a KClass instance corresponding to the annotation type of this annotation."
                ],
                "code": [
                  "val <T : Annotation> T.annotationClass: KClass<out T>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "Throws",
        "description": [
          "This annotation indicates what exceptions should be declared by a function when compiled to a platform method\nin Kotlin/JVM and Kotlin/Native."
        ],
        "code": ["annotation class Throws", "typealias Throws = Throws"],
        "url": "-throws/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "This annotation indicates what exceptions should be declared by a function when compiled to a platform method\nin Kotlin/JVM and Kotlin/Native."
                ],
                "code": [
                  "<init>(vararg exceptionClasses: KClass<out Throwable>)"
                ]
              }
            ]
          },
          {
            "name": "Properties",
            "declarations": [
              {
                "name": "exceptionClasses",
                "description": [
                  "the list of checked exception classes that may be thrown by the function."
                ],
                "code": [
                  "vararg val exceptionClasses: Array<out KClass<out Throwable>>"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "UnsafeVariance",
        "description": ["Suppresses errors about variance conflict"],
        "code": ["annotation class UnsafeVariance"],
        "url": "-unsafe-variance/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": ["Suppresses errors about variance conflict"],
                "code": ["<init>()"]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "annotationClass",
                "description": [
                  "Returns a KClass instance corresponding to the annotation type of this annotation."
                ],
                "code": [
                  "val <T : Annotation> T.annotationClass: KClass<out T>"
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "name": "Exceptions",
    "subcategories": [
      {
        "name": "ArithmeticException",
        "description": [],
        "code": [
          "open class ArithmeticException : RuntimeException",
          "typealias ArithmeticException = ArithmeticException"
        ],
        "url": "-arithmetic-exception/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [],
                "code": ["<init>()", "<init>(message: String?)"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "getStackTraceAddresses",
                "description": [
                  "Returns a list of stack trace addresses representing the stack trace\npertaining to this throwable."
                ],
                "code": ["fun Throwable.getStackTraceAddresses(): List<Long>"]
              }
            ]
          }
        ]
      },
      {
        "name": "AssertionError",
        "description": [],
        "code": [
          "open class AssertionError : Error",
          "typealias AssertionError = AssertionError"
        ],
        "url": "-assertion-error/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [],
                "code": [
                  "AssertionError(message: String?)",
                  "AssertionError(cause: Throwable?)",
                  "<init>()",
                  "<init>(message: Any?)",
                  "<init>(message: String?, cause: Throwable?)"
                ]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "getStackTraceAddresses",
                "description": [
                  "Returns a list of stack trace addresses representing the stack trace\npertaining to this throwable."
                ],
                "code": ["fun Throwable.getStackTraceAddresses(): List<Long>"]
              }
            ]
          }
        ]
      },
      {
        "name": "ClassCastException",
        "description": [],
        "code": [
          "open class ClassCastException : RuntimeException",
          "typealias ClassCastException = ClassCastException"
        ],
        "url": "-class-cast-exception/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [],
                "code": ["<init>()", "<init>(message: String?)"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "getStackTraceAddresses",
                "description": [
                  "Returns a list of stack trace addresses representing the stack trace\npertaining to this throwable."
                ],
                "code": ["fun Throwable.getStackTraceAddresses(): List<Long>"]
              }
            ]
          },
          {
            "name": "Inheritors",
            "declarations": [
              {
                "name": "TypeCastException",
                "description": [],
                "code": ["open class TypeCastException : ClassCastException"]
              }
            ]
          }
        ]
      },
      {
        "name": "ConcurrentModificationException",
        "description": [],
        "code": [
          "open class ConcurrentModificationException : RuntimeException",
          "typealias ConcurrentModificationException = ConcurrentModificationException"
        ],
        "url": "-concurrent-modification-exception/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [],
                "code": [
                  "<init>()",
                  "<init>(message: String?)",
                  "<init>(message: String?, cause: Throwable?)",
                  "<init>(cause: Throwable?)"
                ]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "getStackTraceAddresses",
                "description": [
                  "Returns a list of stack trace addresses representing the stack trace\npertaining to this throwable."
                ],
                "code": ["fun Throwable.getStackTraceAddresses(): List<Long>"]
              }
            ]
          }
        ]
      },
      {
        "name": "Error",
        "description": [],
        "code": ["open class Error : Throwable", "typealias Error = Error"],
        "url": "-error/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [],
                "code": [
                  "<init>()",
                  "<init>(message: String?)",
                  "<init>(message: String?, cause: Throwable?)",
                  "<init>(cause: Throwable?)"
                ]
              }
            ]
          },
          {
            "name": "Inherited Functions",
            "declarations": [
              {
                "name": "getStackTrace",
                "description": [
                  "Returns an array of stack trace strings representing the stack trace\npertaining to this throwable."
                ],
                "code": ["fun getStackTrace(): Array<String>"]
              },
              {
                "name": "printStackTrace",
                "description": [
                  "Prints the detailed description of this throwable to the standard output."
                ],
                "code": ["fun printStackTrace()"]
              },
              {
                "name": "toString",
                "description": [
                  "Returns the short description of this throwable consisting of\nthe exception class name (fully qualified if possible)\nfollowed by the exception message if it is not null."
                ],
                "code": ["open fun toString(): String"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "getStackTraceAddresses",
                "description": [
                  "Returns a list of stack trace addresses representing the stack trace\npertaining to this throwable."
                ],
                "code": ["fun Throwable.getStackTraceAddresses(): List<Long>"]
              }
            ]
          },
          {
            "name": "Inheritors",
            "declarations": [
              {
                "name": "AssertionError",
                "description": [],
                "code": [
                  "open class AssertionError : Error",
                  "typealias AssertionError = AssertionError"
                ]
              },
              {
                "name": "NotImplementedError",
                "description": [
                  "An exception is thrown to indicate that a method body remains to be implemented."
                ],
                "code": ["class NotImplementedError : Error"]
              },
              {
                "name": "OutOfMemoryError",
                "description": [],
                "code": ["open class OutOfMemoryError : Error"]
              }
            ]
          }
        ]
      },
      {
        "name": "Exception",
        "description": [],
        "code": [
          "open class Exception : Throwable",
          "typealias Exception = Exception"
        ],
        "url": "-exception/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [],
                "code": [
                  "<init>()",
                  "<init>(message: String?)",
                  "<init>(message: String?, cause: Throwable?)",
                  "<init>(cause: Throwable?)"
                ]
              }
            ]
          },
          {
            "name": "Inherited Functions",
            "declarations": [
              {
                "name": "getStackTrace",
                "description": [
                  "Returns an array of stack trace strings representing the stack trace\npertaining to this throwable."
                ],
                "code": ["fun getStackTrace(): Array<String>"]
              },
              {
                "name": "printStackTrace",
                "description": [
                  "Prints the detailed description of this throwable to the standard output."
                ],
                "code": ["fun printStackTrace()"]
              },
              {
                "name": "toString",
                "description": [
                  "Returns the short description of this throwable consisting of\nthe exception class name (fully qualified if possible)\nfollowed by the exception message if it is not null."
                ],
                "code": ["open fun toString(): String"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "getStackTraceAddresses",
                "description": [
                  "Returns a list of stack trace addresses representing the stack trace\npertaining to this throwable."
                ],
                "code": ["fun Throwable.getStackTraceAddresses(): List<Long>"]
              }
            ]
          },
          {
            "name": "Inheritors",
            "declarations": [
              {
                "name": "CharacterCodingException",
                "description": [
                  "The exception thrown when a character encoding or decoding error occurs."
                ],
                "code": [
                  "open class CharacterCodingException : Exception",
                  "typealias CharacterCodingException = CharacterCodingException"
                ]
              },
              {
                "name": "ForeignException",
                "description": [],
                "code": ["class ForeignException : Exception"]
              },
              {
                "name": "IllegalCallableAccessException",
                "description": [
                  "An exception that is thrown when call is invoked on a callable or get or set is invoked on a property\nand that callable is not accessible (in JVM terms) from the calling method."
                ],
                "code": ["class IllegalCallableAccessException : Exception"]
              },
              {
                "name": "IllegalPropertyDelegateAccessException",
                "description": [
                  "An exception that is thrown when getDelegate is invoked on a KProperty object that was not made accessible\nwith isAccessible."
                ],
                "code": [
                  "class IllegalPropertyDelegateAccessException : Exception"
                ]
              },
              {
                "name": "NoSuchPropertyException",
                "description": [
                  "An exception that is thrown when the code tries to introspect a property of a class or a package\nand that class or the package no longer has that property."
                ],
                "code": ["class NoSuchPropertyException : Exception"]
              },
              {
                "name": "RuntimeException",
                "description": [],
                "code": [
                  "open class RuntimeException : Exception",
                  "typealias RuntimeException = RuntimeException"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "IllegalArgumentException",
        "description": [],
        "code": [
          "open class IllegalArgumentException : RuntimeException",
          "typealias IllegalArgumentException = IllegalArgumentException"
        ],
        "url": "-illegal-argument-exception/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [],
                "code": [
                  "<init>()",
                  "<init>(message: String?)",
                  "<init>(message: String?, cause: Throwable?)",
                  "<init>(cause: Throwable?)"
                ]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "getStackTraceAddresses",
                "description": [
                  "Returns a list of stack trace addresses representing the stack trace\npertaining to this throwable."
                ],
                "code": ["fun Throwable.getStackTraceAddresses(): List<Long>"]
              }
            ]
          },
          {
            "name": "Inheritors",
            "declarations": [
              {
                "name": "NumberFormatException",
                "description": [],
                "code": [
                  "open class NumberFormatException : IllegalArgumentException",
                  "typealias NumberFormatException = NumberFormatException"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "IllegalStateException",
        "description": [],
        "code": [
          "open class IllegalStateException : RuntimeException",
          "typealias IllegalStateException = IllegalStateException"
        ],
        "url": "-illegal-state-exception/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [],
                "code": [
                  "<init>()",
                  "<init>(message: String?)",
                  "<init>(message: String?, cause: Throwable?)",
                  "<init>(cause: Throwable?)"
                ]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "getStackTraceAddresses",
                "description": [
                  "Returns a list of stack trace addresses representing the stack trace\npertaining to this throwable."
                ],
                "code": ["fun Throwable.getStackTraceAddresses(): List<Long>"]
              }
            ]
          },
          {
            "name": "Inheritors",
            "declarations": [
              {
                "name": "CancellationException",
                "description": [
                  "Thrown by cancellable suspending functions if the coroutine is cancelled while it is suspended.\nIt indicates normal cancellation of a coroutine."
                ],
                "code": [
                  "open class CancellationException : IllegalStateException",
                  "typealias CancellationException = CancellationException"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "IndexOutOfBoundsException",
        "description": [],
        "code": [
          "open class IndexOutOfBoundsException : RuntimeException",
          "typealias IndexOutOfBoundsException = IndexOutOfBoundsException"
        ],
        "url": "-index-out-of-bounds-exception/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [],
                "code": ["<init>()", "<init>(message: String?)"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "getStackTraceAddresses",
                "description": [
                  "Returns a list of stack trace addresses representing the stack trace\npertaining to this throwable."
                ],
                "code": ["fun Throwable.getStackTraceAddresses(): List<Long>"]
              }
            ]
          },
          {
            "name": "Inheritors",
            "declarations": [
              {
                "name": "ArrayIndexOutOfBoundsException",
                "description": [],
                "code": [
                  "open class ArrayIndexOutOfBoundsException :     IndexOutOfBoundsException"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "KotlinNullPointerException",
        "description": [],
        "code": [
          "open class KotlinNullPointerException : NullPointerException"
        ],
        "url": "-kotlin-null-pointer-exception/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [],
                "code": [
                  "KotlinNullPointerException()",
                  "KotlinNullPointerException(message: String?)"
                ]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "stackTrace",
                "description": [
                  "Returns an array of stack trace elements representing the stack trace\npertaining to this throwable."
                ],
                "code": ["val Throwable.stackTrace: Array<StackTraceElement>"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "printStackTrace",
                "description": [
                  "Prints the detailed description of this throwable to the specified writer.",
                  "Prints the detailed description of this throwable to the specified stream."
                ],
                "code": [
                  "fun Throwable.printStackTrace(writer: PrintWriter)",
                  "fun Throwable.printStackTrace(stream: PrintStream)"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "NoSuchElementException",
        "description": [],
        "code": [
          "open class NoSuchElementException : RuntimeException",
          "typealias NoSuchElementException = NoSuchElementException"
        ],
        "url": "-no-such-element-exception/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [],
                "code": ["<init>()", "<init>(message: String?)"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "getStackTraceAddresses",
                "description": [
                  "Returns a list of stack trace addresses representing the stack trace\npertaining to this throwable."
                ],
                "code": ["fun Throwable.getStackTraceAddresses(): List<Long>"]
              }
            ]
          }
        ]
      },
      {
        "name": "NotImplementedError",
        "description": [
          "An exception is thrown to indicate that a method body remains to be implemented."
        ],
        "code": ["class NotImplementedError : Error"],
        "url": "-not-implemented-error/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [
                  "An exception is thrown to indicate that a method body remains to be implemented."
                ],
                "code": [
                  "NotImplementedError(    message: String = \"An operation is not implemented.\")"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "NoWhenBranchMatchedException",
        "description": [],
        "code": [
          "open class NoWhenBranchMatchedException : RuntimeException",
          "open class NoWhenBranchMatchedException : RuntimeException"
        ],
        "url": "-no-when-branch-matched-exception/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [],
                "code": [
                  "<init>()",
                  "<init>(message: String?)",
                  "<init>(message: String?, cause: Throwable?)",
                  "<init>(cause: Throwable?)"
                ]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "stackTrace",
                "description": [
                  "Returns an array of stack trace elements representing the stack trace\npertaining to this throwable."
                ],
                "code": ["val Throwable.stackTrace: Array<StackTraceElement>"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "getStackTraceAddresses",
                "description": [
                  "Returns a list of stack trace addresses representing the stack trace\npertaining to this throwable."
                ],
                "code": ["fun Throwable.getStackTraceAddresses(): List<Long>"]
              },
              {
                "name": "printStackTrace",
                "description": [
                  "Prints the detailed description of this throwable to the specified writer.",
                  "Prints the detailed description of this throwable to the specified stream."
                ],
                "code": [
                  "fun Throwable.printStackTrace(writer: PrintWriter)",
                  "fun Throwable.printStackTrace(stream: PrintStream)"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "NullPointerException",
        "description": [],
        "code": [
          "open class NullPointerException : RuntimeException",
          "typealias NullPointerException = NullPointerException"
        ],
        "url": "-null-pointer-exception/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [],
                "code": ["<init>()", "<init>(message: String?)"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "getStackTraceAddresses",
                "description": [
                  "Returns a list of stack trace addresses representing the stack trace\npertaining to this throwable."
                ],
                "code": ["fun Throwable.getStackTraceAddresses(): List<Long>"]
              }
            ]
          },
          {
            "name": "Inheritors",
            "declarations": [
              {
                "name": "KotlinNullPointerException",
                "description": [],
                "code": [
                  "open class KotlinNullPointerException : NullPointerException"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "NumberFormatException",
        "description": [],
        "code": [
          "open class NumberFormatException : IllegalArgumentException",
          "typealias NumberFormatException = NumberFormatException"
        ],
        "url": "-number-format-exception/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [],
                "code": ["<init>()", "<init>(message: String?)"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "getStackTraceAddresses",
                "description": [
                  "Returns a list of stack trace addresses representing the stack trace\npertaining to this throwable."
                ],
                "code": ["fun Throwable.getStackTraceAddresses(): List<Long>"]
              }
            ]
          }
        ]
      },
      {
        "name": "RuntimeException",
        "description": [],
        "code": [
          "open class RuntimeException : Exception",
          "typealias RuntimeException = RuntimeException"
        ],
        "url": "-runtime-exception/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [],
                "code": [
                  "<init>()",
                  "<init>(message: String?)",
                  "<init>(message: String?, cause: Throwable?)",
                  "<init>(cause: Throwable?)"
                ]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "getStackTraceAddresses",
                "description": [
                  "Returns a list of stack trace addresses representing the stack trace\npertaining to this throwable."
                ],
                "code": ["fun Throwable.getStackTraceAddresses(): List<Long>"]
              }
            ]
          },
          {
            "name": "Inheritors",
            "declarations": [
              {
                "name": "ArithmeticException",
                "description": [],
                "code": [
                  "open class ArithmeticException : RuntimeException",
                  "typealias ArithmeticException = ArithmeticException"
                ]
              },
              {
                "name": "ClassCastException",
                "description": [],
                "code": [
                  "open class ClassCastException : RuntimeException",
                  "typealias ClassCastException = ClassCastException"
                ]
              },
              {
                "name": "ConcurrentModificationException",
                "description": [],
                "code": [
                  "open class ConcurrentModificationException : RuntimeException",
                  "typealias ConcurrentModificationException = ConcurrentModificationException"
                ]
              },
              {
                "name": "FreezingException",
                "description": [
                  "Exception thrown whenever freezing is not possible."
                ],
                "code": ["class FreezingException : RuntimeException"]
              },
              {
                "name": "IllegalArgumentException",
                "description": [],
                "code": [
                  "open class IllegalArgumentException : RuntimeException",
                  "typealias IllegalArgumentException = IllegalArgumentException"
                ]
              },
              {
                "name": "IllegalStateException",
                "description": [],
                "code": [
                  "open class IllegalStateException : RuntimeException",
                  "typealias IllegalStateException = IllegalStateException"
                ]
              },
              {
                "name": "IncorrectDereferenceException",
                "description": [
                  "Exception thrown when top level variable is accessed from incorrect execution context."
                ],
                "code": [
                  "class IncorrectDereferenceException : RuntimeException"
                ]
              },
              {
                "name": "IndexOutOfBoundsException",
                "description": [],
                "code": [
                  "open class IndexOutOfBoundsException : RuntimeException",
                  "typealias IndexOutOfBoundsException = IndexOutOfBoundsException"
                ]
              },
              {
                "name": "InvalidMutabilityException",
                "description": [
                  "Exception thrown whenever we attempt to mutate frozen objects."
                ],
                "code": ["class InvalidMutabilityException : RuntimeException"]
              },
              {
                "name": "NoSuchElementException",
                "description": [],
                "code": [
                  "open class NoSuchElementException : RuntimeException",
                  "typealias NoSuchElementException = NoSuchElementException"
                ]
              },
              {
                "name": "NoWhenBranchMatchedException",
                "description": [],
                "code": [
                  "open class NoWhenBranchMatchedException : RuntimeException",
                  "open class NoWhenBranchMatchedException : RuntimeException"
                ]
              },
              {
                "name": "NullPointerException",
                "description": [],
                "code": [
                  "open class NullPointerException : RuntimeException",
                  "typealias NullPointerException = NullPointerException"
                ]
              },
              {
                "name": "UninitializedPropertyAccessException",
                "description": [],
                "code": [
                  "class UninitializedPropertyAccessException : RuntimeException",
                  "class UninitializedPropertyAccessException : RuntimeException",
                  "open class UninitializedPropertyAccessException :     RuntimeException"
                ]
              },
              {
                "name": "UnsupportedOperationException",
                "description": [],
                "code": [
                  "open class UnsupportedOperationException : RuntimeException",
                  "typealias UnsupportedOperationException = UnsupportedOperationException"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "TypeCastException",
        "description": [],
        "code": ["open class TypeCastException : ClassCastException"],
        "url": "-type-cast-exception/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [],
                "code": [
                  "TypeCastException()",
                  "TypeCastException(message: String?)"
                ]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "stackTrace",
                "description": [
                  "Returns an array of stack trace elements representing the stack trace\npertaining to this throwable."
                ],
                "code": ["val Throwable.stackTrace: Array<StackTraceElement>"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "getStackTraceAddresses",
                "description": [
                  "Returns a list of stack trace addresses representing the stack trace\npertaining to this throwable."
                ],
                "code": ["fun Throwable.getStackTraceAddresses(): List<Long>"]
              },
              {
                "name": "printStackTrace",
                "description": [
                  "Prints the detailed description of this throwable to the specified writer.",
                  "Prints the detailed description of this throwable to the specified stream."
                ],
                "code": [
                  "fun Throwable.printStackTrace(writer: PrintWriter)",
                  "fun Throwable.printStackTrace(stream: PrintStream)"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "UninitializedPropertyAccessException",
        "description": [],
        "code": [
          "class UninitializedPropertyAccessException : RuntimeException",
          "class UninitializedPropertyAccessException : RuntimeException",
          "open class UninitializedPropertyAccessException :     RuntimeException"
        ],
        "url": "-uninitialized-property-access-exception/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [],
                "code": [
                  "<init>()",
                  "<init>(message: String?)",
                  "<init>(message: String?, cause: Throwable?)",
                  "<init>(cause: Throwable?)"
                ]
              }
            ]
          },
          {
            "name": "Extension Properties",
            "declarations": [
              {
                "name": "stackTrace",
                "description": [
                  "Returns an array of stack trace elements representing the stack trace\npertaining to this throwable."
                ],
                "code": ["val Throwable.stackTrace: Array<StackTraceElement>"]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "getStackTraceAddresses",
                "description": [
                  "Returns a list of stack trace addresses representing the stack trace\npertaining to this throwable."
                ],
                "code": ["fun Throwable.getStackTraceAddresses(): List<Long>"]
              },
              {
                "name": "printStackTrace",
                "description": [
                  "Prints the detailed description of this throwable to the specified writer.",
                  "Prints the detailed description of this throwable to the specified stream."
                ],
                "code": [
                  "fun Throwable.printStackTrace(writer: PrintWriter)",
                  "fun Throwable.printStackTrace(stream: PrintStream)"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "UnsupportedOperationException",
        "description": [],
        "code": [
          "open class UnsupportedOperationException : RuntimeException",
          "typealias UnsupportedOperationException = UnsupportedOperationException"
        ],
        "url": "-unsupported-operation-exception/index.html",
        "subcategories": [
          {
            "name": "Constructors",
            "declarations": [
              {
                "name": "<init>",
                "description": [],
                "code": [
                  "<init>()",
                  "<init>(message: String?)",
                  "<init>(message: String?, cause: Throwable?)",
                  "<init>(cause: Throwable?)"
                ]
              }
            ]
          },
          {
            "name": "Extension Functions",
            "declarations": [
              {
                "name": "getStackTraceAddresses",
                "description": [
                  "Returns a list of stack trace addresses representing the stack trace\npertaining to this throwable."
                ],
                "code": ["fun Throwable.getStackTraceAddresses(): List<Long>"]
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "name": "Extensions for External Classes",
    "subcategories": [
      {
        "name": "java.math.BigDecimal",
        "description": [],
        "code": [],
        "url": "java.math.-big-decimal/index.html",
        "subcategories": [
          {
            "name": "Extensions for java.math.BigDecimal",
            "declarations": [
              {
                "name": "dec",
                "description": [
                  "Enables the use of the unary -- operator for BigDecimal instances."
                ],
                "code": ["operator fun BigDecimal.dec(): BigDecimal"]
              },
              {
                "name": "div",
                "description": [
                  "Enables the use of the / operator for BigDecimal instances."
                ],
                "code": [
                  "operator fun BigDecimal.div(other: BigDecimal): BigDecimal"
                ]
              },
              {
                "name": "inc",
                "description": [
                  "Enables the use of the unary ++ operator for BigDecimal instances."
                ],
                "code": ["operator fun BigDecimal.inc(): BigDecimal"]
              },
              {
                "name": "minus",
                "description": [
                  "Enables the use of the - operator for BigDecimal instances."
                ],
                "code": [
                  "operator fun BigDecimal.minus(other: BigDecimal): BigDecimal"
                ]
              },
              {
                "name": "plus",
                "description": [
                  "Enables the use of the + operator for BigDecimal instances."
                ],
                "code": [
                  "operator fun BigDecimal.plus(other: BigDecimal): BigDecimal"
                ]
              },
              {
                "name": "rem",
                "description": [
                  "Enables the use of the % operator for BigDecimal instances."
                ],
                "code": [
                  "operator fun BigDecimal.rem(other: BigDecimal): BigDecimal"
                ]
              },
              {
                "name": "times",
                "description": [
                  "Enables the use of the * operator for BigDecimal instances."
                ],
                "code": [
                  "operator fun BigDecimal.times(other: BigDecimal): BigDecimal"
                ]
              },
              {
                "name": "unaryMinus",
                "description": [
                  "Enables the use of the unary - operator for BigDecimal instances."
                ],
                "code": ["operator fun BigDecimal.unaryMinus(): BigDecimal"]
              }
            ]
          }
        ]
      },
      {
        "name": "java.math.BigInteger",
        "description": [],
        "code": [],
        "url": "java.math.-big-integer/index.html",
        "subcategories": [
          {
            "name": "Extensions for java.math.BigInteger",
            "declarations": [
              {
                "name": "and",
                "description": [
                  "Performs a bitwise AND operation between the two values."
                ],
                "code": [
                  "infix fun BigInteger.and(other: BigInteger): BigInteger"
                ]
              },
              {
                "name": "dec",
                "description": [
                  "Enables the use of the -- operator for BigInteger instances."
                ],
                "code": ["operator fun BigInteger.dec(): BigInteger"]
              },
              {
                "name": "div",
                "description": [
                  "Enables the use of the / operator for BigInteger instances."
                ],
                "code": [
                  "operator fun BigInteger.div(other: BigInteger): BigInteger"
                ]
              },
              {
                "name": "inc",
                "description": [
                  "Enables the use of the ++ operator for BigInteger instances."
                ],
                "code": ["operator fun BigInteger.inc(): BigInteger"]
              },
              {
                "name": "inv",
                "description": [
                  "Inverts the bits including the sign bit in this value."
                ],
                "code": ["fun BigInteger.inv(): BigInteger"]
              },
              {
                "name": "minus",
                "description": [
                  "Enables the use of the - operator for BigInteger instances."
                ],
                "code": [
                  "operator fun BigInteger.minus(other: BigInteger): BigInteger"
                ]
              },
              {
                "name": "or",
                "description": [
                  "Performs a bitwise OR operation between the two values."
                ],
                "code": [
                  "infix fun BigInteger.or(other: BigInteger): BigInteger"
                ]
              },
              {
                "name": "plus",
                "description": [
                  "Enables the use of the + operator for BigInteger instances."
                ],
                "code": [
                  "operator fun BigInteger.plus(other: BigInteger): BigInteger"
                ]
              },
              {
                "name": "rem",
                "description": [
                  "Enables the use of the % operator for BigInteger instances."
                ],
                "code": [
                  "operator fun BigInteger.rem(other: BigInteger): BigInteger"
                ]
              },
              {
                "name": "shl",
                "description": [
                  "Shifts this value left by the n number of bits."
                ],
                "code": ["infix fun BigInteger.shl(n: Int): BigInteger"]
              },
              {
                "name": "shr",
                "description": [
                  "Shifts this value right by the n number of bits, filling the leftmost bits with copies of the sign bit."
                ],
                "code": ["infix fun BigInteger.shr(n: Int): BigInteger"]
              },
              {
                "name": "times",
                "description": [
                  "Enables the use of the * operator for BigInteger instances."
                ],
                "code": [
                  "operator fun BigInteger.times(other: BigInteger): BigInteger"
                ]
              },
              {
                "name": "toBigDecimal",
                "description": [
                  "Returns the value of this BigInteger number as a BigDecimal.",
                  "Returns the value of this BigInteger number as a BigDecimal\nscaled according to the specified scale and rounded according to the settings specified with mathContext."
                ],
                "code": [
                  "fun BigInteger.toBigDecimal(): BigDecimal",
                  "fun BigInteger.toBigDecimal(    scale: Int = 0,     mathContext: MathContext = MathContext.UNLIMITED): BigDecimal"
                ]
              },
              {
                "name": "unaryMinus",
                "description": [
                  "Enables the use of the unary - operator for BigInteger instances."
                ],
                "code": ["operator fun BigInteger.unaryMinus(): BigInteger"]
              },
              {
                "name": "xor",
                "description": [
                  "Performs a bitwise XOR operation between the two values."
                ],
                "code": [
                  "infix fun BigInteger.xor(other: BigInteger): BigInteger"
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "name": "Properties",
    "subcategories": [
      {
        "name": "code",
        "description": ["Returns the code of this Char."],
        "code": ["val Char.code: Int"],
        "url": "code.html",
        "subcategories": []
      },
      {
        "name": "isInitialized",
        "description": [
          "Returns true if this lateinit property has been assigned a value, and false otherwise."
        ],
        "code": ["val KProperty0<*>.isInitialized: Boolean"],
        "url": "is-initialized.html",
        "subcategories": []
      },
      {
        "name": "stackTrace",
        "description": [
          "Returns an array of stack trace elements representing the stack trace\npertaining to this throwable."
        ],
        "code": ["val Throwable.stackTrace: Array<StackTraceElement>"],
        "url": "stack-trace.html",
        "subcategories": []
      },
      {
        "name": "suppressedExceptions",
        "description": [
          "Returns a list of all exceptions that were suppressed in order to deliver this exception."
        ],
        "code": ["val Throwable.suppressedExceptions: List<Throwable>"],
        "url": "suppressed-exceptions.html",
        "subcategories": []
      }
    ]
  },
  {
    "name": "Functions",
    "subcategories": [
      {
        "name": "addSuppressed",
        "description": [
          "When supported by the platform, adds the specified exception to the list of exceptions that were\nsuppressed in order to deliver this exception."
        ],
        "code": ["fun Throwable.addSuppressed(exception: Throwable)"],
        "url": "add-suppressed.html",
        "subcategories": []
      },
      {
        "name": "also",
        "description": [
          "Calls the specified function block with this value as its argument and returns this value."
        ],
        "code": ["fun <T> T.also(block: (T) -> Unit): T"],
        "url": "also.html",
        "subcategories": []
      },
      {
        "name": "apply",
        "description": [
          "Calls the specified function block with this value as its receiver and returns this value."
        ],
        "code": ["fun <T> T.apply(block: T.() -> Unit): T"],
        "url": "apply.html",
        "subcategories": []
      },
      {
        "name": "arrayOf",
        "description": ["Returns an array containing the specified elements."],
        "code": ["fun <T> arrayOf(vararg elements: T): Array<T>"],
        "url": "array-of.html",
        "subcategories": []
      },
      {
        "name": "arrayOfNulls",
        "description": [
          "Returns an array of objects of the given type with the given size, initialized with null values."
        ],
        "code": ["fun <T> arrayOfNulls(size: Int): Array<T?>"],
        "url": "array-of-nulls.html",
        "subcategories": []
      },
      {
        "name": "assert",
        "description": [
          "Throws an AssertionError if the value is false\nand runtime assertions have been enabled on the JVM using the -ea JVM option.",
          "Throws an AssertionError calculated by lazyMessage if the value is false\nand runtime assertions have been enabled on the JVM using the -ea JVM option."
        ],
        "code": [
          "fun assert(value: Boolean)",
          "fun assert(value: Boolean, lazyMessage: () -> Any)"
        ],
        "url": "assert.html",
        "subcategories": []
      },
      {
        "name": "booleanArrayOf",
        "description": [
          "Returns an array containing the specified boolean values."
        ],
        "code": ["fun booleanArrayOf(vararg elements: Boolean): BooleanArray"],
        "url": "boolean-array-of.html",
        "subcategories": []
      },
      {
        "name": "byteArrayOf",
        "description": [
          "Returns an array containing the specified Byte numbers."
        ],
        "code": ["fun byteArrayOf(vararg elements: Byte): ByteArray"],
        "url": "byte-array-of.html",
        "subcategories": []
      },
      {
        "name": "Char",
        "description": [
          "Creates a Char with the specified code, or throws an exception if the code is out of Char.MIN_VALUE.code..Char.MAX_VALUE.code.",
          "Creates a Char with the specified code."
        ],
        "code": ["fun Char(code: Int): Char", "fun Char(code: UShort): Char"],
        "url": "-char.html",
        "subcategories": []
      },
      {
        "name": "charArrayOf",
        "description": [
          "Returns an array containing the specified characters."
        ],
        "code": ["fun charArrayOf(vararg elements: Char): CharArray"],
        "url": "char-array-of.html",
        "subcategories": []
      },
      {
        "name": "check",
        "description": [
          "Throws an IllegalStateException if the value is false.",
          "Throws an IllegalStateException with the result of calling lazyMessage if the value is false."
        ],
        "code": [
          "fun check(value: Boolean)",
          "fun check(value: Boolean, lazyMessage: () -> Any)"
        ],
        "url": "check.html",
        "subcategories": []
      },
      {
        "name": "checkNotNull",
        "description": [
          "Throws an IllegalStateException if the value is null. Otherwise\nreturns the not null value.",
          "Throws an IllegalStateException with the result of calling lazyMessage  if the value is null. Otherwise\nreturns the not null value."
        ],
        "code": [
          "fun <T : Any> checkNotNull(value: T?): T",
          "fun <T : Any> checkNotNull(    value: T?,     lazyMessage: () -> Any): T"
        ],
        "url": "check-not-null.html",
        "subcategories": []
      },
      {
        "name": "compareTo",
        "description": [
          "Compares this object with the specified object for order. Returns zero if this object is equal\nto the specified other object, a negative number if it's less than other, or a positive number\nif it's greater than other."
        ],
        "code": ["infix fun <T> Comparable<T>.compareTo(other: T): Int"],
        "url": "compare-to.html",
        "subcategories": []
      },
      {
        "name": "countLeadingZeroBits",
        "description": [
          "Counts the number of consecutive most significant bits that are zero in the binary representation of this Byte number.",
          "Counts the number of consecutive most significant bits that are zero in the binary representation of this Short number.",
          "Counts the number of consecutive most significant bits that are zero in the binary representation of this UInt number.",
          "Counts the number of consecutive most significant bits that are zero in the binary representation of this ULong number.",
          "Counts the number of consecutive most significant bits that are zero in the binary representation of this UByte number.",
          "Counts the number of consecutive most significant bits that are zero in the binary representation of this UShort number.",
          "Counts the number of consecutive most significant bits that are zero in the binary representation of this Int number.",
          "Counts the number of consecutive most significant bits that are zero in the binary representation of this Long number."
        ],
        "code": [
          "fun Byte.countLeadingZeroBits(): Int",
          "fun Short.countLeadingZeroBits(): Int",
          "fun UInt.countLeadingZeroBits(): Int",
          "fun ULong.countLeadingZeroBits(): Int",
          "fun UByte.countLeadingZeroBits(): Int",
          "fun UShort.countLeadingZeroBits(): Int",
          "fun Int.countLeadingZeroBits(): Int",
          "fun Long.countLeadingZeroBits(): Int"
        ],
        "url": "count-leading-zero-bits.html",
        "subcategories": []
      },
      {
        "name": "countOneBits",
        "description": [
          "Counts the number of set bits in the binary representation of this Byte number.",
          "Counts the number of set bits in the binary representation of this Short number.",
          "Counts the number of set bits in the binary representation of this UInt number.",
          "Counts the number of set bits in the binary representation of this ULong number.",
          "Counts the number of set bits in the binary representation of this UByte number.",
          "Counts the number of set bits in the binary representation of this UShort number.",
          "Counts the number of set bits in the binary representation of this Int number.",
          "Counts the number of set bits in the binary representation of this Long number."
        ],
        "code": [
          "fun Byte.countOneBits(): Int",
          "fun Short.countOneBits(): Int",
          "fun UInt.countOneBits(): Int",
          "fun ULong.countOneBits(): Int",
          "fun UByte.countOneBits(): Int",
          "fun UShort.countOneBits(): Int",
          "fun Int.countOneBits(): Int",
          "fun Long.countOneBits(): Int"
        ],
        "url": "count-one-bits.html",
        "subcategories": []
      },
      {
        "name": "countTrailingZeroBits",
        "description": [
          "Counts the number of consecutive least significant bits that are zero in the binary representation of this Byte number.",
          "Counts the number of consecutive least significant bits that are zero in the binary representation of this Short number.",
          "Counts the number of consecutive least significant bits that are zero in the binary representation of this UInt number.",
          "Counts the number of consecutive least significant bits that are zero in the binary representation of this ULong number.",
          "Counts the number of consecutive least significant bits that are zero in the binary representation of this UByte number.",
          "Counts the number of consecutive least significant bits that are zero in the binary representation of this UShort number.",
          "Counts the number of consecutive least significant bits that are zero in the binary representation of this Int number.",
          "Counts the number of consecutive least significant bits that are zero in the binary representation of this Long number."
        ],
        "code": [
          "fun Byte.countTrailingZeroBits(): Int",
          "fun Short.countTrailingZeroBits(): Int",
          "fun UInt.countTrailingZeroBits(): Int",
          "fun ULong.countTrailingZeroBits(): Int",
          "fun UByte.countTrailingZeroBits(): Int",
          "fun UShort.countTrailingZeroBits(): Int",
          "fun Int.countTrailingZeroBits(): Int",
          "fun Long.countTrailingZeroBits(): Int"
        ],
        "url": "count-trailing-zero-bits.html",
        "subcategories": []
      },
      {
        "name": "doubleArrayOf",
        "description": [
          "Returns an array containing the specified Double numbers."
        ],
        "code": ["fun doubleArrayOf(vararg elements: Double): DoubleArray"],
        "url": "double-array-of.html",
        "subcategories": []
      },
      {
        "name": "emptyArray",
        "description": ["Returns an empty array of the specified type T."],
        "code": ["fun <T> emptyArray(): Array<T>"],
        "url": "empty-array.html",
        "subcategories": []
      },
      {
        "name": "enumValueOf",
        "description": ["Returns an enum entry with specified name."],
        "code": ["fun <T : Enum<T>> enumValueOf(name: String): T"],
        "url": "enum-value-of.html",
        "subcategories": []
      },
      {
        "name": "enumValues",
        "description": ["Returns an array containing enum T entries."],
        "code": ["fun <T : Enum<T>> enumValues(): Array<T>"],
        "url": "enum-values.html",
        "subcategories": []
      },
      {
        "name": "error",
        "description": [
          "Throws an IllegalStateException with the given message."
        ],
        "code": ["fun error(message: Any): Nothing"],
        "url": "error.html",
        "subcategories": []
      },
      {
        "name": "floatArrayOf",
        "description": [
          "Returns an array containing the specified Float numbers."
        ],
        "code": ["fun floatArrayOf(vararg elements: Float): FloatArray"],
        "url": "float-array-of.html",
        "subcategories": []
      },
      {
        "name": "floorDiv",
        "description": [
          "Divides this value by the other value, flooring the result to an integer that is closer to negative infinity."
        ],
        "code": [
          "fun Byte.floorDiv(other: Byte): Int",
          "fun Byte.floorDiv(other: Short): Int",
          "fun Byte.floorDiv(other: Int): Int",
          "fun Byte.floorDiv(other: Long): Long",
          "fun Short.floorDiv(other: Byte): Int",
          "fun Short.floorDiv(other: Short): Int",
          "fun Short.floorDiv(other: Int): Int",
          "fun Short.floorDiv(other: Long): Long",
          "fun Int.floorDiv(other: Byte): Int",
          "fun Int.floorDiv(other: Short): Int",
          "fun Int.floorDiv(other: Int): Int",
          "fun Int.floorDiv(other: Long): Long",
          "fun Long.floorDiv(other: Byte): Long",
          "fun Long.floorDiv(other: Short): Long",
          "fun Long.floorDiv(other: Int): Long",
          "fun Long.floorDiv(other: Long): Long"
        ],
        "url": "floor-div.html",
        "subcategories": []
      },
      {
        "name": "fold",
        "description": [
          "Returns the result of onSuccess for the encapsulated value if this instance represents success\nor the result of onFailure function for the encapsulated Throwable exception if it is failure."
        ],
        "code": [
          "fun <R, T> Result<T>.fold(    onSuccess: (value: T) -> R,     onFailure: (exception: Throwable) -> R): R"
        ],
        "url": "fold.html",
        "subcategories": []
      },
      {
        "name": "getOrDefault",
        "description": [
          "Returns the encapsulated value if this instance represents success or the\ndefaultValue if it is failure."
        ],
        "code": ["fun <R, T : R> Result<T>.getOrDefault(defaultValue: R): R"],
        "url": "get-or-default.html",
        "subcategories": []
      },
      {
        "name": "getOrElse",
        "description": [
          "Returns the encapsulated value if this instance represents success or the\nresult of onFailure function for the encapsulated Throwable exception if it is failure."
        ],
        "code": [
          "fun <R, T : R> Result<T>.getOrElse(    onFailure: (exception: Throwable) -> R): R"
        ],
        "url": "get-or-else.html",
        "subcategories": []
      },
      {
        "name": "getOrThrow",
        "description": [
          "Returns the encapsulated value if this instance represents success or throws the encapsulated Throwable exception\nif it is failure."
        ],
        "code": ["fun <T> Result<T>.getOrThrow(): T"],
        "url": "get-or-throw.html",
        "subcategories": []
      },
      {
        "name": "getValue",
        "description": [
          "An extension operator that allows delegating a read-only property of type V\nto a property reference to a property of type V or its subtype.",
          "An extension operator that allows delegating a read-only member or extension property of type V\nto a property reference to a member or extension property of type V or its subtype.",
          "An extension to delegate a read-only property of type T to an instance of Lazy."
        ],
        "code": [
          "operator fun <V> KProperty0<V>.getValue(    thisRef: Any?,     property: KProperty<*>): V",
          "operator fun <T, V> KProperty1<T, V>.getValue(    thisRef: T,     property: KProperty<*>): V",
          "operator fun <T> Lazy<T>.getValue(    thisRef: Any?,     property: KProperty<*>): T"
        ],
        "url": "get-value.html",
        "subcategories": []
      },
      {
        "name": "hashCode",
        "description": [
          "Returns a hash code value for the object or zero if the object is null."
        ],
        "code": ["fun Any?.hashCode(): Int"],
        "url": "hash-code.html",
        "subcategories": []
      },
      {
        "name": "intArrayOf",
        "description": [
          "Returns an array containing the specified Int numbers."
        ],
        "code": ["fun intArrayOf(vararg elements: Int): IntArray"],
        "url": "int-array-of.html",
        "subcategories": []
      },
      {
        "name": "invoke",
        "description": [
          "Initiates a call to this deep recursive function, forming a root of the call tree."
        ],
        "code": [
          "operator fun <T, R> DeepRecursiveFunction<T, R>.invoke(    value: T): R"
        ],
        "url": "invoke.html",
        "subcategories": []
      },
      {
        "name": "isFinite",
        "description": [
          "Returns true if the argument is a finite floating-point value; returns false otherwise (for NaN and infinity arguments)."
        ],
        "code": [
          "fun Double.isFinite(): Boolean",
          "fun Float.isFinite(): Boolean"
        ],
        "url": "is-finite.html",
        "subcategories": []
      },
      {
        "name": "isInfinite",
        "description": [
          "Returns true if this value is infinitely large in magnitude."
        ],
        "code": [
          "fun Double.isInfinite(): Boolean",
          "fun Float.isInfinite(): Boolean"
        ],
        "url": "is-infinite.html",
        "subcategories": []
      },
      {
        "name": "isNaN",
        "description": [
          "Returns true if the specified number is a\nNot-a-Number (NaN) value, false otherwise."
        ],
        "code": ["fun Double.isNaN(): Boolean", "fun Float.isNaN(): Boolean"],
        "url": "is-na-n.html",
        "subcategories": []
      },
      {
        "name": "lazy",
        "description": [
          "Creates a new instance of the Lazy that uses the specified initialization function initializer\nand the default thread-safety mode LazyThreadSafetyMode.SYNCHRONIZED.",
          "Creates a new instance of the Lazy that uses the specified initialization function initializer."
        ],
        "code": [
          "fun <T> lazy(initializer: () -> T): Lazy<T>",
          "fun <T> lazy(    mode: LazyThreadSafetyMode,     initializer: () -> T): Lazy<T>",
          "fun <T> lazy(lock: Any?, initializer: () -> T): Lazy<T>"
        ],
        "url": "lazy.html",
        "subcategories": []
      },
      {
        "name": "lazyOf",
        "description": [
          "Creates a new instance of the Lazy that is already initialized with the specified value."
        ],
        "code": ["fun <T> lazyOf(value: T): Lazy<T>"],
        "url": "lazy-of.html",
        "subcategories": []
      },
      {
        "name": "let",
        "description": [
          "Calls the specified function block with this value as its argument and returns its result."
        ],
        "code": ["fun <T, R> T.let(block: (T) -> R): R"],
        "url": "let.html",
        "subcategories": []
      },
      {
        "name": "longArrayOf",
        "description": [
          "Returns an array containing the specified Long numbers."
        ],
        "code": ["fun longArrayOf(vararg elements: Long): LongArray"],
        "url": "long-array-of.html",
        "subcategories": []
      },
      {
        "name": "map",
        "description": [
          "Returns the encapsulated result of the given transform function applied to the encapsulated value\nif this instance represents success or the\noriginal encapsulated Throwable exception if it is failure."
        ],
        "code": [
          "fun <R, T> Result<T>.map(    transform: (value: T) -> R): Result<R>"
        ],
        "url": "map.html",
        "subcategories": []
      },
      {
        "name": "mapCatching",
        "description": [
          "Returns the encapsulated result of the given transform function applied to the encapsulated value\nif this instance represents success or the\noriginal encapsulated Throwable exception if it is failure."
        ],
        "code": [
          "fun <R, T> Result<T>.mapCatching(    transform: (value: T) -> R): Result<R>"
        ],
        "url": "map-catching.html",
        "subcategories": []
      },
      {
        "name": "mod",
        "description": [
          "Calculates the remainder of flooring division of this value (dividend) by the other value (divisor)."
        ],
        "code": [
          "fun Byte.mod(other: Byte): Byte",
          "fun Byte.mod(other: Short): Short",
          "fun Byte.mod(other: Int): Int",
          "fun Byte.mod(other: Long): Long",
          "fun Short.mod(other: Byte): Byte",
          "fun Short.mod(other: Short): Short",
          "fun Short.mod(other: Int): Int",
          "fun Short.mod(other: Long): Long",
          "fun Int.mod(other: Byte): Byte",
          "fun Int.mod(other: Short): Short",
          "fun Int.mod(other: Int): Int",
          "fun Int.mod(other: Long): Long",
          "fun Long.mod(other: Byte): Byte",
          "fun Long.mod(other: Short): Short",
          "fun Long.mod(other: Int): Int",
          "fun Long.mod(other: Long): Long",
          "fun Float.mod(other: Float): Float",
          "fun Float.mod(other: Double): Double",
          "fun Double.mod(other: Float): Double",
          "fun Double.mod(other: Double): Double"
        ],
        "url": "mod.html",
        "subcategories": []
      },
      {
        "name": "onFailure",
        "description": [
          "Performs the given action on the encapsulated Throwable exception if this instance represents failure.\nReturns the original Result unchanged."
        ],
        "code": [
          "fun <T> Result<T>.onFailure(    action: (exception: Throwable) -> Unit): Result<T>"
        ],
        "url": "on-failure.html",
        "subcategories": []
      },
      {
        "name": "onSuccess",
        "description": [
          "Performs the given action on the encapsulated value if this instance represents success.\nReturns the original Result unchanged."
        ],
        "code": [
          "fun <T> Result<T>.onSuccess(    action: (value: T) -> Unit): Result<T>"
        ],
        "url": "on-success.html",
        "subcategories": []
      },
      {
        "name": "plus",
        "description": [
          "Concatenates this string with the string representation of the given other object. If either the receiver\nor the other object are null, they are represented as the string \"null\"."
        ],
        "code": ["operator fun String?.plus(other: Any?): String"],
        "url": "plus.html",
        "subcategories": []
      },
      {
        "name": "printStackTrace",
        "description": [
          "Prints the detailed description of this throwable to the specified writer.",
          "Prints the detailed description of this throwable to the specified stream.",
          "Prints the detailed description of this throwable to the standard output or standard error output."
        ],
        "code": [
          "fun Throwable.printStackTrace(writer: PrintWriter)",
          "fun Throwable.printStackTrace(stream: PrintStream)",
          "fun Throwable.printStackTrace()"
        ],
        "url": "print-stack-trace.html",
        "subcategories": []
      },
      {
        "name": "recover",
        "description": [
          "Returns the encapsulated result of the given transform function applied to the encapsulated Throwable exception\nif this instance represents failure or the\noriginal encapsulated value if it is success."
        ],
        "code": [
          "fun <R, T : R> Result<T>.recover(    transform: (exception: Throwable) -> R): Result<R>"
        ],
        "url": "recover.html",
        "subcategories": []
      },
      {
        "name": "recoverCatching",
        "description": [
          "Returns the encapsulated result of the given transform function applied to the encapsulated Throwable exception\nif this instance represents failure or the\noriginal encapsulated value if it is success."
        ],
        "code": [
          "fun <R, T : R> Result<T>.recoverCatching(    transform: (exception: Throwable) -> R): Result<R>"
        ],
        "url": "recover-catching.html",
        "subcategories": []
      },
      {
        "name": "repeat",
        "description": [
          "Executes the given function action specified number of times."
        ],
        "code": ["fun repeat(times: Int, action: (Int) -> Unit)"],
        "url": "repeat.html",
        "subcategories": []
      },
      {
        "name": "require",
        "description": [
          "Throws an IllegalArgumentException if the value is false.",
          "Throws an IllegalArgumentException with the result of calling lazyMessage if the value is false."
        ],
        "code": [
          "fun require(value: Boolean)",
          "fun require(value: Boolean, lazyMessage: () -> Any)"
        ],
        "url": "require.html",
        "subcategories": []
      },
      {
        "name": "requireNotNull",
        "description": [
          "Throws an IllegalArgumentException if the value is null. Otherwise returns the not null value.",
          "Throws an IllegalArgumentException with the result of calling lazyMessage if the value is null. Otherwise\nreturns the not null value."
        ],
        "code": [
          "fun <T : Any> requireNotNull(value: T?): T",
          "fun <T : Any> requireNotNull(    value: T?,     lazyMessage: () -> Any): T"
        ],
        "url": "require-not-null.html",
        "subcategories": []
      },
      {
        "name": "rotateLeft",
        "description": [
          "Rotates the binary representation of this Byte number left by the specified bitCount number of bits.\nThe most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.",
          "Rotates the binary representation of this Short number left by the specified bitCount number of bits.\nThe most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.",
          "Rotates the binary representation of this UInt number left by the specified bitCount number of bits.\nThe most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.",
          "Rotates the binary representation of this ULong number left by the specified bitCount number of bits.\nThe most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.",
          "Rotates the binary representation of this UByte number left by the specified bitCount number of bits.\nThe most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.",
          "Rotates the binary representation of this UShort number left by the specified bitCount number of bits.\nThe most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.",
          "Rotates the binary representation of this Int number left by the specified bitCount number of bits.\nThe most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.",
          "Rotates the binary representation of this Long number left by the specified bitCount number of bits.\nThe most significant bits pushed out from the left side reenter the number as the least significant bits on the right side."
        ],
        "code": [
          "fun Byte.rotateLeft(bitCount: Int): Byte",
          "fun Short.rotateLeft(bitCount: Int): Short",
          "fun UInt.rotateLeft(bitCount: Int): UInt",
          "fun ULong.rotateLeft(bitCount: Int): ULong",
          "fun UByte.rotateLeft(bitCount: Int): UByte",
          "fun UShort.rotateLeft(bitCount: Int): UShort",
          "fun Int.rotateLeft(bitCount: Int): Int",
          "fun Long.rotateLeft(bitCount: Int): Long"
        ],
        "url": "rotate-left.html",
        "subcategories": []
      },
      {
        "name": "rotateRight",
        "description": [
          "Rotates the binary representation of this Byte number right by the specified bitCount number of bits.\nThe least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.",
          "Rotates the binary representation of this Short number right by the specified bitCount number of bits.\nThe least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.",
          "Rotates the binary representation of this UInt number right by the specified bitCount number of bits.\nThe least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.",
          "Rotates the binary representation of this ULong number right by the specified bitCount number of bits.\nThe least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.",
          "Rotates the binary representation of this UByte number right by the specified bitCount number of bits.\nThe least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.",
          "Rotates the binary representation of this UShort number right by the specified bitCount number of bits.\nThe least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.",
          "Rotates the binary representation of this Int number right by the specified bitCount number of bits.\nThe least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.",
          "Rotates the binary representation of this Long number right by the specified bitCount number of bits.\nThe least significant bits pushed out from the right side reenter the number as the most significant bits on the left side."
        ],
        "code": [
          "fun Byte.rotateRight(bitCount: Int): Byte",
          "fun Short.rotateRight(bitCount: Int): Short",
          "fun UInt.rotateRight(bitCount: Int): UInt",
          "fun ULong.rotateRight(bitCount: Int): ULong",
          "fun UByte.rotateRight(bitCount: Int): UByte",
          "fun UShort.rotateRight(bitCount: Int): UShort",
          "fun Int.rotateRight(bitCount: Int): Int",
          "fun Long.rotateRight(bitCount: Int): Long"
        ],
        "url": "rotate-right.html",
        "subcategories": []
      },
      {
        "name": "run",
        "description": [
          "Calls the specified function block and returns its result.",
          "Calls the specified function block with this value as its receiver and returns its result."
        ],
        "code": [
          "fun <R> run(block: () -> R): R",
          "fun <T, R> T.run(block: T.() -> R): R"
        ],
        "url": "run.html",
        "subcategories": []
      },
      {
        "name": "runCatching",
        "description": [
          "Calls the specified function block and returns its encapsulated result if invocation was successful,\ncatching any Throwable exception that was thrown from the block function execution and encapsulating it as a failure.",
          "Calls the specified function block with this value as its receiver and returns its encapsulated result if invocation was successful,\ncatching any Throwable exception that was thrown from the block function execution and encapsulating it as a failure."
        ],
        "code": [
          "fun <R> runCatching(block: () -> R): Result<R>",
          "fun <T, R> T.runCatching(block: T.() -> R): Result<R>"
        ],
        "url": "run-catching.html",
        "subcategories": []
      },
      {
        "name": "setValue",
        "description": [
          "An extension operator that allows delegating a mutable property of type V\nto a property reference to a mutable property of the same type V.",
          "An extension operator that allows delegating a mutable member or extension property of type V\nto a property reference to a member or extension mutable property of the same type V."
        ],
        "code": [
          "operator fun <V> KMutableProperty0<V>.setValue(    thisRef: Any?,     property: KProperty<*>,     value: V)",
          "operator fun <T, V> KMutableProperty1<T, V>.setValue(    thisRef: T,     property: KProperty<*>,     value: V)"
        ],
        "url": "set-value.html",
        "subcategories": []
      },
      {
        "name": "shortArrayOf",
        "description": [
          "Returns an array containing the specified Short numbers."
        ],
        "code": ["fun shortArrayOf(vararg elements: Short): ShortArray"],
        "url": "short-array-of.html",
        "subcategories": []
      },
      {
        "name": "stackTraceToString",
        "description": [
          "Returns the detailed description of this throwable with its stack trace."
        ],
        "code": ["fun Throwable.stackTraceToString(): String"],
        "url": "stack-trace-to-string.html",
        "subcategories": []
      },
      {
        "name": "suspend",
        "description": [],
        "code": ["fun <R> suspend(block: suspend () -> R): suspend () -> R"],
        "url": "suspend.html",
        "subcategories": []
      },
      {
        "name": "synchronized",
        "description": [
          "Executes the given function block while holding the monitor of the given object lock."
        ],
        "code": [
          "fun <R> synchronized(lock: Any, block: () -> R): R",
          "fun <R> synchronized(lock: Any, block: () -> R): R"
        ],
        "url": "synchronized.html",
        "subcategories": []
      },
      {
        "name": "takeHighestOneBit",
        "description": [
          "Returns a number having a single bit set in the position of the most significant set bit of this Byte number,\nor zero, if this number is zero.",
          "Returns a number having a single bit set in the position of the most significant set bit of this Short number,\nor zero, if this number is zero.",
          "Returns a number having a single bit set in the position of the most significant set bit of this UInt number,\nor zero, if this number is zero.",
          "Returns a number having a single bit set in the position of the most significant set bit of this ULong number,\nor zero, if this number is zero.",
          "Returns a number having a single bit set in the position of the most significant set bit of this UByte number,\nor zero, if this number is zero.",
          "Returns a number having a single bit set in the position of the most significant set bit of this UShort number,\nor zero, if this number is zero.",
          "Returns a number having a single bit set in the position of the most significant set bit of this Int number,\nor zero, if this number is zero.",
          "Returns a number having a single bit set in the position of the most significant set bit of this Long number,\nor zero, if this number is zero."
        ],
        "code": [
          "fun Byte.takeHighestOneBit(): Byte",
          "fun Short.takeHighestOneBit(): Short",
          "fun UInt.takeHighestOneBit(): UInt",
          "fun ULong.takeHighestOneBit(): ULong",
          "fun UByte.takeHighestOneBit(): UByte",
          "fun UShort.takeHighestOneBit(): UShort",
          "fun Int.takeHighestOneBit(): Int",
          "fun Long.takeHighestOneBit(): Long"
        ],
        "url": "take-highest-one-bit.html",
        "subcategories": []
      },
      {
        "name": "takeIf",
        "description": [
          "Returns this value if it satisfies the given predicate or null, if it doesn't."
        ],
        "code": ["fun <T> T.takeIf(predicate: (T) -> Boolean): T?"],
        "url": "take-if.html",
        "subcategories": []
      },
      {
        "name": "takeLowestOneBit",
        "description": [
          "Returns a number having a single bit set in the position of the least significant set bit of this Byte number,\nor zero, if this number is zero.",
          "Returns a number having a single bit set in the position of the least significant set bit of this Short number,\nor zero, if this number is zero.",
          "Returns a number having a single bit set in the position of the least significant set bit of this UInt number,\nor zero, if this number is zero.",
          "Returns a number having a single bit set in the position of the least significant set bit of this ULong number,\nor zero, if this number is zero.",
          "Returns a number having a single bit set in the position of the least significant set bit of this UByte number,\nor zero, if this number is zero.",
          "Returns a number having a single bit set in the position of the least significant set bit of this UShort number,\nor zero, if this number is zero.",
          "Returns a number having a single bit set in the position of the least significant set bit of this Int number,\nor zero, if this number is zero.",
          "Returns a number having a single bit set in the position of the least significant set bit of this Long number,\nor zero, if this number is zero."
        ],
        "code": [
          "fun Byte.takeLowestOneBit(): Byte",
          "fun Short.takeLowestOneBit(): Short",
          "fun UInt.takeLowestOneBit(): UInt",
          "fun ULong.takeLowestOneBit(): ULong",
          "fun UByte.takeLowestOneBit(): UByte",
          "fun UShort.takeLowestOneBit(): UShort",
          "fun Int.takeLowestOneBit(): Int",
          "fun Long.takeLowestOneBit(): Long"
        ],
        "url": "take-lowest-one-bit.html",
        "subcategories": []
      },
      {
        "name": "takeUnless",
        "description": [
          "Returns this value if it does not satisfy the given predicate or null, if it does."
        ],
        "code": ["fun <T> T.takeUnless(predicate: (T) -> Boolean): T?"],
        "url": "take-unless.html",
        "subcategories": []
      },
      {
        "name": "to",
        "description": ["Creates a tuple of type Pair from this and that."],
        "code": ["infix fun <A, B> A.to(that: B): Pair<A, B>"],
        "url": "to.html",
        "subcategories": []
      },
      {
        "name": "toBigDecimal",
        "description": [
          "Returns the value of this Int number as a BigDecimal.",
          "Returns the value of this Long number as a BigDecimal.",
          "Returns the value of this Float number as a BigDecimal.",
          "Returns the value of this Double number as a BigDecimal."
        ],
        "code": [
          "fun Int.toBigDecimal(): BigDecimal",
          "fun Int.toBigDecimal(mathContext: MathContext): BigDecimal",
          "fun Long.toBigDecimal(): BigDecimal",
          "fun Long.toBigDecimal(mathContext: MathContext): BigDecimal",
          "fun Float.toBigDecimal(): BigDecimal",
          "fun Float.toBigDecimal(mathContext: MathContext): BigDecimal",
          "fun Double.toBigDecimal(): BigDecimal",
          "fun Double.toBigDecimal(mathContext: MathContext): BigDecimal"
        ],
        "url": "to-big-decimal.html",
        "subcategories": [
          { "name": "Parameters", "declarations": [] },
          { "name": "Parameters", "declarations": [] },
          { "name": "Parameters", "declarations": [] },
          { "name": "Parameters", "declarations": [] }
        ]
      },
      {
        "name": "toBigInteger",
        "description": [
          "Returns the value of this Int number as a BigInteger.",
          "Returns the value of this Long number as a BigInteger."
        ],
        "code": [
          "fun Int.toBigInteger(): BigInteger",
          "fun Long.toBigInteger(): BigInteger"
        ],
        "url": "to-big-integer.html",
        "subcategories": []
      },
      {
        "name": "toBits",
        "description": [
          "Returns a bit representation of the specified floating-point value as Long\naccording to the IEEE 754 floating-point \"double format\" bit layout.",
          "Returns a bit representation of the specified floating-point value as Int\naccording to the IEEE 754 floating-point \"single format\" bit layout."
        ],
        "code": ["fun Double.toBits(): Long", "fun Float.toBits(): Int"],
        "url": "to-bits.html",
        "subcategories": []
      },
      {
        "name": "TODO",
        "description": [
          "Always throws NotImplementedError stating that operation is not implemented."
        ],
        "code": ["fun TODO(): Nothing", "fun TODO(reason: String): Nothing"],
        "url": "-t-o-d-o.html",
        "subcategories": [{ "name": "Parameters", "declarations": [] }]
      },
      {
        "name": "toList",
        "description": [
          "Converts this pair into a list.",
          "Converts this triple into a list."
        ],
        "code": [
          "fun <T> Pair<T, T>.toList(): List<T>",
          "fun <T> Triple<T, T, T>.toList(): List<T>"
        ],
        "url": "to-list.html",
        "subcategories": []
      },
      {
        "name": "toRawBits",
        "description": [
          "Returns a bit representation of the specified floating-point value as Long\naccording to the IEEE 754 floating-point \"double format\" bit layout,\npreserving NaN values exact layout.",
          "Returns a bit representation of the specified floating-point value as Int\naccording to the IEEE 754 floating-point \"single format\" bit layout,\npreserving NaN values exact layout."
        ],
        "code": ["fun Double.toRawBits(): Long", "fun Float.toRawBits(): Int"],
        "url": "to-raw-bits.html",
        "subcategories": []
      },
      {
        "name": "toString",
        "description": [
          "Returns a string representation of the object. Can be called with a null receiver, in which case\nit returns the string \"null\"."
        ],
        "code": ["fun Any?.toString(): String"],
        "url": "to-string.html",
        "subcategories": []
      },
      {
        "name": "toUByte",
        "description": [
          "Converts this Byte value to UByte.",
          "Converts this Short value to UByte.",
          "Converts this Int value to UByte.",
          "Converts this Long value to UByte."
        ],
        "code": [
          "fun Byte.toUByte(): UByte",
          "fun Short.toUByte(): UByte",
          "fun Int.toUByte(): UByte",
          "fun Long.toUByte(): UByte"
        ],
        "url": "to-u-byte.html",
        "subcategories": []
      },
      {
        "name": "toUInt",
        "description": [
          "Converts this Byte value to UInt.",
          "Converts this Short value to UInt.",
          "Converts this Int value to UInt.",
          "Converts this Long value to UInt.",
          "Converts this Float value to UInt.",
          "Converts this Double value to UInt."
        ],
        "code": [
          "fun Byte.toUInt(): UInt",
          "fun Short.toUInt(): UInt",
          "fun Int.toUInt(): UInt",
          "fun Long.toUInt(): UInt",
          "fun Float.toUInt(): UInt",
          "fun Double.toUInt(): UInt"
        ],
        "url": "to-u-int.html",
        "subcategories": []
      },
      {
        "name": "toULong",
        "description": [
          "Converts this Byte value to ULong.",
          "Converts this Short value to ULong.",
          "Converts this Int value to ULong.",
          "Converts this Long value to ULong.",
          "Converts this Float value to ULong.",
          "Converts this Double value to ULong."
        ],
        "code": [
          "fun Byte.toULong(): ULong",
          "fun Short.toULong(): ULong",
          "fun Int.toULong(): ULong",
          "fun Long.toULong(): ULong",
          "fun Float.toULong(): ULong",
          "fun Double.toULong(): ULong"
        ],
        "url": "to-u-long.html",
        "subcategories": []
      },
      {
        "name": "toUShort",
        "description": [
          "Converts this Byte value to UShort.",
          "Converts this Short value to UShort.",
          "Converts this Int value to UShort.",
          "Converts this Long value to UShort."
        ],
        "code": [
          "fun Byte.toUShort(): UShort",
          "fun Short.toUShort(): UShort",
          "fun Int.toUShort(): UShort",
          "fun Long.toUShort(): UShort"
        ],
        "url": "to-u-short.html",
        "subcategories": []
      },
      {
        "name": "UByteArray",
        "description": [
          "Creates a new array of the specified size, where each element is calculated by calling the specified\ninit function."
        ],
        "code": ["fun UByteArray(size: Int, init: (Int) -> UByte): UByteArray"],
        "url": "-u-byte-array.html",
        "subcategories": []
      },
      {
        "name": "ubyteArrayOf",
        "description": [],
        "code": ["fun ubyteArrayOf(vararg elements: UByte): UByteArray"],
        "url": "ubyte-array-of.html",
        "subcategories": []
      },
      {
        "name": "UIntArray",
        "description": [
          "Creates a new array of the specified size, where each element is calculated by calling the specified\ninit function."
        ],
        "code": ["fun UIntArray(size: Int, init: (Int) -> UInt): UIntArray"],
        "url": "-u-int-array.html",
        "subcategories": []
      },
      {
        "name": "uintArrayOf",
        "description": [],
        "code": ["fun uintArrayOf(vararg elements: UInt): UIntArray"],
        "url": "uint-array-of.html",
        "subcategories": []
      },
      {
        "name": "ULongArray",
        "description": [
          "Creates a new array of the specified size, where each element is calculated by calling the specified\ninit function."
        ],
        "code": ["fun ULongArray(size: Int, init: (Int) -> ULong): ULongArray"],
        "url": "-u-long-array.html",
        "subcategories": []
      },
      {
        "name": "ulongArrayOf",
        "description": [],
        "code": ["fun ulongArrayOf(vararg elements: ULong): ULongArray"],
        "url": "ulong-array-of.html",
        "subcategories": []
      },
      {
        "name": "use",
        "description": [
          "Executes the given block function on this resource and then closes it down correctly whether an exception\nis thrown or not."
        ],
        "code": [
          "fun <T : AutoCloseable?, R> T.use(block: (T) -> R): R",
          "fun <T : AutoCloseable?, R> T.use(block: (T) -> R): R"
        ],
        "url": "use.html",
        "subcategories": [{ "name": "Parameters", "declarations": [] }]
      },
      {
        "name": "UShortArray",
        "description": [
          "Creates a new array of the specified size, where each element is calculated by calling the specified\ninit function."
        ],
        "code": [
          "fun UShortArray(    size: Int,     init: (Int) -> UShort): UShortArray"
        ],
        "url": "-u-short-array.html",
        "subcategories": []
      },
      {
        "name": "ushortArrayOf",
        "description": [],
        "code": ["fun ushortArrayOf(vararg elements: UShort): UShortArray"],
        "url": "ushort-array-of.html",
        "subcategories": []
      },
      {
        "name": "with",
        "description": [
          "Calls the specified function block with the given receiver as its receiver and returns its result."
        ],
        "code": ["fun <T, R> with(receiver: T, block: T.() -> R): R"],
        "url": "with.html",
        "subcategories": []
      }
    ]
  },
  {
    "name": "Companion Object Functions",
    "subcategories": [
      {
        "name": "fromBits",
        "description": [
          "Returns the Double value corresponding to a given bit representation.",
          "Returns the Float value corresponding to a given bit representation."
        ],
        "code": [
          "fun Double.Companion.fromBits(bits: Long): Double",
          "fun Float.Companion.fromBits(bits: Int): Float"
        ],
        "url": "from-bits.html",
        "subcategories": []
      }
    ]
  }
]
